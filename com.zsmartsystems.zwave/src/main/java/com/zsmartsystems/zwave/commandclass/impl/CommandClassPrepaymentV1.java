/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_PREPAYMENT</b> version <b>1</b>.
 * <p>
 * Command Class Prepayment
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x3F.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassPrepaymentV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassPrepaymentV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_PREPAYMENT
     */
    public final static int COMMAND_CLASS_KEY = 0x3F;

    /**
     * Prepayment Balance Get Command Constant
     */
    public final static int PREPAYMENT_BALANCE_GET = 0x01;
    /**
     * Prepayment Balance Report Command Constant
     */
    public final static int PREPAYMENT_BALANCE_REPORT = 0x02;
    /**
     * Prepayment Supported Get Command Constant
     */
    public final static int PREPAYMENT_SUPPORTED_GET = 0x03;
    /**
     * Prepayment Supported Report Command Constant
     */
    public final static int PREPAYMENT_SUPPORTED_REPORT = 0x04;

    /**
     * Map holding constants for PrepaymentBalanceGetBalanceType
     */
    private static Map<Integer, String> constantPrepaymentBalanceGetBalanceType = new HashMap<Integer, String>();

    static {
        // Constants for PrepaymentBalanceGetBalanceType
        constantPrepaymentBalanceGetBalanceType.put(0x00, "UTILITY");
        constantPrepaymentBalanceGetBalanceType.put(0x01, "MONETARY");
    }

    /**
     * Creates a new message with the PREPAYMENT_BALANCE_GET command.
     * <p>
     * Prepayment Balance Get
     *
     * @param balanceType {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>UTILITY
     *            <li>MONETARY
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getPrepaymentBalanceGet(String balanceType) {
        logger.debug("Creating command message PREPAYMENT_BALANCE_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(PREPAYMENT_BALANCE_GET);

        // Process 'Properties1'
        int varBalanceType = Integer.MAX_VALUE;
        for (Integer entry : constantPrepaymentBalanceGetBalanceType.keySet()) {
            if (constantPrepaymentBalanceGetBalanceType.get(entry).equals(balanceType)) {
                varBalanceType = entry;
                break;
            }
        }
        if (varBalanceType == Integer.MAX_VALUE) {
            throw new IllegalArgumentException("Unknown constant value '" + balanceType + "' for balanceType");
        }
        outputData.write(varBalanceType << 6 & 0xC0);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the PREPAYMENT_BALANCE_GET command.
     * <p>
     * Prepayment Balance Get
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>BALANCE_TYPE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>UTILITY
     * <li>MONETARY
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handlePrepaymentBalanceGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("BALANCE_TYPE", constantPrepaymentBalanceGetBalanceType.get((payload[2] & 0xC0) >> 6));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the PREPAYMENT_BALANCE_REPORT command.
     * <p>
     * Prepayment Balance Report
     *
     * @param meterType {@link Integer}
     * @param balanceType {@link Integer}
     * @param scale {@link Integer}
     * @param balancePrecision {@link Integer}
     * @param balanceValue {@link Long}
     * @param debtPrecision {@link Integer}
     * @param debt {@link Long}
     * @param emerCreditPrecision {@link Integer}
     * @param emerCredit {@link Long}
     * @param debtRecoveryPercentage {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getPrepaymentBalanceReport(Integer meterType, Integer balanceType, Integer scale,
            Integer balancePrecision, Long balanceValue, Integer debtPrecision, Long debt, Integer emerCreditPrecision,
            Long emerCredit, Integer debtRecoveryPercentage) {
        logger.debug("Creating command message PREPAYMENT_BALANCE_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(PREPAYMENT_BALANCE_REPORT);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= meterType & 0x3F;
        valProperties1 |= ((balanceType << 6) & 0xC0);
        outputData.write(valProperties1);

        // Process 'Properties2'
        int valProperties2 = 0;
        valProperties2 |= scale & 0x1F;
        valProperties2 |= ((balancePrecision << 5) & 0xE0);
        outputData.write(valProperties2);

        // Process 'Balance Value'
        outputData.write((byte) ((balanceValue >> 24) & 0xff));
        outputData.write((byte) ((balanceValue >> 16) & 0xff));
        outputData.write((byte) ((balanceValue >> 8) & 0xff));
        outputData.write((byte) (balanceValue & 0xff));

        // Process 'Properties3'
        outputData.write(((debtPrecision << 5) & 0xE0));

        // Process 'Debt'
        outputData.write((byte) ((debt >> 24) & 0xff));
        outputData.write((byte) ((debt >> 16) & 0xff));
        outputData.write((byte) ((debt >> 8) & 0xff));
        outputData.write((byte) (debt & 0xff));

        // Process 'Properties4'
        outputData.write(((emerCreditPrecision << 5) & 0xE0));

        // Process 'Emer Credit'
        outputData.write((byte) ((emerCredit >> 24) & 0xff));
        outputData.write((byte) ((emerCredit >> 16) & 0xff));
        outputData.write((byte) ((emerCredit >> 8) & 0xff));
        outputData.write((byte) (emerCredit & 0xff));

        // Process 'Currency'

        // Process 'Debt Recovery Percentage'
        outputData.write(debtRecoveryPercentage);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the PREPAYMENT_BALANCE_REPORT command.
     * <p>
     * Prepayment Balance Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>METER_TYPE {@link Integer}
     * <li>BALANCE_TYPE {@link Integer}
     * <li>SCALE {@link Integer}
     * <li>BALANCE_PRECISION {@link Integer}
     * <li>BALANCE_VALUE {@link Long}
     * <li>DEBT_PRECISION {@link Integer}
     * <li>DEBT {@link Long}
     * <li>EMER_CREDIT_PRECISION {@link Integer}
     * <li>EMER_CREDIT {@link Long}
     * <li>DEBT_RECOVERY_PERCENTAGE {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handlePrepaymentBalanceReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("METER_TYPE", Integer.valueOf(payload[2] & 0x3F));
        response.put("BALANCE_TYPE", Integer.valueOf(payload[2] & 0xC0 >> 6));

        // Process 'Properties2'
        response.put("SCALE", Integer.valueOf(payload[3] & 0x1F));
        response.put("BALANCE_PRECISION", Integer.valueOf(payload[3] & 0xE0 >> 5));

        // Process 'Balance Value'
        response.put("BALANCE_VALUE", Long.valueOf((payload[4] << 24) + (payload[5] << 16) + (payload[6] << 8) + payload[7]));

        // Process 'Properties3'
        response.put("DEBT_PRECISION", Integer.valueOf(payload[8] & 0xE0 >> 5));

        // Process 'Debt'
        response.put("DEBT", Long.valueOf((payload[9] << 24) + (payload[10] << 16) + (payload[11] << 8) + payload[12]));

        // Process 'Properties4'
        response.put("EMER_CREDIT_PRECISION", Integer.valueOf(payload[13] & 0xE0 >> 5));

        // Process 'Emer Credit'
        response.put("EMER_CREDIT", Long.valueOf((payload[14] << 24) + (payload[15] << 16) + (payload[16] << 8) + payload[17]));

        // Process 'Currency'

        // Process 'Debt Recovery Percentage'
        response.put("DEBT_RECOVERY_PERCENTAGE", Integer.valueOf(payload[21]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the PREPAYMENT_SUPPORTED_GET command.
     * <p>
     * Prepayment Supported Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getPrepaymentSupportedGet() {
        logger.debug("Creating command message PREPAYMENT_SUPPORTED_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(PREPAYMENT_SUPPORTED_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the PREPAYMENT_SUPPORTED_GET command.
     * <p>
     * Prepayment Supported Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handlePrepaymentSupportedGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the PREPAYMENT_SUPPORTED_REPORT command.
     * <p>
     * Prepayment Supported Report
     *
     * @param typesSupported {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getPrepaymentSupportedReport(Integer typesSupported) {
        logger.debug("Creating command message PREPAYMENT_SUPPORTED_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(PREPAYMENT_SUPPORTED_REPORT);

        // Process 'Properties1'
        outputData.write(typesSupported & 0x0F);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the PREPAYMENT_SUPPORTED_REPORT command.
     * <p>
     * Prepayment Supported Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>TYPES_SUPPORTED {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handlePrepaymentSupportedReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("TYPES_SUPPORTED", Integer.valueOf(payload[2] & 0x0F));

        // Return the map of processed response data;
        return response;
    }
}
