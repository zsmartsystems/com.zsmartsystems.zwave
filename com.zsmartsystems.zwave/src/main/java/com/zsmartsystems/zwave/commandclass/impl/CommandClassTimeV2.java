/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_TIME</b> version <b>2</b>.
 * <p>
 * Command Class Time
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x8A.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassTimeV2 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassTimeV2.class);

    /**
     * Integer command class key for COMMAND_CLASS_TIME
     */
    public final static int COMMAND_CLASS_KEY = 0x8A;

    /**
     * Time Get Command Constant
     */
    public final static int TIME_GET = 0x01;
    /**
     * Time Report Command Constant
     */
    public final static int TIME_REPORT = 0x02;
    /**
     * Date Get Command Constant
     */
    public final static int DATE_GET = 0x03;
    /**
     * Date Report Command Constant
     */
    public final static int DATE_REPORT = 0x04;
    /**
     * Time Offset Set Command Constant
     */
    public final static int TIME_OFFSET_SET = 0x05;
    /**
     * Time Offset Get Command Constant
     */
    public final static int TIME_OFFSET_GET = 0x06;
    /**
     * Time Offset Report Command Constant
     */
    public final static int TIME_OFFSET_REPORT = 0x07;

    /**
     * Map holding constants for TimeOffsetSetLevel
     */
    private static Map<Integer, String> constantTimeOffsetSetLevel = new HashMap<Integer, String>();

    /**
     * Map holding constants for TimeOffsetSetLevel2
     */
    private static Map<Integer, String> constantTimeOffsetSetLevel2 = new HashMap<Integer, String>();

    /**
     * Map holding constants for TimeOffsetReportLevel2
     */
    private static Map<Integer, String> constantTimeOffsetReportLevel2 = new HashMap<Integer, String>();

    /**
     * Map holding constants for TimeOffsetReportLevel
     */
    private static Map<Integer, String> constantTimeOffsetReportLevel = new HashMap<Integer, String>();

    /**
     * Map holding constants for TimeReportHourLocalTime
     */
    private static Map<Integer, String> constantTimeReportHourLocalTime = new HashMap<Integer, String>();

    static {
        // Constants for TimeOffsetSetLevel
        constantTimeOffsetSetLevel.put(0x80, "SIGN_TZO");

        // Constants for TimeOffsetSetLevel2
        constantTimeOffsetSetLevel2.put(0x80, "SIGN_OFFSET_DST");

        // Constants for TimeOffsetReportLevel2
        constantTimeOffsetReportLevel2.put(0x80, "SIGN_OFFSET_DST");

        // Constants for TimeOffsetReportLevel
        constantTimeOffsetReportLevel.put(0x80, "SIGN_TZO");

        // Constants for TimeReportHourLocalTime
        constantTimeReportHourLocalTime.put(0x80, "RTC_FAILURE");
    }

    /**
     * Creates a new message with the TIME_GET command.
     * <p>
     * Time Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getTimeGet() {
        logger.debug("Creating command message TIME_GET version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(TIME_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the TIME_GET command.
     * <p>
     * Time Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleTimeGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the TIME_REPORT command.
     * <p>
     * Time Report
     *
     * @param hourLocalTime {@link Integer}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>RTC_FAILURE
     *            </ul>
     * @param rtcFailure {@link Boolean}
     * @param minuteLocalTime {@link Integer}
     * @param secondLocalTime {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getTimeReport(Integer hourLocalTime, Boolean rtcFailure, Integer minuteLocalTime,
            Integer secondLocalTime) {
        logger.debug("Creating command message TIME_REPORT version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(TIME_REPORT);

        // Process 'Hour Local Time'
        int valHourLocalTime = 0;
        valHourLocalTime |= hourLocalTime & 0x1F;
        valHourLocalTime |= rtcFailure ? 0x80 : 0;
        outputData.write(valHourLocalTime);

        // Process 'Minute Local Time'
        outputData.write(minuteLocalTime);

        // Process 'Second Local Time'
        outputData.write(secondLocalTime);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the TIME_REPORT command.
     * <p>
     * Time Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>HOUR_LOCAL_TIME {@link Integer}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>RTC_FAILURE
     * </ul>
     * <li>RTC_FAILURE {@link Boolean}
     * <li>MINUTE_LOCAL_TIME {@link Integer}
     * <li>SECOND_LOCAL_TIME {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleTimeReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Hour Local Time'
        response.put("HOUR_LOCAL_TIME", Integer.valueOf(payload[2] & 0x1F));
        response.put("RTC_FAILURE", Boolean.valueOf((payload[2] & 0x80) != 0));

        // Process 'Minute Local Time'
        response.put("MINUTE_LOCAL_TIME", Integer.valueOf(payload[3]));

        // Process 'Second Local Time'
        response.put("SECOND_LOCAL_TIME", Integer.valueOf(payload[4]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the DATE_GET command.
     * <p>
     * Date Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getDateGet() {
        logger.debug("Creating command message DATE_GET version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(DATE_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the DATE_GET command.
     * <p>
     * Date Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleDateGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the DATE_REPORT command.
     * <p>
     * Date Report
     *
     * @param year {@link Integer}
     * @param month {@link Integer}
     * @param day {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getDateReport(Integer year, Integer month, Integer day) {
        logger.debug("Creating command message DATE_REPORT version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(DATE_REPORT);

        // Process 'Year'
        outputData.write((year >> 8) & 0xff);
        outputData.write(year & 0xff);

        // Process 'Month'
        outputData.write(month);

        // Process 'Day'
        outputData.write(day);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the DATE_REPORT command.
     * <p>
     * Date Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>YEAR {@link Integer}
     * <li>MONTH {@link Integer}
     * <li>DAY {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleDateReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Year'
        response.put("YEAR", Integer.valueOf(((payload[2] & 0xff) << 8) + (payload[3] & 0xff)));

        // Process 'Month'
        response.put("MONTH", Integer.valueOf(payload[4]));

        // Process 'Day'
        response.put("DAY", Integer.valueOf(payload[5]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the TIME_OFFSET_SET command.
     * <p>
     * Time Offset Set
     *
     * @param hourTzo {@link Integer}
     * @param signTzo {@link Boolean}
     * @param minuteTzo {@link Integer}
     * @param minuteOffsetDst {@link Integer}
     * @param signOffsetDst {@link Boolean}
     * @param monthStartDst {@link Integer}
     * @param dayStartDst {@link Integer}
     * @param hourStartDst {@link Integer}
     * @param monthEndDst {@link Integer}
     * @param dayEndDst {@link Integer}
     * @param hourEndDst {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getTimeOffsetSet(Integer hourTzo, Boolean signTzo, Integer minuteTzo, Integer minuteOffsetDst,
            Boolean signOffsetDst, Integer monthStartDst, Integer dayStartDst, Integer hourStartDst, Integer monthEndDst,
            Integer dayEndDst, Integer hourEndDst) {
        logger.debug("Creating command message TIME_OFFSET_SET version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(TIME_OFFSET_SET);

        // Process 'Level'
        int valLevel = 0;
        valLevel |= hourTzo & 0x7F;
        valLevel |= signTzo ? 0x80 : 0;
        outputData.write(valLevel);

        // Process 'Minute TZO'
        outputData.write(minuteTzo);

        // Process 'Level2'
        int valLevel2 = 0;
        valLevel2 |= minuteOffsetDst & 0x7F;
        valLevel2 |= signOffsetDst ? 0x80 : 0;
        outputData.write(valLevel2);

        // Process 'Month Start DST'
        outputData.write(monthStartDst);

        // Process 'Day Start DST'
        outputData.write(dayStartDst);

        // Process 'Hour Start DST'
        outputData.write(hourStartDst);

        // Process 'Month End DST'
        outputData.write(monthEndDst);

        // Process 'Day End DST'
        outputData.write(dayEndDst);

        // Process 'Hour End DST'
        outputData.write(hourEndDst);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the TIME_OFFSET_SET command.
     * <p>
     * Time Offset Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>HOUR_TZO {@link Integer}
     * <li>SIGN_TZO {@link Boolean}
     * <li>MINUTE_TZO {@link Integer}
     * <li>MINUTE_OFFSET_DST {@link Integer}
     * <li>SIGN_OFFSET_DST {@link Boolean}
     * <li>MONTH_START_DST {@link Integer}
     * <li>DAY_START_DST {@link Integer}
     * <li>HOUR_START_DST {@link Integer}
     * <li>MONTH_END_DST {@link Integer}
     * <li>DAY_END_DST {@link Integer}
     * <li>HOUR_END_DST {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleTimeOffsetSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Level'
        response.put("HOUR_TZO", Integer.valueOf(payload[2] & 0x7F));
        response.put("SIGN_TZO", Boolean.valueOf((payload[2] & 0x80) != 0));

        // Process 'Minute TZO'
        response.put("MINUTE_TZO", Integer.valueOf(payload[3]));

        // Process 'Level2'
        response.put("MINUTE_OFFSET_DST", Integer.valueOf(payload[4] & 0x7F));
        response.put("SIGN_OFFSET_DST", Boolean.valueOf((payload[4] & 0x80) != 0));

        // Process 'Month Start DST'
        response.put("MONTH_START_DST", Integer.valueOf(payload[5]));

        // Process 'Day Start DST'
        response.put("DAY_START_DST", Integer.valueOf(payload[6]));

        // Process 'Hour Start DST'
        response.put("HOUR_START_DST", Integer.valueOf(payload[7]));

        // Process 'Month End DST'
        response.put("MONTH_END_DST", Integer.valueOf(payload[8]));

        // Process 'Day End DST'
        response.put("DAY_END_DST", Integer.valueOf(payload[9]));

        // Process 'Hour End DST'
        response.put("HOUR_END_DST", Integer.valueOf(payload[10]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the TIME_OFFSET_GET command.
     * <p>
     * Time Offset Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getTimeOffsetGet() {
        logger.debug("Creating command message TIME_OFFSET_GET version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(TIME_OFFSET_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the TIME_OFFSET_GET command.
     * <p>
     * Time Offset Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleTimeOffsetGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the TIME_OFFSET_REPORT command.
     * <p>
     * Time Offset Report
     *
     * @param hourTzo {@link Integer}
     * @param signTzo {@link Boolean}
     * @param minuteTzo {@link Integer}
     * @param minuteOffsetDst {@link Integer}
     * @param signOffsetDst {@link Boolean}
     * @param monthStartDst {@link Integer}
     * @param dayStartDst {@link Integer}
     * @param hourStartDst {@link Integer}
     * @param monthEndDst {@link Integer}
     * @param dayEndDst {@link Integer}
     * @param hourEndDst {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getTimeOffsetReport(Integer hourTzo, Boolean signTzo, Integer minuteTzo,
            Integer minuteOffsetDst, Boolean signOffsetDst, Integer monthStartDst, Integer dayStartDst,
            Integer hourStartDst, Integer monthEndDst, Integer dayEndDst, Integer hourEndDst) {
        logger.debug("Creating command message TIME_OFFSET_REPORT version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(TIME_OFFSET_REPORT);

        // Process 'Level'
        int valLevel = 0;
        valLevel |= hourTzo & 0x7F;
        valLevel |= signTzo ? 0x80 : 0;
        outputData.write(valLevel);

        // Process 'Minute TZO'
        outputData.write(minuteTzo);

        // Process 'Level2'
        int valLevel2 = 0;
        valLevel2 |= minuteOffsetDst & 0x7F;
        valLevel2 |= signOffsetDst ? 0x80 : 0;
        outputData.write(valLevel2);

        // Process 'Month Start DST'
        outputData.write(monthStartDst);

        // Process 'Day Start DST'
        outputData.write(dayStartDst);

        // Process 'Hour Start DST'
        outputData.write(hourStartDst);

        // Process 'Month End DST'
        outputData.write(monthEndDst);

        // Process 'Day End DST'
        outputData.write(dayEndDst);

        // Process 'Hour End DST'
        outputData.write(hourEndDst);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the TIME_OFFSET_REPORT command.
     * <p>
     * Time Offset Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>HOUR_TZO {@link Integer}
     * <li>SIGN_TZO {@link Boolean}
     * <li>MINUTE_TZO {@link Integer}
     * <li>MINUTE_OFFSET_DST {@link Integer}
     * <li>SIGN_OFFSET_DST {@link Boolean}
     * <li>MONTH_START_DST {@link Integer}
     * <li>DAY_START_DST {@link Integer}
     * <li>HOUR_START_DST {@link Integer}
     * <li>MONTH_END_DST {@link Integer}
     * <li>DAY_END_DST {@link Integer}
     * <li>HOUR_END_DST {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleTimeOffsetReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Level'
        response.put("HOUR_TZO", Integer.valueOf(payload[2] & 0x7F));
        response.put("SIGN_TZO", Boolean.valueOf((payload[2] & 0x80) != 0));

        // Process 'Minute TZO'
        response.put("MINUTE_TZO", Integer.valueOf(payload[3]));

        // Process 'Level2'
        response.put("MINUTE_OFFSET_DST", Integer.valueOf(payload[4] & 0x7F));
        response.put("SIGN_OFFSET_DST", Boolean.valueOf((payload[4] & 0x80) != 0));

        // Process 'Month Start DST'
        response.put("MONTH_START_DST", Integer.valueOf(payload[5]));

        // Process 'Day Start DST'
        response.put("DAY_START_DST", Integer.valueOf(payload[6]));

        // Process 'Hour Start DST'
        response.put("HOUR_START_DST", Integer.valueOf(payload[7]));

        // Process 'Month End DST'
        response.put("MONTH_END_DST", Integer.valueOf(payload[8]));

        // Process 'Day End DST'
        response.put("DAY_END_DST", Integer.valueOf(payload[9]));

        // Process 'Hour End DST'
        response.put("HOUR_END_DST", Integer.valueOf(payload[10]));

        // Return the map of processed response data;
        return response;
    }
}
