/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_HRV_CONTROL</b> version <b>1</b>.
 * <p>
 * Command Class Hrv Control
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x39.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassHrvControlV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassHrvControlV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_HRV_CONTROL
     */
    public final static int COMMAND_CLASS_KEY = 0x39;

    /**
     * Hrv Control Mode Set Command Constant
     */
    public final static int HRV_CONTROL_MODE_SET = 0x01;
    /**
     * Hrv Control Mode Get Command Constant
     */
    public final static int HRV_CONTROL_MODE_GET = 0x02;
    /**
     * Hrv Control Mode Report Command Constant
     */
    public final static int HRV_CONTROL_MODE_REPORT = 0x03;
    /**
     * Hrv Control Bypass Set Command Constant
     */
    public final static int HRV_CONTROL_BYPASS_SET = 0x04;
    /**
     * Hrv Control Bypass Get Command Constant
     */
    public final static int HRV_CONTROL_BYPASS_GET = 0x05;
    /**
     * Hrv Control Bypass Report Command Constant
     */
    public final static int HRV_CONTROL_BYPASS_REPORT = 0x06;
    /**
     * Hrv Control Ventilation Rate Set Command Constant
     */
    public final static int HRV_CONTROL_VENTILATION_RATE_SET = 0x07;
    /**
     * Hrv Control Ventilation Rate Get Command Constant
     */
    public final static int HRV_CONTROL_VENTILATION_RATE_GET = 0x08;
    /**
     * Hrv Control Ventilation Rate Report Command Constant
     */
    public final static int HRV_CONTROL_VENTILATION_RATE_REPORT = 0x09;
    /**
     * Hrv Control Mode Supported Get Command Constant
     */
    public final static int HRV_CONTROL_MODE_SUPPORTED_GET = 0x0A;
    /**
     * Hrv Control Mode Supported Report Command Constant
     */
    public final static int HRV_CONTROL_MODE_SUPPORTED_REPORT = 0x0B;

    /**
     * Map holding constants for HrvControlModeSupportedReportBitMask
     */
    private static Map<Integer, String> constantHrvControlModeSupportedReportBitMask = new HashMap<Integer, String>();

    /**
     * Map holding constants for HrvControlModeSetMode
     */
    private static Map<Integer, String> constantHrvControlModeSetMode = new HashMap<Integer, String>();

    /**
     * Map holding constants for HrvControlModeReportMode
     */
    private static Map<Integer, String> constantHrvControlModeReportMode = new HashMap<Integer, String>();

    /**
     * Map holding constants for HrvControlModeSupportedReportManualControlSupported
     */
    private static Map<Integer, String> constantHrvControlModeSupportedReportManualControlSupported = new HashMap<Integer, String>();

    static {
        // Constants for HrvControlModeSupportedReportBitMask
        constantHrvControlModeSupportedReportBitMask.put(0x00, "OFF");
        constantHrvControlModeSupportedReportBitMask.put(0x01, "DEMAND_AUTOMATIC");
        constantHrvControlModeSupportedReportBitMask.put(0x02, "SCHEDULE");
        constantHrvControlModeSupportedReportBitMask.put(0x03, "ENERGY_SAVINGS_MODE");
        constantHrvControlModeSupportedReportBitMask.put(0x04, "MANUAL");

        // Constants for HrvControlModeSetMode
        constantHrvControlModeSetMode.put(0x00, "OFF");
        constantHrvControlModeSetMode.put(0x01, "DEMAND_AUTOMATIC");
        constantHrvControlModeSetMode.put(0x02, "SCHEDULE");
        constantHrvControlModeSetMode.put(0x03, "ENERGY_SAVINGS_MODE");
        constantHrvControlModeSetMode.put(0x04, "MANUAL");

        // Constants for HrvControlModeReportMode
        constantHrvControlModeReportMode.put(0x00, "OFF");
        constantHrvControlModeReportMode.put(0x01, "DEMAND_AUTOMATIC");
        constantHrvControlModeReportMode.put(0x02, "SCHEDULE");
        constantHrvControlModeReportMode.put(0x03, "ENERGY_SAVINGS_MODE");
        constantHrvControlModeReportMode.put(0x04, "MANUAL");

        // Constants for HrvControlModeSupportedReportManualControlSupported
        constantHrvControlModeSupportedReportManualControlSupported.put(0x00, "BYPASS_OPEN_CLOSE");
        constantHrvControlModeSupportedReportManualControlSupported.put(0x01, "BYPASS_AUTO");
        constantHrvControlModeSupportedReportManualControlSupported.put(0x02, "MODULATED_BYPASS");
        constantHrvControlModeSupportedReportManualControlSupported.put(0x03, "VENTILATION_RATE");
    }

    /**
     * Creates a new message with the HRV_CONTROL_MODE_SET command.
     * <p>
     * Hrv Control Mode Set
     *
     * @param mode {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>OFF
     *            <li>DEMAND_AUTOMATIC
     *            <li>SCHEDULE
     *            <li>ENERGY_SAVINGS_MODE
     *            <li>MANUAL
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getHrvControlModeSet(String mode) {
        logger.debug("Creating command message HRV_CONTROL_MODE_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(HRV_CONTROL_MODE_SET);

        // Process 'Properties1'
        int varMode = Integer.MAX_VALUE;
        for (Integer entry : constantHrvControlModeSetMode.keySet()) {
            if (constantHrvControlModeSetMode.get(entry).equals(mode)) {
                varMode = entry;
                break;
            }
        }
        if (varMode == Integer.MAX_VALUE) {
            throw new IllegalArgumentException("Unknown constant value '" + mode + "' for mode");
        }
        outputData.write(varMode & 0x1F);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the HRV_CONTROL_MODE_SET command.
     * <p>
     * Hrv Control Mode Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>MODE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>OFF
     * <li>DEMAND_AUTOMATIC
     * <li>SCHEDULE
     * <li>ENERGY_SAVINGS_MODE
     * <li>MANUAL
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleHrvControlModeSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("MODE", constantHrvControlModeSetMode.get(payload[2] & 0x1F));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the HRV_CONTROL_MODE_GET command.
     * <p>
     * Hrv Control Mode Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getHrvControlModeGet() {
        logger.debug("Creating command message HRV_CONTROL_MODE_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(HRV_CONTROL_MODE_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the HRV_CONTROL_MODE_GET command.
     * <p>
     * Hrv Control Mode Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleHrvControlModeGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the HRV_CONTROL_MODE_REPORT command.
     * <p>
     * Hrv Control Mode Report
     *
     * @param mode {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>OFF
     *            <li>DEMAND_AUTOMATIC
     *            <li>SCHEDULE
     *            <li>ENERGY_SAVINGS_MODE
     *            <li>MANUAL
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getHrvControlModeReport(String mode) {
        logger.debug("Creating command message HRV_CONTROL_MODE_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(HRV_CONTROL_MODE_REPORT);

        // Process 'Properties1'
        int varMode = Integer.MAX_VALUE;
        for (Integer entry : constantHrvControlModeReportMode.keySet()) {
            if (constantHrvControlModeReportMode.get(entry).equals(mode)) {
                varMode = entry;
                break;
            }
        }
        if (varMode == Integer.MAX_VALUE) {
            throw new IllegalArgumentException("Unknown constant value '" + mode + "' for mode");
        }
        outputData.write(varMode & 0x1F);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the HRV_CONTROL_MODE_REPORT command.
     * <p>
     * Hrv Control Mode Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>MODE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>OFF
     * <li>DEMAND_AUTOMATIC
     * <li>SCHEDULE
     * <li>ENERGY_SAVINGS_MODE
     * <li>MANUAL
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleHrvControlModeReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("MODE", constantHrvControlModeReportMode.get(payload[2] & 0x1F));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the HRV_CONTROL_BYPASS_SET command.
     * <p>
     * Hrv Control Bypass Set
     *
     * @param bypass {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getHrvControlBypassSet(Integer bypass) {
        logger.debug("Creating command message HRV_CONTROL_BYPASS_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(HRV_CONTROL_BYPASS_SET);

        // Process 'Bypass'
        outputData.write(bypass);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the HRV_CONTROL_BYPASS_SET command.
     * <p>
     * Hrv Control Bypass Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>BYPASS {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleHrvControlBypassSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Bypass'
        response.put("BYPASS", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the HRV_CONTROL_BYPASS_GET command.
     * <p>
     * Hrv Control Bypass Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getHrvControlBypassGet() {
        logger.debug("Creating command message HRV_CONTROL_BYPASS_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(HRV_CONTROL_BYPASS_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the HRV_CONTROL_BYPASS_GET command.
     * <p>
     * Hrv Control Bypass Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleHrvControlBypassGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the HRV_CONTROL_BYPASS_REPORT command.
     * <p>
     * Hrv Control Bypass Report
     *
     * @param bypass {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getHrvControlBypassReport(Integer bypass) {
        logger.debug("Creating command message HRV_CONTROL_BYPASS_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(HRV_CONTROL_BYPASS_REPORT);

        // Process 'Bypass'
        outputData.write(bypass);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the HRV_CONTROL_BYPASS_REPORT command.
     * <p>
     * Hrv Control Bypass Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>BYPASS {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleHrvControlBypassReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Bypass'
        response.put("BYPASS", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the HRV_CONTROL_VENTILATION_RATE_SET command.
     * <p>
     * Hrv Control Ventilation Rate Set
     *
     * @param ventilationRate {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getHrvControlVentilationRateSet(Integer ventilationRate) {
        logger.debug("Creating command message HRV_CONTROL_VENTILATION_RATE_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(HRV_CONTROL_VENTILATION_RATE_SET);

        // Process 'Ventilation Rate'
        outputData.write(ventilationRate);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the HRV_CONTROL_VENTILATION_RATE_SET command.
     * <p>
     * Hrv Control Ventilation Rate Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>VENTILATION_RATE {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleHrvControlVentilationRateSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Ventilation Rate'
        response.put("VENTILATION_RATE", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the HRV_CONTROL_VENTILATION_RATE_GET command.
     * <p>
     * Hrv Control Ventilation Rate Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getHrvControlVentilationRateGet() {
        logger.debug("Creating command message HRV_CONTROL_VENTILATION_RATE_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(HRV_CONTROL_VENTILATION_RATE_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the HRV_CONTROL_VENTILATION_RATE_GET command.
     * <p>
     * Hrv Control Ventilation Rate Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleHrvControlVentilationRateGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the HRV_CONTROL_VENTILATION_RATE_REPORT command.
     * <p>
     * Hrv Control Ventilation Rate Report
     *
     * @param ventilationRate {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getHrvControlVentilationRateReport(Integer ventilationRate) {
        logger.debug("Creating command message HRV_CONTROL_VENTILATION_RATE_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(HRV_CONTROL_VENTILATION_RATE_REPORT);

        // Process 'Ventilation Rate'
        outputData.write(ventilationRate);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the HRV_CONTROL_VENTILATION_RATE_REPORT command.
     * <p>
     * Hrv Control Ventilation Rate Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>VENTILATION_RATE {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleHrvControlVentilationRateReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Ventilation Rate'
        response.put("VENTILATION_RATE", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the HRV_CONTROL_MODE_SUPPORTED_GET command.
     * <p>
     * Hrv Control Mode Supported Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getHrvControlModeSupportedGet() {
        logger.debug("Creating command message HRV_CONTROL_MODE_SUPPORTED_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(HRV_CONTROL_MODE_SUPPORTED_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the HRV_CONTROL_MODE_SUPPORTED_GET command.
     * <p>
     * Hrv Control Mode Supported Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleHrvControlModeSupportedGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the HRV_CONTROL_MODE_SUPPORTED_REPORT command.
     * <p>
     * Hrv Control Mode Supported Report
     *
     * @param manualControlSupported {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>BYPASS_OPEN_CLOSE
     *            <li>BYPASS_AUTO
     *            <li>MODULATED_BYPASS
     *            <li>VENTILATION_RATE
     *            </ul>
     * @param bitMask {@link List<String>}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>OFF
     *            <li>DEMAND_AUTOMATIC
     *            <li>SCHEDULE
     *            <li>ENERGY_SAVINGS_MODE
     *            <li>MANUAL
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getHrvControlModeSupportedReport(String manualControlSupported, List<String> bitMask) {
        logger.debug("Creating command message HRV_CONTROL_MODE_SUPPORTED_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(HRV_CONTROL_MODE_SUPPORTED_REPORT);

        // Process 'Properties1'
        int varManualControlSupported = Integer.MAX_VALUE;
        for (Integer entry : constantHrvControlModeSupportedReportManualControlSupported.keySet()) {
            if (constantHrvControlModeSupportedReportManualControlSupported.get(entry).equals(manualControlSupported)) {
                varManualControlSupported = entry;
                break;
            }
        }
        if (varManualControlSupported == Integer.MAX_VALUE) {
            throw new IllegalArgumentException("Unknown constant value '" + manualControlSupported + "' for manualControlSupported");
        }
        outputData.write(varManualControlSupported & 0x0F);

        // Process 'Bit Mask'
        int valBitMask = 0;
        for (String value : bitMask) {
            boolean foundBitMask = false;
            for (Integer entry : constantHrvControlModeSupportedReportBitMask.keySet()) {
                if (constantHrvControlModeSupportedReportBitMask.get(entry).equals(value)) {
                    foundBitMask = true;
                    valBitMask += entry;
                    break;
                }
            }
            if (!foundBitMask) {
                throw new IllegalArgumentException("Unknown constant value '" + bitMask + "' for bitMask");
            }
        }
        outputData.write(valBitMask);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the HRV_CONTROL_MODE_SUPPORTED_REPORT command.
     * <p>
     * Hrv Control Mode Supported Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>MANUAL_CONTROL_SUPPORTED {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>BYPASS_OPEN_CLOSE
     * <li>BYPASS_AUTO
     * <li>MODULATED_BYPASS
     * <li>VENTILATION_RATE
     * </ul>
     * <li>BIT_MASK {@link List}<{@link String}>
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>OFF
     * <li>DEMAND_AUTOMATIC
     * <li>SCHEDULE
     * <li>ENERGY_SAVINGS_MODE
     * <li>MANUAL
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleHrvControlModeSupportedReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("MANUAL_CONTROL_SUPPORTED", constantHrvControlModeSupportedReportManualControlSupported.get(payload[2] & 0x0F));

        // Process 'Bit Mask'
        List<String> responseBitMask = new ArrayList<String>();
        for (int cntBitMask = 0; cntBitMask < (payload.length - 3) * 8; cntBitMask++) {
            if ((payload[3 + (cntBitMask / 8)] & (1 << cntBitMask % 8)) == 0) {
                continue;
            }
            responseBitMask.add(constantHrvControlModeSupportedReportBitMask.get(cntBitMask));
        }
        response.put("BIT_MASK", responseBitMask);

        // Return the map of processed response data;
        return response;
    }
}
