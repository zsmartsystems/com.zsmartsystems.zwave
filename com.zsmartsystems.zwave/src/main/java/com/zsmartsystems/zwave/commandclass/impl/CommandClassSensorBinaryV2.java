/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_SENSOR_BINARY</b> version <b>2</b>.
 * <p>
 * Command Class Sensor Binary
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x30.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassSensorBinaryV2 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassSensorBinaryV2.class);

    /**
     * Integer command class key for COMMAND_CLASS_SENSOR_BINARY
     */
    public final static int COMMAND_CLASS_KEY = 0x30;

    /**
     * Sensor Binary Supported Get Sensor Command Constant
     */
    public final static int SENSOR_BINARY_SUPPORTED_GET_SENSOR = 0x01;
    /**
     * Sensor Binary Get Command Constant
     */
    public final static int SENSOR_BINARY_GET = 0x02;
    /**
     * Sensor Binary Report Command Constant
     */
    public final static int SENSOR_BINARY_REPORT = 0x03;
    /**
     * Sensor Binary Supported Sensor Report Command Constant
     */
    public final static int SENSOR_BINARY_SUPPORTED_SENSOR_REPORT = 0x04;

    /**
     * Map holding constants for SensorBinaryReportSensorType
     */
    private static Map<Integer, String> constantSensorBinaryReportSensorType = new HashMap<Integer, String>();

    /**
     * Map holding constants for SensorBinaryGetSensorType
     */
    private static Map<Integer, String> constantSensorBinaryGetSensorType = new HashMap<Integer, String>();

    /**
     * Map holding constants for SensorBinaryReportSensorValue
     */
    private static Map<Integer, String> constantSensorBinaryReportSensorValue = new HashMap<Integer, String>();

    /**
     * Map holding constants for SensorBinarySupportedSensorReportBitMask
     */
    private static Map<Integer, String> constantSensorBinarySupportedSensorReportBitMask = new HashMap<Integer, String>();

    static {
        // Constants for SensorBinaryReportSensorType
        constantSensorBinaryReportSensorType.put(0x01, "GENERAL");
        constantSensorBinaryReportSensorType.put(0x02, "SMOKE");
        constantSensorBinaryReportSensorType.put(0x03, "CO");
        constantSensorBinaryReportSensorType.put(0x04, "CO2");
        constantSensorBinaryReportSensorType.put(0x05, "HEAT");
        constantSensorBinaryReportSensorType.put(0x06, "WATER");
        constantSensorBinaryReportSensorType.put(0x07, "FREEZE");
        constantSensorBinaryReportSensorType.put(0x08, "TAMPER");
        constantSensorBinaryReportSensorType.put(0x09, "AUX");
        constantSensorBinaryReportSensorType.put(0x0A, "DOOR_WINDOW");
        constantSensorBinaryReportSensorType.put(0x0B, "TILT");
        constantSensorBinaryReportSensorType.put(0x0C, "MOTION");
        constantSensorBinaryReportSensorType.put(0x0D, "GLASS_BREAK");

        // Constants for SensorBinaryGetSensorType
        constantSensorBinaryGetSensorType.put(0x01, "GENERAL");
        constantSensorBinaryGetSensorType.put(0x02, "SMOKE");
        constantSensorBinaryGetSensorType.put(0x03, "CO");
        constantSensorBinaryGetSensorType.put(0x04, "CO2");
        constantSensorBinaryGetSensorType.put(0x05, "HEAT");
        constantSensorBinaryGetSensorType.put(0x06, "WATER");
        constantSensorBinaryGetSensorType.put(0x07, "FREEZE");
        constantSensorBinaryGetSensorType.put(0x08, "TAMPER");
        constantSensorBinaryGetSensorType.put(0x09, "AUX");
        constantSensorBinaryGetSensorType.put(0x0A, "DOOR_WINDOW");
        constantSensorBinaryGetSensorType.put(0x0B, "TILT");
        constantSensorBinaryGetSensorType.put(0x0C, "MOTION");
        constantSensorBinaryGetSensorType.put(0x0D, "GLASS_BREAK");

        // Constants for SensorBinaryReportSensorValue
        constantSensorBinaryReportSensorValue.put(0x00, "IDLE");
        constantSensorBinaryReportSensorValue.put(0xFF, "DETECTED_AN_EVENT");

        // Constants for SensorBinarySupportedSensorReportBitMask
        constantSensorBinarySupportedSensorReportBitMask.put(0x01, "GENERAL");
        constantSensorBinarySupportedSensorReportBitMask.put(0x02, "SMOKE");
        constantSensorBinarySupportedSensorReportBitMask.put(0x03, "CO");
        constantSensorBinarySupportedSensorReportBitMask.put(0x04, "CO2");
        constantSensorBinarySupportedSensorReportBitMask.put(0x05, "HEAT");
        constantSensorBinarySupportedSensorReportBitMask.put(0x06, "WATER");
        constantSensorBinarySupportedSensorReportBitMask.put(0x07, "FREEZE");
        constantSensorBinarySupportedSensorReportBitMask.put(0x08, "TAMPER");
        constantSensorBinarySupportedSensorReportBitMask.put(0x09, "AUX");
        constantSensorBinarySupportedSensorReportBitMask.put(0x0A, "DOOR_WINDOW");
        constantSensorBinarySupportedSensorReportBitMask.put(0x0B, "TILT");
        constantSensorBinarySupportedSensorReportBitMask.put(0x0C, "MOTION");
        constantSensorBinarySupportedSensorReportBitMask.put(0x0D, "GLASS_BREAK");
    }

    /**
     * Creates a new message with the SENSOR_BINARY_SUPPORTED_GET_SENSOR command.
     * <p>
     * Sensor Binary Supported Get Sensor
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSensorBinarySupportedGetSensor() {
        logger.debug("Creating command message SENSOR_BINARY_SUPPORTED_GET_SENSOR version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SENSOR_BINARY_SUPPORTED_GET_SENSOR);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SENSOR_BINARY_SUPPORTED_GET_SENSOR command.
     * <p>
     * Sensor Binary Supported Get Sensor
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSensorBinarySupportedGetSensor(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SENSOR_BINARY_GET command.
     * <p>
     * Sensor Binary Get
     *
     * @param sensorType {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>GENERAL
     *            <li>SMOKE
     *            <li>CO
     *            <li>CO2
     *            <li>HEAT
     *            <li>WATER
     *            <li>FREEZE
     *            <li>TAMPER
     *            <li>AUX
     *            <li>DOOR_WINDOW
     *            <li>TILT
     *            <li>MOTION
     *            <li>GLASS_BREAK
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSensorBinaryGet(String sensorType) {
        logger.debug("Creating command message SENSOR_BINARY_GET version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SENSOR_BINARY_GET);

        // Process 'Sensor Type'
        boolean foundSensorType = false;
        for (Integer entry : constantSensorBinaryGetSensorType.keySet()) {
            if (constantSensorBinaryGetSensorType.get(entry).equals(sensorType)) {
                outputData.write(entry);
                foundSensorType = true;
                break;
            }
        }
        if (!foundSensorType) {
            throw new IllegalArgumentException("Unknown constant value '" + sensorType + "' for sensorType");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SENSOR_BINARY_GET command.
     * <p>
     * Sensor Binary Get
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SENSOR_TYPE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>GENERAL
     * <li>SMOKE
     * <li>CO
     * <li>CO2
     * <li>HEAT
     * <li>WATER
     * <li>FREEZE
     * <li>TAMPER
     * <li>AUX
     * <li>DOOR_WINDOW
     * <li>TILT
     * <li>MOTION
     * <li>GLASS_BREAK
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSensorBinaryGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Sensor Type'
        response.put("SENSOR_TYPE", constantSensorBinaryGetSensorType.get(payload[2] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SENSOR_BINARY_REPORT command.
     * <p>
     * Sensor Binary Report
     *
     * @param sensorValue {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>IDLE
     *            <li>DETECTED_AN_EVENT
     *            </ul>
     * @param sensorType {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>GENERAL
     *            <li>SMOKE
     *            <li>CO
     *            <li>CO2
     *            <li>HEAT
     *            <li>WATER
     *            <li>FREEZE
     *            <li>TAMPER
     *            <li>AUX
     *            <li>DOOR_WINDOW
     *            <li>TILT
     *            <li>MOTION
     *            <li>GLASS_BREAK
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSensorBinaryReport(String sensorValue, String sensorType) {
        logger.debug("Creating command message SENSOR_BINARY_REPORT version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SENSOR_BINARY_REPORT);

        // Process 'Sensor Value'
        boolean foundSensorValue = false;
        for (Integer entry : constantSensorBinaryReportSensorValue.keySet()) {
            if (constantSensorBinaryReportSensorValue.get(entry).equals(sensorValue)) {
                outputData.write(entry);
                foundSensorValue = true;
                break;
            }
        }
        if (!foundSensorValue) {
            throw new IllegalArgumentException("Unknown constant value '" + sensorValue + "' for sensorValue");
        }

        // Process 'Sensor Type'
        boolean foundSensorType = false;
        for (Integer entry : constantSensorBinaryReportSensorType.keySet()) {
            if (constantSensorBinaryReportSensorType.get(entry).equals(sensorType)) {
                outputData.write(entry);
                foundSensorType = true;
                break;
            }
        }
        if (!foundSensorType) {
            throw new IllegalArgumentException("Unknown constant value '" + sensorType + "' for sensorType");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SENSOR_BINARY_REPORT command.
     * <p>
     * Sensor Binary Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SENSOR_VALUE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>IDLE
     * <li>DETECTED_AN_EVENT
     * </ul>
     * <li>SENSOR_TYPE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>GENERAL
     * <li>SMOKE
     * <li>CO
     * <li>CO2
     * <li>HEAT
     * <li>WATER
     * <li>FREEZE
     * <li>TAMPER
     * <li>AUX
     * <li>DOOR_WINDOW
     * <li>TILT
     * <li>MOTION
     * <li>GLASS_BREAK
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSensorBinaryReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Sensor Value'
        response.put("SENSOR_VALUE", constantSensorBinaryReportSensorValue.get(payload[2] & 0xff));

        // Process 'Sensor Type'
        response.put("SENSOR_TYPE", constantSensorBinaryReportSensorType.get(payload[3] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SENSOR_BINARY_SUPPORTED_SENSOR_REPORT command.
     * <p>
     * Sensor Binary Supported Sensor Report
     *
     * @param bitMask {@link List<String>}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>GENERAL
     *            <li>SMOKE
     *            <li>CO
     *            <li>CO2
     *            <li>HEAT
     *            <li>WATER
     *            <li>FREEZE
     *            <li>TAMPER
     *            <li>AUX
     *            <li>DOOR_WINDOW
     *            <li>TILT
     *            <li>MOTION
     *            <li>GLASS_BREAK
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSensorBinarySupportedSensorReport(List<String> bitMask) {
        logger.debug("Creating command message SENSOR_BINARY_SUPPORTED_SENSOR_REPORT version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SENSOR_BINARY_SUPPORTED_SENSOR_REPORT);

        // Process 'Bit Mask'
        int valBitMask = 0;
        for (String value : bitMask) {
            boolean foundBitMask = false;
            for (Integer entry : constantSensorBinarySupportedSensorReportBitMask.keySet()) {
                if (constantSensorBinarySupportedSensorReportBitMask.get(entry).equals(value)) {
                    foundBitMask = true;
                    valBitMask += entry;
                    break;
                }
            }
            if (!foundBitMask) {
                throw new IllegalArgumentException("Unknown constant value '" + bitMask + "' for bitMask");
            }
        }
        outputData.write(valBitMask);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SENSOR_BINARY_SUPPORTED_SENSOR_REPORT command.
     * <p>
     * Sensor Binary Supported Sensor Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>BIT_MASK {@link List}<{@link String}>
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>GENERAL
     * <li>SMOKE
     * <li>CO
     * <li>CO2
     * <li>HEAT
     * <li>WATER
     * <li>FREEZE
     * <li>TAMPER
     * <li>AUX
     * <li>DOOR_WINDOW
     * <li>TILT
     * <li>MOTION
     * <li>GLASS_BREAK
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSensorBinarySupportedSensorReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Bit Mask'
        List<String> responseBitMask = new ArrayList<String>();
        for (int cntBitMask = 0; cntBitMask < (payload.length - 2) * 8; cntBitMask++) {
            if ((payload[2 + (cntBitMask / 8)] & (1 << cntBitMask % 8)) == 0) {
                continue;
            }
            responseBitMask.add(constantSensorBinarySupportedSensorReportBitMask.get(cntBitMask));
        }
        response.put("BIT_MASK", responseBitMask);

        // Return the map of processed response data;
        return response;
    }
}
