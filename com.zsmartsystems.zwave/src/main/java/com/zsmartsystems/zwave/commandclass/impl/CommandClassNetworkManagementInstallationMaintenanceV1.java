/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_NETWORK_MANAGEMENT_INSTALLATION_MAINTENANCE</b> version <b>1</b>.
 * <p>
 * Command Class Network Management Installation and Maintenance
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x67.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassNetworkManagementInstallationMaintenanceV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassNetworkManagementInstallationMaintenanceV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_NETWORK_MANAGEMENT_INSTALLATION_MAINTENANCE
     */
    public final static int COMMAND_CLASS_KEY = 0x67;

    /**
     * Last Working Route Set Command Constant
     */
    public final static int LAST_WORKING_ROUTE_SET = 0x01;
    /**
     * Last Working Route Get Command Constant
     */
    public final static int LAST_WORKING_ROUTE_GET = 0x02;
    /**
     * Last Working Route Report Command Constant
     */
    public final static int LAST_WORKING_ROUTE_REPORT = 0x03;
    /**
     * Statistics Get Command Constant
     */
    public final static int STATISTICS_GET = 0x04;
    /**
     * Statistics Report Command Constant
     */
    public final static int STATISTICS_REPORT = 0x05;
    /**
     * Statistics Clear Command Constant
     */
    public final static int STATISTICS_CLEAR = 0x06;

    /**
     * Map holding constants for LastWorkingRouteSetSpeed
     */
    private static Map<Integer, String> constantLastWorkingRouteSetSpeed = new HashMap<Integer, String>();

    /**
     * Map holding constants for StatisticsReportType
     */
    private static Map<Integer, String> constantStatisticsReportType = new HashMap<Integer, String>();

    /**
     * Map holding constants for LastWorkingRouteReportSpeed
     */
    private static Map<Integer, String> constantLastWorkingRouteReportSpeed = new HashMap<Integer, String>();

    static {
        // Constants for LastWorkingRouteSetSpeed
        constantLastWorkingRouteSetSpeed.put(0x01, "9_6_KBIT_SEC");
        constantLastWorkingRouteSetSpeed.put(0x02, "40_KBIT_SEC");
        constantLastWorkingRouteSetSpeed.put(0x03, "100_KBIT_SEC");

        // Constants for StatisticsReportType
        constantStatisticsReportType.put(0x00, "ROUTE_CHANGES");
        constantStatisticsReportType.put(0x01, "TRANSMISSION_COUNT");
        constantStatisticsReportType.put(0x02, "NEIGHBORS");
        constantStatisticsReportType.put(0x03, "PACKET_ERROR_COUNT");
        constantStatisticsReportType.put(0x04, "SUM_OF_TRANSMISSION_TIMES");
        constantStatisticsReportType.put(0x05, "SUM_OF_TRANSMISSION_TIMES_SQURARED");

        // Constants for LastWorkingRouteReportSpeed
        constantLastWorkingRouteReportSpeed.put(0x01, "9_6_KBIT_SEC");
        constantLastWorkingRouteReportSpeed.put(0x02, "40_KBIT_SEC");
        constantLastWorkingRouteReportSpeed.put(0x03, "100_KBIT_SEC");
    }

    /**
     * Creates a new message with the LAST_WORKING_ROUTE_SET command.
     * <p>
     * Last Working Route Set
     *
     * @param nodeid {@link Integer}
     * @param repeater1 {@link Integer}
     * @param repeater2 {@link Integer}
     * @param repeater3 {@link Integer}
     * @param repeater4 {@link Integer}
     * @param speed {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>9_6_KBIT_SEC
     *            <li>40_KBIT_SEC
     *            <li>100_KBIT_SEC
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getLastWorkingRouteSet(Integer nodeid, Integer repeater1, Integer repeater2, Integer repeater3,
            Integer repeater4, String speed) {
        logger.debug("Creating command message LAST_WORKING_ROUTE_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(LAST_WORKING_ROUTE_SET);

        // Process 'NodeID'
        // Check the node number boundary
        if (nodeid < 1 || nodeid > 232) {
            logger.debug("Node number is out of bounds {}", nodeid);
            return null;
        }
        outputData.write(nodeid);

        // Process 'Repeater 1'
        // Check the node number boundary
        if (repeater1 < 1 || repeater1 > 232) {
            logger.debug("Node number is out of bounds {}", repeater1);
            return null;
        }
        outputData.write(repeater1);

        // Process 'Repeater 2'
        // Check the node number boundary
        if (repeater2 < 1 || repeater2 > 232) {
            logger.debug("Node number is out of bounds {}", repeater2);
            return null;
        }
        outputData.write(repeater2);

        // Process 'Repeater 3'
        // Check the node number boundary
        if (repeater3 < 1 || repeater3 > 232) {
            logger.debug("Node number is out of bounds {}", repeater3);
            return null;
        }
        outputData.write(repeater3);

        // Process 'Repeater 4'
        // Check the node number boundary
        if (repeater4 < 1 || repeater4 > 232) {
            logger.debug("Node number is out of bounds {}", repeater4);
            return null;
        }
        outputData.write(repeater4);

        // Process 'Speed'
        boolean foundSpeed = false;
        for (Integer entry : constantLastWorkingRouteSetSpeed.keySet()) {
            if (constantLastWorkingRouteSetSpeed.get(entry).equals(speed)) {
                outputData.write(entry);
                foundSpeed = true;
                break;
            }
        }
        if (!foundSpeed) {
            throw new IllegalArgumentException("Unknown constant value '" + speed + "' for speed");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the LAST_WORKING_ROUTE_SET command.
     * <p>
     * Last Working Route Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>NODEID {@link Integer}
     * <li>REPEATER_1 {@link Integer}
     * <li>REPEATER_2 {@link Integer}
     * <li>REPEATER_3 {@link Integer}
     * <li>REPEATER_4 {@link Integer}
     * <li>SPEED {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>9_6_KBIT_SEC
     * <li>40_KBIT_SEC
     * <li>100_KBIT_SEC
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleLastWorkingRouteSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'NodeID'
        response.put("NODEID", Integer.valueOf(payload[2]));

        // Process 'Repeater 1'
        response.put("REPEATER_1", Integer.valueOf(payload[3]));

        // Process 'Repeater 2'
        response.put("REPEATER_2", Integer.valueOf(payload[4]));

        // Process 'Repeater 3'
        response.put("REPEATER_3", Integer.valueOf(payload[5]));

        // Process 'Repeater 4'
        response.put("REPEATER_4", Integer.valueOf(payload[6]));

        // Process 'Speed'
        response.put("SPEED", constantLastWorkingRouteSetSpeed.get(payload[7] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the LAST_WORKING_ROUTE_GET command.
     * <p>
     * Last Working Route Get
     *
     * @param nodeid {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getLastWorkingRouteGet(Integer nodeid) {
        logger.debug("Creating command message LAST_WORKING_ROUTE_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(LAST_WORKING_ROUTE_GET);

        // Process 'NodeID'
        // Check the node number boundary
        if (nodeid < 1 || nodeid > 232) {
            logger.debug("Node number is out of bounds {}", nodeid);
            return null;
        }
        outputData.write(nodeid);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the LAST_WORKING_ROUTE_GET command.
     * <p>
     * Last Working Route Get
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>NODEID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleLastWorkingRouteGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'NodeID'
        response.put("NODEID", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the LAST_WORKING_ROUTE_REPORT command.
     * <p>
     * Last Working Route Report
     *
     * @param nodeid {@link Integer}
     * @param repeater1 {@link Integer}
     * @param repeater2 {@link Integer}
     * @param repeater3 {@link Integer}
     * @param repeater4 {@link Integer}
     * @param speed {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>9_6_KBIT_SEC
     *            <li>40_KBIT_SEC
     *            <li>100_KBIT_SEC
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getLastWorkingRouteReport(Integer nodeid, Integer repeater1, Integer repeater2,
            Integer repeater3, Integer repeater4, String speed) {
        logger.debug("Creating command message LAST_WORKING_ROUTE_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(LAST_WORKING_ROUTE_REPORT);

        // Process 'NodeID'
        // Check the node number boundary
        if (nodeid < 1 || nodeid > 232) {
            logger.debug("Node number is out of bounds {}", nodeid);
            return null;
        }
        outputData.write(nodeid);

        // Process 'Repeater 1'
        // Check the node number boundary
        if (repeater1 < 1 || repeater1 > 232) {
            logger.debug("Node number is out of bounds {}", repeater1);
            return null;
        }
        outputData.write(repeater1);

        // Process 'Repeater 2'
        // Check the node number boundary
        if (repeater2 < 1 || repeater2 > 232) {
            logger.debug("Node number is out of bounds {}", repeater2);
            return null;
        }
        outputData.write(repeater2);

        // Process 'Repeater 3'
        // Check the node number boundary
        if (repeater3 < 1 || repeater3 > 232) {
            logger.debug("Node number is out of bounds {}", repeater3);
            return null;
        }
        outputData.write(repeater3);

        // Process 'Repeater 4'
        // Check the node number boundary
        if (repeater4 < 1 || repeater4 > 232) {
            logger.debug("Node number is out of bounds {}", repeater4);
            return null;
        }
        outputData.write(repeater4);

        // Process 'Speed'
        boolean foundSpeed = false;
        for (Integer entry : constantLastWorkingRouteReportSpeed.keySet()) {
            if (constantLastWorkingRouteReportSpeed.get(entry).equals(speed)) {
                outputData.write(entry);
                foundSpeed = true;
                break;
            }
        }
        if (!foundSpeed) {
            throw new IllegalArgumentException("Unknown constant value '" + speed + "' for speed");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the LAST_WORKING_ROUTE_REPORT command.
     * <p>
     * Last Working Route Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>NODEID {@link Integer}
     * <li>REPEATER_1 {@link Integer}
     * <li>REPEATER_2 {@link Integer}
     * <li>REPEATER_3 {@link Integer}
     * <li>REPEATER_4 {@link Integer}
     * <li>SPEED {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>9_6_KBIT_SEC
     * <li>40_KBIT_SEC
     * <li>100_KBIT_SEC
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleLastWorkingRouteReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'NodeID'
        response.put("NODEID", Integer.valueOf(payload[2]));

        // Process 'Repeater 1'
        response.put("REPEATER_1", Integer.valueOf(payload[3]));

        // Process 'Repeater 2'
        response.put("REPEATER_2", Integer.valueOf(payload[4]));

        // Process 'Repeater 3'
        response.put("REPEATER_3", Integer.valueOf(payload[5]));

        // Process 'Repeater 4'
        response.put("REPEATER_4", Integer.valueOf(payload[6]));

        // Process 'Speed'
        response.put("SPEED", constantLastWorkingRouteReportSpeed.get(payload[7] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the STATISTICS_GET command.
     * <p>
     * Statistics Get
     *
     * @param nodeid {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getStatisticsGet(Integer nodeid) {
        logger.debug("Creating command message STATISTICS_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(STATISTICS_GET);

        // Process 'NodeID'
        // Check the node number boundary
        if (nodeid < 1 || nodeid > 232) {
            logger.debug("Node number is out of bounds {}", nodeid);
            return null;
        }
        outputData.write(nodeid);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the STATISTICS_GET command.
     * <p>
     * Statistics Get
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>NODEID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleStatisticsGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'NodeID'
        response.put("NODEID", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the STATISTICS_REPORT command.
     * <p>
     * Statistics Report
     *
     * @param nodeid {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getStatisticsReport(Integer nodeid) {
        logger.debug("Creating command message STATISTICS_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(STATISTICS_REPORT);

        // Process 'NodeID'
        // Check the node number boundary
        if (nodeid < 1 || nodeid > 232) {
            logger.debug("Node number is out of bounds {}", nodeid);
            return null;
        }
        outputData.write(nodeid);

        // Process 'Statistics'

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the STATISTICS_REPORT command.
     * <p>
     * Statistics Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>NODEID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleStatisticsReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'NodeID'
        response.put("NODEID", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Statistics'

        // Create a list to hold the group Statistics
        List<Map<String, Object>> variantList = new ArrayList<Map<String, Object>>();

        int offset = msgOffset;
        while (offset < payload.length) {
            // Create a map to hold the members of this variant
            Map<String, Object> variant = new HashMap<String, Object>();

            // Process 'Type'
            variant.put("TYPE", constantStatisticsReportType.get(payload[msgOffset] & 0xff));
            msgOffset += 1;

            // Process 'Length'
            variant.put("LENGTH", Integer.valueOf(payload[msgOffset]));
            msgOffset += 1;

            // Process 'Value'
            ByteArrayOutputStream valValue = new ByteArrayOutputStream();
            int lenValue = payload[msgOffset - 1];
            for (int cntValue = 0; cntValue < lenValue; cntValue++) {
                valValue.write(payload[msgOffset + cntValue]);
            }
            variant.put("VALUE", valValue.toByteArray());
            msgOffset += lenValue;

        }

        // Add the variant list to the response
        response.put("STATISTICS", variantList);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the STATISTICS_CLEAR command.
     * <p>
     * Statistics Clear
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getStatisticsClear() {
        logger.debug("Creating command message STATISTICS_CLEAR version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(STATISTICS_CLEAR);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the STATISTICS_CLEAR command.
     * <p>
     * Statistics Clear
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleStatisticsClear(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }
}
