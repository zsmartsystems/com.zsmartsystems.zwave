/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_THERMOSTAT_SETPOINT</b> version <b>2</b>.
 * <p>
 * Command Class Thermostat Setpoint
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x43.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassThermostatSetpointV2 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassThermostatSetpointV2.class);

    /**
     * Integer command class key for COMMAND_CLASS_THERMOSTAT_SETPOINT
     */
    public final static int COMMAND_CLASS_KEY = 0x43;

    /**
     * Thermostat Setpoint Set Command Constant
     */
    public final static int THERMOSTAT_SETPOINT_SET = 0x01;
    /**
     * Thermostat Setpoint Get Command Constant
     */
    public final static int THERMOSTAT_SETPOINT_GET = 0x02;
    /**
     * Thermostat Setpoint Report Command Constant
     */
    public final static int THERMOSTAT_SETPOINT_REPORT = 0x03;
    /**
     * Thermostat Setpoint Supported Get Command Constant
     */
    public final static int THERMOSTAT_SETPOINT_SUPPORTED_GET = 0x04;
    /**
     * Thermostat Setpoint Supported Report Command Constant
     */
    public final static int THERMOSTAT_SETPOINT_SUPPORTED_REPORT = 0x05;

    /**
     * Map holding constants for ThermostatSetpointSetSetpointType
     */
    private static Map<Integer, String> constantThermostatSetpointSetSetpointType = new HashMap<Integer, String>();

    /**
     * Map holding constants for ThermostatSetpointSupportedReportBitMask
     */
    private static Map<Integer, String> constantThermostatSetpointSupportedReportBitMask = new HashMap<Integer, String>();

    /**
     * Map holding constants for ThermostatSetpointReportSetpointType
     */
    private static Map<Integer, String> constantThermostatSetpointReportSetpointType = new HashMap<Integer, String>();

    /**
     * Map holding constants for ThermostatSetpointGetSetpointType
     */
    private static Map<Integer, String> constantThermostatSetpointGetSetpointType = new HashMap<Integer, String>();

    static {
        // Constants for ThermostatSetpointSetSetpointType
        constantThermostatSetpointSetSetpointType.put(0x00, "NOT_SUPPORTED");
        constantThermostatSetpointSetSetpointType.put(0x01, "HEATING_1");
        constantThermostatSetpointSetSetpointType.put(0x02, "COOLING_1");
        constantThermostatSetpointSetSetpointType.put(0x03, "NOT_SUPPORTED1");
        constantThermostatSetpointSetSetpointType.put(0x04, "NOT_SUPPORTED2");
        constantThermostatSetpointSetSetpointType.put(0x05, "NOT_SUPPORTED3");
        constantThermostatSetpointSetSetpointType.put(0x06, "NOT_SUPPORTED4");
        constantThermostatSetpointSetSetpointType.put(0x07, "FURNACE");
        constantThermostatSetpointSetSetpointType.put(0x08, "DRY_AIR");
        constantThermostatSetpointSetSetpointType.put(0x09, "MOIST_AIR");
        constantThermostatSetpointSetSetpointType.put(0x0A, "AUTO_CHANGEOVER");
        constantThermostatSetpointSetSetpointType.put(0x0B, "ENERGY_SAVE_HEATING");
        constantThermostatSetpointSetSetpointType.put(0x0C, "ENERGY_SAVE_COOLING");
        constantThermostatSetpointSetSetpointType.put(0x0D, "AWAY_HEATING");

        // Constants for ThermostatSetpointSupportedReportBitMask
        constantThermostatSetpointSupportedReportBitMask.put(0x00, "NONE");
        constantThermostatSetpointSupportedReportBitMask.put(0x01, "HEATING");
        constantThermostatSetpointSupportedReportBitMask.put(0x02, "COOLING");
        constantThermostatSetpointSupportedReportBitMask.put(0x07, "FURNACE");
        constantThermostatSetpointSupportedReportBitMask.put(0x08, "DRY_AIR");
        constantThermostatSetpointSupportedReportBitMask.put(0x09, "MOIST_AIR");
        constantThermostatSetpointSupportedReportBitMask.put(0x0A, "AUTO_CHANGEOVER");
        constantThermostatSetpointSupportedReportBitMask.put(0x0B, "ENERGY_SAVE_HEATING");
        constantThermostatSetpointSupportedReportBitMask.put(0x0C, "ENERGY_SAVE_COOLING");
        constantThermostatSetpointSupportedReportBitMask.put(0x0D, "AWAY_HEATING");

        // Constants for ThermostatSetpointReportSetpointType
        constantThermostatSetpointReportSetpointType.put(0x00, "NOT_SUPPORTED");
        constantThermostatSetpointReportSetpointType.put(0x01, "HEATING_1");
        constantThermostatSetpointReportSetpointType.put(0x02, "COOLING_1");
        constantThermostatSetpointReportSetpointType.put(0x03, "NOT_SUPPORTED1");
        constantThermostatSetpointReportSetpointType.put(0x04, "NOT_SUPPORTED2");
        constantThermostatSetpointReportSetpointType.put(0x05, "NOT_SUPPORTED3");
        constantThermostatSetpointReportSetpointType.put(0x06, "NOT_SUPPORTED4");
        constantThermostatSetpointReportSetpointType.put(0x07, "FURNACE");
        constantThermostatSetpointReportSetpointType.put(0x08, "DRY_AIR");
        constantThermostatSetpointReportSetpointType.put(0x09, "MOIST_AIR");
        constantThermostatSetpointReportSetpointType.put(0x0A, "AUTO_CHANGEOVER");
        constantThermostatSetpointReportSetpointType.put(0x0B, "ENERGY_SAVE_HEATING");
        constantThermostatSetpointReportSetpointType.put(0x0C, "ENERGY_SAVE_COOLING");
        constantThermostatSetpointReportSetpointType.put(0x0D, "AWAY_HEATING");

        // Constants for ThermostatSetpointGetSetpointType
        constantThermostatSetpointGetSetpointType.put(0x00, "NOT_SUPPORTED");
        constantThermostatSetpointGetSetpointType.put(0x01, "HEATING_1");
        constantThermostatSetpointGetSetpointType.put(0x02, "COOLING_1");
        constantThermostatSetpointGetSetpointType.put(0x03, "NOT_SUPPORTED1");
        constantThermostatSetpointGetSetpointType.put(0x04, "NOT_SUPPORTED2");
        constantThermostatSetpointGetSetpointType.put(0x05, "NOT_SUPPORTED3");
        constantThermostatSetpointGetSetpointType.put(0x06, "NOT_SUPPORTED4");
        constantThermostatSetpointGetSetpointType.put(0x07, "FURNACE");
        constantThermostatSetpointGetSetpointType.put(0x08, "DRY_AIR");
        constantThermostatSetpointGetSetpointType.put(0x09, "MOIST_AIR");
        constantThermostatSetpointGetSetpointType.put(0x0A, "AUTO_CHANGEOVER");
        constantThermostatSetpointGetSetpointType.put(0x0B, "ENERGY_SAVE_HEATING");
        constantThermostatSetpointGetSetpointType.put(0x0C, "ENERGY_SAVE_COOLING");
        constantThermostatSetpointGetSetpointType.put(0x0D, "AWAY_HEATING");
    }

    /**
     * Creates a new message with the THERMOSTAT_SETPOINT_SET command.
     * <p>
     * Thermostat Setpoint Set
     *
     * @param setpointType {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>NOT_SUPPORTED
     *            <li>HEATING_1
     *            <li>COOLING_1
     *            <li>NOT_SUPPORTED1
     *            <li>NOT_SUPPORTED2
     *            <li>NOT_SUPPORTED3
     *            <li>NOT_SUPPORTED4
     *            <li>FURNACE
     *            <li>DRY_AIR
     *            <li>MOIST_AIR
     *            <li>AUTO_CHANGEOVER
     *            <li>ENERGY_SAVE_HEATING
     *            <li>ENERGY_SAVE_COOLING
     *            <li>AWAY_HEATING
     *            </ul>
     * @param scale {@link Integer}
     * @param precision {@link Integer}
     * @param value {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getThermostatSetpointSet(String setpointType, Integer scale, Integer precision, byte[] value) {
        logger.debug("Creating command message THERMOSTAT_SETPOINT_SET version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(THERMOSTAT_SETPOINT_SET);

        // Process 'Level'
        int varSetpointType = Integer.MAX_VALUE;
        for (Integer entry : constantThermostatSetpointSetSetpointType.keySet()) {
            if (constantThermostatSetpointSetSetpointType.get(entry).equals(setpointType)) {
                varSetpointType = entry;
                break;
            }
        }
        if (varSetpointType == Integer.MAX_VALUE) {
            throw new IllegalArgumentException("Unknown constant value '" + setpointType + "' for setpointType");
        }
        outputData.write(varSetpointType & 0x0F);

        // Process 'Level2'
        // Size is used by 'Value'
        int size = value.length;
        int valLevel2 = 0;
        valLevel2 |= size & 0x07;
        valLevel2 |= ((scale << 3) & 0x18);
        valLevel2 |= ((precision << 5) & 0xE0);
        outputData.write(valLevel2);

        // Process 'Value'
        if (value != null) {
            try {
                outputData.write(value);
            } catch (IOException e) {
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the THERMOSTAT_SETPOINT_SET command.
     * <p>
     * Thermostat Setpoint Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SETPOINT_TYPE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>NOT_SUPPORTED
     * <li>HEATING_1
     * <li>COOLING_1
     * <li>NOT_SUPPORTED1
     * <li>NOT_SUPPORTED2
     * <li>NOT_SUPPORTED3
     * <li>NOT_SUPPORTED4
     * <li>FURNACE
     * <li>DRY_AIR
     * <li>MOIST_AIR
     * <li>AUTO_CHANGEOVER
     * <li>ENERGY_SAVE_HEATING
     * <li>ENERGY_SAVE_COOLING
     * <li>AWAY_HEATING
     * </ul>
     * <li>SCALE {@link Integer}
     * <li>PRECISION {@link Integer}
     * <li>VALUE {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleThermostatSetpointSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Level'
        response.put("SETPOINT_TYPE", constantThermostatSetpointSetSetpointType.get(payload[msgOffset] & 0x0F));
        msgOffset += 1;

        // Process 'Level2'
        // Size is used by 'Value'
        int varSize = payload[msgOffset] & 0x07;
        response.put("SCALE", Integer.valueOf(payload[msgOffset] & 0x18 >> 3));
        response.put("PRECISION", Integer.valueOf(payload[msgOffset] & 0xE0 >> 5));
        msgOffset += 1;

        // Process 'Value'
        ByteArrayOutputStream valValue = new ByteArrayOutputStream();
        for (int cntValue = 0; cntValue < varSize; cntValue++) {
            valValue.write(payload[msgOffset + cntValue]);
        }
        response.put("VALUE", valValue.toByteArray());
        msgOffset += varSize;

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the THERMOSTAT_SETPOINT_GET command.
     * <p>
     * Thermostat Setpoint Get
     *
     * @param setpointType {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>NOT_SUPPORTED
     *            <li>HEATING_1
     *            <li>COOLING_1
     *            <li>NOT_SUPPORTED1
     *            <li>NOT_SUPPORTED2
     *            <li>NOT_SUPPORTED3
     *            <li>NOT_SUPPORTED4
     *            <li>FURNACE
     *            <li>DRY_AIR
     *            <li>MOIST_AIR
     *            <li>AUTO_CHANGEOVER
     *            <li>ENERGY_SAVE_HEATING
     *            <li>ENERGY_SAVE_COOLING
     *            <li>AWAY_HEATING
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getThermostatSetpointGet(String setpointType) {
        logger.debug("Creating command message THERMOSTAT_SETPOINT_GET version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(THERMOSTAT_SETPOINT_GET);

        // Process 'Level'
        int varSetpointType = Integer.MAX_VALUE;
        for (Integer entry : constantThermostatSetpointGetSetpointType.keySet()) {
            if (constantThermostatSetpointGetSetpointType.get(entry).equals(setpointType)) {
                varSetpointType = entry;
                break;
            }
        }
        if (varSetpointType == Integer.MAX_VALUE) {
            throw new IllegalArgumentException("Unknown constant value '" + setpointType + "' for setpointType");
        }
        outputData.write(varSetpointType & 0x0F);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the THERMOSTAT_SETPOINT_GET command.
     * <p>
     * Thermostat Setpoint Get
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SETPOINT_TYPE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>NOT_SUPPORTED
     * <li>HEATING_1
     * <li>COOLING_1
     * <li>NOT_SUPPORTED1
     * <li>NOT_SUPPORTED2
     * <li>NOT_SUPPORTED3
     * <li>NOT_SUPPORTED4
     * <li>FURNACE
     * <li>DRY_AIR
     * <li>MOIST_AIR
     * <li>AUTO_CHANGEOVER
     * <li>ENERGY_SAVE_HEATING
     * <li>ENERGY_SAVE_COOLING
     * <li>AWAY_HEATING
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleThermostatSetpointGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Level'
        response.put("SETPOINT_TYPE", constantThermostatSetpointGetSetpointType.get(payload[2] & 0x0F));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the THERMOSTAT_SETPOINT_REPORT command.
     * <p>
     * Thermostat Setpoint Report
     *
     * @param setpointType {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>NOT_SUPPORTED
     *            <li>HEATING_1
     *            <li>COOLING_1
     *            <li>NOT_SUPPORTED1
     *            <li>NOT_SUPPORTED2
     *            <li>NOT_SUPPORTED3
     *            <li>NOT_SUPPORTED4
     *            <li>FURNACE
     *            <li>DRY_AIR
     *            <li>MOIST_AIR
     *            <li>AUTO_CHANGEOVER
     *            <li>ENERGY_SAVE_HEATING
     *            <li>ENERGY_SAVE_COOLING
     *            <li>AWAY_HEATING
     *            </ul>
     * @param scale {@link Integer}
     * @param precision {@link Integer}
     * @param value {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getThermostatSetpointReport(String setpointType, Integer scale, Integer precision, byte[] value) {
        logger.debug("Creating command message THERMOSTAT_SETPOINT_REPORT version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(THERMOSTAT_SETPOINT_REPORT);

        // Process 'Level'
        int varSetpointType = Integer.MAX_VALUE;
        for (Integer entry : constantThermostatSetpointReportSetpointType.keySet()) {
            if (constantThermostatSetpointReportSetpointType.get(entry).equals(setpointType)) {
                varSetpointType = entry;
                break;
            }
        }
        if (varSetpointType == Integer.MAX_VALUE) {
            throw new IllegalArgumentException("Unknown constant value '" + setpointType + "' for setpointType");
        }
        outputData.write(varSetpointType & 0x0F);

        // Process 'Level2'
        // Size is used by 'Value'
        int size = value.length;
        int valLevel2 = 0;
        valLevel2 |= size & 0x07;
        valLevel2 |= ((scale << 3) & 0x18);
        valLevel2 |= ((precision << 5) & 0xE0);
        outputData.write(valLevel2);

        // Process 'Value'
        if (value != null) {
            try {
                outputData.write(value);
            } catch (IOException e) {
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the THERMOSTAT_SETPOINT_REPORT command.
     * <p>
     * Thermostat Setpoint Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SETPOINT_TYPE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>NOT_SUPPORTED
     * <li>HEATING_1
     * <li>COOLING_1
     * <li>NOT_SUPPORTED1
     * <li>NOT_SUPPORTED2
     * <li>NOT_SUPPORTED3
     * <li>NOT_SUPPORTED4
     * <li>FURNACE
     * <li>DRY_AIR
     * <li>MOIST_AIR
     * <li>AUTO_CHANGEOVER
     * <li>ENERGY_SAVE_HEATING
     * <li>ENERGY_SAVE_COOLING
     * <li>AWAY_HEATING
     * </ul>
     * <li>SCALE {@link Integer}
     * <li>PRECISION {@link Integer}
     * <li>VALUE {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleThermostatSetpointReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Level'
        response.put("SETPOINT_TYPE", constantThermostatSetpointReportSetpointType.get(payload[msgOffset] & 0x0F));
        msgOffset += 1;

        // Process 'Level2'
        // Size is used by 'Value'
        int varSize = payload[msgOffset] & 0x07;
        response.put("SCALE", Integer.valueOf(payload[msgOffset] & 0x18 >> 3));
        response.put("PRECISION", Integer.valueOf(payload[msgOffset] & 0xE0 >> 5));
        msgOffset += 1;

        // Process 'Value'
        ByteArrayOutputStream valValue = new ByteArrayOutputStream();
        for (int cntValue = 0; cntValue < varSize; cntValue++) {
            valValue.write(payload[msgOffset + cntValue]);
        }
        response.put("VALUE", valValue.toByteArray());
        msgOffset += varSize;

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the THERMOSTAT_SETPOINT_SUPPORTED_GET command.
     * <p>
     * Thermostat Setpoint Supported Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getThermostatSetpointSupportedGet() {
        logger.debug("Creating command message THERMOSTAT_SETPOINT_SUPPORTED_GET version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(THERMOSTAT_SETPOINT_SUPPORTED_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the THERMOSTAT_SETPOINT_SUPPORTED_GET command.
     * <p>
     * Thermostat Setpoint Supported Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleThermostatSetpointSupportedGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the THERMOSTAT_SETPOINT_SUPPORTED_REPORT command.
     * <p>
     * Thermostat Setpoint Supported Report
     *
     * @param bitMask {@link List<String>}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>NONE
     *            <li>HEATING
     *            <li>COOLING
     *            <li>FURNACE
     *            <li>DRY_AIR
     *            <li>MOIST_AIR
     *            <li>AUTO_CHANGEOVER
     *            <li>ENERGY_SAVE_HEATING
     *            <li>ENERGY_SAVE_COOLING
     *            <li>AWAY_HEATING
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getThermostatSetpointSupportedReport(List<String> bitMask) {
        logger.debug("Creating command message THERMOSTAT_SETPOINT_SUPPORTED_REPORT version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(THERMOSTAT_SETPOINT_SUPPORTED_REPORT);

        // Process 'Bit Mask'
        int valBitMask = 0;
        for (String value : bitMask) {
            boolean foundBitMask = false;
            for (Integer entry : constantThermostatSetpointSupportedReportBitMask.keySet()) {
                if (constantThermostatSetpointSupportedReportBitMask.get(entry).equals(value)) {
                    foundBitMask = true;
                    valBitMask += entry;
                    break;
                }
            }
            if (!foundBitMask) {
                throw new IllegalArgumentException("Unknown constant value '" + bitMask + "' for bitMask");
            }
        }
        outputData.write(valBitMask);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the THERMOSTAT_SETPOINT_SUPPORTED_REPORT command.
     * <p>
     * Thermostat Setpoint Supported Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>BIT_MASK {@link List}<{@link String}>
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>NONE
     * <li>HEATING
     * <li>COOLING
     * <li>FURNACE
     * <li>DRY_AIR
     * <li>MOIST_AIR
     * <li>AUTO_CHANGEOVER
     * <li>ENERGY_SAVE_HEATING
     * <li>ENERGY_SAVE_COOLING
     * <li>AWAY_HEATING
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleThermostatSetpointSupportedReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Bit Mask'
        List<String> responseBitMask = new ArrayList<String>();
        for (int cntBitMask = 0; cntBitMask < (payload.length - 2) * 8; cntBitMask++) {
            if ((payload[2 + (cntBitMask / 8)] & (1 << cntBitMask % 8)) == 0) {
                continue;
            }
            responseBitMask.add(constantThermostatSetpointSupportedReportBitMask.get(cntBitMask));
        }
        response.put("BIT_MASK", responseBitMask);

        // Return the map of processed response data;
        return response;
    }
}
