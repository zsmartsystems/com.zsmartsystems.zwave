/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_METER_TBL_CONFIG</b> version <b>1</b>.
 * <p>
 * Command Class Meter Tbl Config
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x3C.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassMeterTblConfigV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassMeterTblConfigV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_METER_TBL_CONFIG
     */
    public final static int COMMAND_CLASS_KEY = 0x3C;

    /**
     * Meter Tbl Table Point Adm No Set Command Constant
     */
    public final static int METER_TBL_TABLE_POINT_ADM_NO_SET = 0x01;


    /**
     * Creates a new message with the METER_TBL_TABLE_POINT_ADM_NO_SET command.
     * <p>
     * Meter Tbl Table Point Adm No Set
     *
     * @param meterPointAdmNumberCharacter {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getMeterTblTablePointAdmNoSet(byte[] meterPointAdmNumberCharacter) {
        logger.debug("Creating command message METER_TBL_TABLE_POINT_ADM_NO_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(METER_TBL_TABLE_POINT_ADM_NO_SET);

        // Process 'Properties1'
        // Number of Characters is used by 'Meter Point Adm Number Character'
        int numberOfCharacters = meterPointAdmNumberCharacter.length;
        outputData.write(numberOfCharacters & 0x1F);

        // Process 'Meter Point Adm Number Character'
        if (meterPointAdmNumberCharacter != null) {
            try {
                outputData.write(meterPointAdmNumberCharacter);
            } catch (IOException e) {
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the METER_TBL_TABLE_POINT_ADM_NO_SET command.
     * <p>
     * Meter Tbl Table Point Adm No Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>METER_POINT_ADM_NUMBER_CHARACTER {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMeterTblTablePointAdmNoSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Properties1'
        // Number of Characters is used by 'Meter Point Adm Number Character'
        int varNumberOfCharacters = payload[msgOffset] & 0x1F;
        msgOffset += 1;

        // Process 'Meter Point Adm Number Character'
        response.put("METER_POINT_ADM_NUMBER_CHARACTER", Integer.valueOf(payload[msgOffset]));
        msgOffset += payload[msgOffset - 1];

        // Return the map of processed response data;
        return response;
    }
}
