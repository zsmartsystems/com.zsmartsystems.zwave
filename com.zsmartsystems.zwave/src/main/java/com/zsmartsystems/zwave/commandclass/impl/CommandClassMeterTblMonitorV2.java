/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_METER_TBL_MONITOR</b> version <b>2</b>.
 * <p>
 * Command Class Meter Tbl Monitor
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x3D.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassMeterTblMonitorV2 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassMeterTblMonitorV2.class);

    /**
     * Integer command class key for COMMAND_CLASS_METER_TBL_MONITOR
     */
    public final static int COMMAND_CLASS_KEY = 0x3D;

    /**
     * Meter Tbl Table Point Adm No Get Command Constant
     */
    public final static int METER_TBL_TABLE_POINT_ADM_NO_GET = 0x01;
    /**
     * Meter Tbl Table Point Adm No Report Command Constant
     */
    public final static int METER_TBL_TABLE_POINT_ADM_NO_REPORT = 0x02;
    /**
     * Meter Tbl Table Id Get Command Constant
     */
    public final static int METER_TBL_TABLE_ID_GET = 0x03;
    /**
     * Meter Tbl Table Id Report Command Constant
     */
    public final static int METER_TBL_TABLE_ID_REPORT = 0x04;
    /**
     * Meter Tbl Table Capability Get Command Constant
     */
    public final static int METER_TBL_TABLE_CAPABILITY_GET = 0x05;
    /**
     * Meter Tbl Report Command Constant
     */
    public final static int METER_TBL_REPORT = 0x06;
    /**
     * Meter Tbl Status Supported Get Command Constant
     */
    public final static int METER_TBL_STATUS_SUPPORTED_GET = 0x07;
    /**
     * Meter Tbl Status Supported Report Command Constant
     */
    public final static int METER_TBL_STATUS_SUPPORTED_REPORT = 0x08;
    /**
     * Meter Tbl Status Depth Get Command Constant
     */
    public final static int METER_TBL_STATUS_DEPTH_GET = 0x09;
    /**
     * Meter Tbl Status Date Get Command Constant
     */
    public final static int METER_TBL_STATUS_DATE_GET = 0x0A;
    /**
     * Meter Tbl Status Report Command Constant
     */
    public final static int METER_TBL_STATUS_REPORT = 0x0B;
    /**
     * Meter Tbl Current Data Get Command Constant
     */
    public final static int METER_TBL_CURRENT_DATA_GET = 0x0C;
    /**
     * Meter Tbl Current Data Report Command Constant
     */
    public final static int METER_TBL_CURRENT_DATA_REPORT = 0x0D;
    /**
     * Meter Tbl Historical Data Get Command Constant
     */
    public final static int METER_TBL_HISTORICAL_DATA_GET = 0x0E;
    /**
     * Meter Tbl Historical Data Report Command Constant
     */
    public final static int METER_TBL_HISTORICAL_DATA_REPORT = 0x0F;

    /**
     * Map holding constants for MeterTblStatusReportProperties1
     */
    private static Map<Integer, String> constantMeterTblStatusReportProperties1 = new HashMap<Integer, String>();

    /**
     * Map holding constants for MeterTblHistoricalDataReportProperties1
     */
    private static Map<Integer, String> constantMeterTblHistoricalDataReportProperties1 = new HashMap<Integer, String>();

    /**
     * Map holding constants for MeterTblCurrentDataReportProperties1
     */
    private static Map<Integer, String> constantMeterTblCurrentDataReportProperties1 = new HashMap<Integer, String>();

    /**
     * Map holding constants for MeterTblReportPayMeter
     */
    private static Map<Integer, String> constantMeterTblReportPayMeter = new HashMap<Integer, String>();

    static {
        // Constants for MeterTblStatusReportProperties1
        constantMeterTblStatusReportProperties1.put(0x80, "TYPE");

        // Constants for MeterTblHistoricalDataReportProperties1
        constantMeterTblHistoricalDataReportProperties1.put(0x80, "OPERATING_STATUS_INDICATION");

        // Constants for MeterTblCurrentDataReportProperties1
        constantMeterTblCurrentDataReportProperties1.put(0x80, "OPERATING_STATUS_INDICATION");

        // Constants for MeterTblReportPayMeter
        constantMeterTblReportPayMeter.put(0x00, "CREDITMETER");
        constantMeterTblReportPayMeter.put(0x01, "PREPAYMENT_METER");
        constantMeterTblReportPayMeter.put(0x02, "PREPAYMENT_METER_DEBT");
    }

    /**
     * Creates a new message with the METER_TBL_TABLE_POINT_ADM_NO_GET command.
     * <p>
     * Meter Tbl Table Point Adm No Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getMeterTblTablePointAdmNoGet() {
        logger.debug("Creating command message METER_TBL_TABLE_POINT_ADM_NO_GET version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(METER_TBL_TABLE_POINT_ADM_NO_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the METER_TBL_TABLE_POINT_ADM_NO_GET command.
     * <p>
     * Meter Tbl Table Point Adm No Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMeterTblTablePointAdmNoGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the METER_TBL_TABLE_POINT_ADM_NO_REPORT command.
     * <p>
     * Meter Tbl Table Point Adm No Report
     *
     * @param meterPointAdmNumberCharacter {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getMeterTblTablePointAdmNoReport(byte[] meterPointAdmNumberCharacter) {
        logger.debug("Creating command message METER_TBL_TABLE_POINT_ADM_NO_REPORT version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(METER_TBL_TABLE_POINT_ADM_NO_REPORT);

        // Process 'Properties1'
        // Number of Characters is used by 'Meter Point Adm Number Character'
        int numberOfCharacters = meterPointAdmNumberCharacter.length;
        outputData.write(numberOfCharacters & 0x1F);

        // Process 'Meter Point Adm Number Character'
        if (meterPointAdmNumberCharacter != null) {
            try {
                outputData.write(meterPointAdmNumberCharacter);
            } catch (IOException e) {
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the METER_TBL_TABLE_POINT_ADM_NO_REPORT command.
     * <p>
     * Meter Tbl Table Point Adm No Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>METER_POINT_ADM_NUMBER_CHARACTER {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMeterTblTablePointAdmNoReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Properties1'
        // Number of Characters is used by 'Meter Point Adm Number Character'
        int varNumberOfCharacters = payload[msgOffset] & 0x1F;
        msgOffset += 1;

        // Process 'Meter Point Adm Number Character'
        response.put("METER_POINT_ADM_NUMBER_CHARACTER", Integer.valueOf(payload[msgOffset]));
        msgOffset += payload[msgOffset - 1];

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the METER_TBL_TABLE_ID_GET command.
     * <p>
     * Meter Tbl Table Id Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getMeterTblTableIdGet() {
        logger.debug("Creating command message METER_TBL_TABLE_ID_GET version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(METER_TBL_TABLE_ID_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the METER_TBL_TABLE_ID_GET command.
     * <p>
     * Meter Tbl Table Id Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMeterTblTableIdGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the METER_TBL_TABLE_ID_REPORT command.
     * <p>
     * Meter Tbl Table Id Report
     *
     * @param meterIdCharacter {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getMeterTblTableIdReport(byte[] meterIdCharacter) {
        logger.debug("Creating command message METER_TBL_TABLE_ID_REPORT version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(METER_TBL_TABLE_ID_REPORT);

        // Process 'Properties1'
        // Number of Characters is used by 'Meter ID Character'
        int numberOfCharacters = meterIdCharacter.length;
        outputData.write(numberOfCharacters & 0x1F);

        // Process 'Meter ID Character'
        if (meterIdCharacter != null) {
            try {
                outputData.write(meterIdCharacter);
            } catch (IOException e) {
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the METER_TBL_TABLE_ID_REPORT command.
     * <p>
     * Meter Tbl Table Id Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>METER_ID_CHARACTER {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMeterTblTableIdReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Properties1'
        // Number of Characters is used by 'Meter ID Character'
        int varNumberOfCharacters = payload[msgOffset] & 0x1F;
        msgOffset += 1;

        // Process 'Meter ID Character'
        response.put("METER_ID_CHARACTER", Integer.valueOf(payload[msgOffset]));
        msgOffset += payload[msgOffset - 1];

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the METER_TBL_TABLE_CAPABILITY_GET command.
     * <p>
     * Meter Tbl Table Capability Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getMeterTblTableCapabilityGet() {
        logger.debug("Creating command message METER_TBL_TABLE_CAPABILITY_GET version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(METER_TBL_TABLE_CAPABILITY_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the METER_TBL_TABLE_CAPABILITY_GET command.
     * <p>
     * Meter Tbl Table Capability Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMeterTblTableCapabilityGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the METER_TBL_REPORT command.
     * <p>
     * Meter Tbl Report
     *
     * @param meterType {@link Integer}
     * @param rateType {@link Integer}
     * @param payMeter {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>CREDITMETER
     *            <li>PREPAYMENT_METER
     *            <li>PREPAYMENT_METER_DEBT
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getMeterTblReport(Integer meterType, Integer rateType, String payMeter) {
        logger.debug("Creating command message METER_TBL_REPORT version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(METER_TBL_REPORT);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= meterType & 0x3F;
        valProperties1 |= ((rateType << 6) & 0xC0);
        outputData.write(valProperties1);

        // Process 'Properties2'
        int varPayMeter = Integer.MAX_VALUE;
        for (Integer entry : constantMeterTblReportPayMeter.keySet()) {
            if (constantMeterTblReportPayMeter.get(entry).equals(payMeter)) {
                varPayMeter = entry;
                break;
            }
        }
        if (varPayMeter == Integer.MAX_VALUE) {
            throw new IllegalArgumentException("Unknown constant value '" + payMeter + "' for payMeter");
        }
        outputData.write(varPayMeter & 0x0F);

        // Process 'Dataset Supported'

        // Process 'Dataset History Supported'

        // Process 'Data History Supported'

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the METER_TBL_REPORT command.
     * <p>
     * Meter Tbl Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>METER_TYPE {@link Integer}
     * <li>RATE_TYPE {@link Integer}
     * <li>PAY_METER {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>CREDITMETER
     * <li>PREPAYMENT_METER
     * <li>PREPAYMENT_METER_DEBT
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMeterTblReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("METER_TYPE", Integer.valueOf(payload[2] & 0x3F));
        response.put("RATE_TYPE", Integer.valueOf(payload[2] & 0xC0 >> 6));

        // Process 'Properties2'
        response.put("PAY_METER", constantMeterTblReportPayMeter.get(payload[3] & 0x0F));

        // Process 'Dataset Supported'

        // Process 'Dataset History Supported'

        // Process 'Data History Supported'

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the METER_TBL_STATUS_SUPPORTED_GET command.
     * <p>
     * Meter Tbl Status Supported Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getMeterTblStatusSupportedGet() {
        logger.debug("Creating command message METER_TBL_STATUS_SUPPORTED_GET version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(METER_TBL_STATUS_SUPPORTED_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the METER_TBL_STATUS_SUPPORTED_GET command.
     * <p>
     * Meter Tbl Status Supported Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMeterTblStatusSupportedGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the METER_TBL_STATUS_SUPPORTED_REPORT command.
     * <p>
     * Meter Tbl Status Supported Report
     *
     * @param statusEventLogDepth {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getMeterTblStatusSupportedReport(Integer statusEventLogDepth) {
        logger.debug("Creating command message METER_TBL_STATUS_SUPPORTED_REPORT version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(METER_TBL_STATUS_SUPPORTED_REPORT);

        // Process 'Supported Operating Status'

        // Process 'Status Event Log Depth'
        outputData.write(statusEventLogDepth);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the METER_TBL_STATUS_SUPPORTED_REPORT command.
     * <p>
     * Meter Tbl Status Supported Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>STATUS_EVENT_LOG_DEPTH {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMeterTblStatusSupportedReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Supported Operating Status'

        // Process 'Status Event Log Depth'
        response.put("STATUS_EVENT_LOG_DEPTH", Integer.valueOf(payload[5]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the METER_TBL_STATUS_DEPTH_GET command.
     * <p>
     * Meter Tbl Status Depth Get
     *
     * @param statusEventLogDepth {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getMeterTblStatusDepthGet(Integer statusEventLogDepth) {
        logger.debug("Creating command message METER_TBL_STATUS_DEPTH_GET version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(METER_TBL_STATUS_DEPTH_GET);

        // Process 'Status Event Log Depth'
        outputData.write(statusEventLogDepth);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the METER_TBL_STATUS_DEPTH_GET command.
     * <p>
     * Meter Tbl Status Depth Get
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>STATUS_EVENT_LOG_DEPTH {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMeterTblStatusDepthGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Status Event Log Depth'
        response.put("STATUS_EVENT_LOG_DEPTH", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the METER_TBL_STATUS_DATE_GET command.
     * <p>
     * Meter Tbl Status Date Get
     *
     * @param maximumReports {@link Integer}
     * @param startYear {@link Integer}
     * @param startMonth {@link Integer}
     * @param startDay {@link Integer}
     * @param startHourLocalTime {@link Integer}
     * @param startMinuteLocalTime {@link Integer}
     * @param startSecondLocalTime {@link Integer}
     * @param stopYear {@link Integer}
     * @param stopMonth {@link Integer}
     * @param stopDay {@link Integer}
     * @param stopHourLocalTime {@link Integer}
     * @param stopMinuteLocalTime {@link Integer}
     * @param stopSecondLocalTime {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getMeterTblStatusDateGet(Integer maximumReports, Integer startYear, Integer startMonth,
            Integer startDay, Integer startHourLocalTime, Integer startMinuteLocalTime, Integer startSecondLocalTime,
            Integer stopYear, Integer stopMonth, Integer stopDay, Integer stopHourLocalTime, Integer stopMinuteLocalTime,
            Integer stopSecondLocalTime) {
        logger.debug("Creating command message METER_TBL_STATUS_DATE_GET version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(METER_TBL_STATUS_DATE_GET);

        // Process 'Maximum Reports'
        outputData.write(maximumReports);

        // Process 'Start Year'
        outputData.write((startYear >> 8) & 0xff);
        outputData.write(startYear & 0xff);

        // Process 'Start Month'
        outputData.write(startMonth);

        // Process 'Start Day'
        outputData.write(startDay);

        // Process 'Start Hour Local Time'
        outputData.write(startHourLocalTime);

        // Process 'Start Minute Local Time'
        outputData.write(startMinuteLocalTime);

        // Process 'Start Second Local Time'
        outputData.write(startSecondLocalTime);

        // Process 'Stop Year'
        outputData.write((stopYear >> 8) & 0xff);
        outputData.write(stopYear & 0xff);

        // Process 'Stop Month'
        outputData.write(stopMonth);

        // Process 'Stop Day'
        outputData.write(stopDay);

        // Process 'Stop Hour Local Time'
        outputData.write(stopHourLocalTime);

        // Process 'Stop Minute Local Time'
        outputData.write(stopMinuteLocalTime);

        // Process 'Stop Second Local Time'
        outputData.write(stopSecondLocalTime);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the METER_TBL_STATUS_DATE_GET command.
     * <p>
     * Meter Tbl Status Date Get
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>MAXIMUM_REPORTS {@link Integer}
     * <li>START_YEAR {@link Integer}
     * <li>START_MONTH {@link Integer}
     * <li>START_DAY {@link Integer}
     * <li>START_HOUR_LOCAL_TIME {@link Integer}
     * <li>START_MINUTE_LOCAL_TIME {@link Integer}
     * <li>START_SECOND_LOCAL_TIME {@link Integer}
     * <li>STOP_YEAR {@link Integer}
     * <li>STOP_MONTH {@link Integer}
     * <li>STOP_DAY {@link Integer}
     * <li>STOP_HOUR_LOCAL_TIME {@link Integer}
     * <li>STOP_MINUTE_LOCAL_TIME {@link Integer}
     * <li>STOP_SECOND_LOCAL_TIME {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMeterTblStatusDateGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Maximum Reports'
        response.put("MAXIMUM_REPORTS", Integer.valueOf(payload[2]));

        // Process 'Start Year'
        response.put("START_YEAR", Integer.valueOf(((payload[3] & 0xff) << 8) + (payload[4] & 0xff)));

        // Process 'Start Month'
        response.put("START_MONTH", Integer.valueOf(payload[5]));

        // Process 'Start Day'
        response.put("START_DAY", Integer.valueOf(payload[6]));

        // Process 'Start Hour Local Time'
        response.put("START_HOUR_LOCAL_TIME", Integer.valueOf(payload[7]));

        // Process 'Start Minute Local Time'
        response.put("START_MINUTE_LOCAL_TIME", Integer.valueOf(payload[8]));

        // Process 'Start Second Local Time'
        response.put("START_SECOND_LOCAL_TIME", Integer.valueOf(payload[9]));

        // Process 'Stop Year'
        response.put("STOP_YEAR", Integer.valueOf(((payload[10] & 0xff) << 8) + (payload[11] & 0xff)));

        // Process 'Stop Month'
        response.put("STOP_MONTH", Integer.valueOf(payload[12]));

        // Process 'Stop Day'
        response.put("STOP_DAY", Integer.valueOf(payload[13]));

        // Process 'Stop Hour Local Time'
        response.put("STOP_HOUR_LOCAL_TIME", Integer.valueOf(payload[14]));

        // Process 'Stop Minute Local Time'
        response.put("STOP_MINUTE_LOCAL_TIME", Integer.valueOf(payload[15]));

        // Process 'Stop Second Local Time'
        response.put("STOP_SECOND_LOCAL_TIME", Integer.valueOf(payload[16]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the METER_TBL_STATUS_REPORT command.
     * <p>
     * Meter Tbl Status Report
     *
     * @param reportsToFollow {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getMeterTblStatusReport(Integer reportsToFollow) {
        logger.debug("Creating command message METER_TBL_STATUS_REPORT version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(METER_TBL_STATUS_REPORT);

        // Process 'Reports to follow'
        outputData.write(reportsToFollow);

        // Process 'Current Operating Status'

        // Process 'vg'

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the METER_TBL_STATUS_REPORT command.
     * <p>
     * Meter Tbl Status Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>REPORTS_TO_FOLLOW {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMeterTblStatusReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Reports to follow'
        response.put("REPORTS_TO_FOLLOW", Integer.valueOf(payload[2]));

        // Process 'Current Operating Status'

        // Process 'vg'

        // Create a list to hold the group vg
        List<Map<String, Object>> variantList = new ArrayList<Map<String, Object>>();

        int offset = 6;
        while (offset < payload.length) {
            // Create a map to hold the members of this variant
            Map<String, Object> variant = new HashMap<String, Object>();

            // Process 'Properties1'
            variant.put("OPERATING_STATUS_EVENT_ID", Integer.valueOf(payload[6] & 0x1F));
            variant.put("TYPE", Boolean.valueOf((payload[6] & 0x80) != 0));

            // Process 'Year'
            variant.put("YEAR", Integer.valueOf(((payload[7] & 0xff) << 8) + (payload[8] & 0xff)));

            // Process 'Month'
            variant.put("MONTH", Integer.valueOf(payload[9]));

            // Process 'Day'
            variant.put("DAY", Integer.valueOf(payload[10]));

            // Process 'Hour Local Time'
            variant.put("HOUR_LOCAL_TIME", Integer.valueOf(payload[11]));

            // Process 'Minute Local Time'
            variant.put("MINUTE_LOCAL_TIME", Integer.valueOf(payload[12]));

            // Process 'Second Local Time'
            variant.put("SECOND_LOCAL_TIME", Integer.valueOf(payload[13]));

            // Add to the list
            variantList.add(variant);

            // Add the length of this variant
            offset += (payload[offset + 0] & 0xFF) >> 0;
        }

        // Add the variant list to the response
        response.put("VG", variantList);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the METER_TBL_CURRENT_DATA_GET command.
     * <p>
     * Meter Tbl Current Data Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getMeterTblCurrentDataGet() {
        logger.debug("Creating command message METER_TBL_CURRENT_DATA_GET version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(METER_TBL_CURRENT_DATA_GET);

        // Process 'Dataset Requested'

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the METER_TBL_CURRENT_DATA_GET command.
     * <p>
     * Meter Tbl Current Data Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMeterTblCurrentDataGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Dataset Requested'

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the METER_TBL_CURRENT_DATA_REPORT command.
     * <p>
     * Meter Tbl Current Data Report
     *
     * @param reportsToFollow {@link Integer}
     * @param rateType {@link Integer}
     * @param operatingStatusIndication {@link Boolean}
     * @param year {@link Integer}
     * @param month {@link Integer}
     * @param day {@link Integer}
     * @param hourLocalTime {@link Integer}
     * @param minuteLocalTime {@link Integer}
     * @param secondLocalTime {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getMeterTblCurrentDataReport(Integer reportsToFollow, Integer rateType,
            Boolean operatingStatusIndication, Integer year, Integer month, Integer day, Integer hourLocalTime,
            Integer minuteLocalTime, Integer secondLocalTime) {
        logger.debug("Creating command message METER_TBL_CURRENT_DATA_REPORT version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(METER_TBL_CURRENT_DATA_REPORT);

        // Process 'Reports to Follow'
        outputData.write(reportsToFollow);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= rateType & 0x03;
        valProperties1 |= operatingStatusIndication ? 0x80 : 0;
        outputData.write(valProperties1);

        // Process 'Dataset'

        // Process 'Year'
        outputData.write((year >> 8) & 0xff);
        outputData.write(year & 0xff);

        // Process 'Month'
        outputData.write(month);

        // Process 'Day'
        outputData.write(day);

        // Process 'Hour Local Time'
        outputData.write(hourLocalTime);

        // Process 'Minute Local Time'
        outputData.write(minuteLocalTime);

        // Process 'Second Local Time'
        outputData.write(secondLocalTime);

        // Process 'vg'

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the METER_TBL_CURRENT_DATA_REPORT command.
     * <p>
     * Meter Tbl Current Data Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>REPORTS_TO_FOLLOW {@link Integer}
     * <li>RATE_TYPE {@link Integer}
     * <li>OPERATING_STATUS_INDICATION {@link Boolean}
     * <li>YEAR {@link Integer}
     * <li>MONTH {@link Integer}
     * <li>DAY {@link Integer}
     * <li>HOUR_LOCAL_TIME {@link Integer}
     * <li>MINUTE_LOCAL_TIME {@link Integer}
     * <li>SECOND_LOCAL_TIME {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMeterTblCurrentDataReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Reports to Follow'
        response.put("REPORTS_TO_FOLLOW", Integer.valueOf(payload[2]));

        // Process 'Properties1'
        response.put("RATE_TYPE", Integer.valueOf(payload[3] & 0x03));
        response.put("OPERATING_STATUS_INDICATION", Boolean.valueOf((payload[3] & 0x80) != 0));

        // Process 'Dataset'

        // Process 'Year'
        response.put("YEAR", Integer.valueOf(((payload[7] & 0xff) << 8) + (payload[8] & 0xff)));

        // Process 'Month'
        response.put("MONTH", Integer.valueOf(payload[9]));

        // Process 'Day'
        response.put("DAY", Integer.valueOf(payload[10]));

        // Process 'Hour Local Time'
        response.put("HOUR_LOCAL_TIME", Integer.valueOf(payload[11]));

        // Process 'Minute Local Time'
        response.put("MINUTE_LOCAL_TIME", Integer.valueOf(payload[12]));

        // Process 'Second Local Time'
        response.put("SECOND_LOCAL_TIME", Integer.valueOf(payload[13]));

        // Process 'vg'

        // Create a list to hold the group vg
        List<Map<String, Object>> variantList = new ArrayList<Map<String, Object>>();

        int offset = 14;
        while (offset < payload.length) {
            // Create a map to hold the members of this variant
            Map<String, Object> variant = new HashMap<String, Object>();

            // Process 'Properties1'
            variant.put("CURRENT_SCALE", Integer.valueOf(payload[14] & 0x1F));
            variant.put("CURRENT_PRECISION", Integer.valueOf(payload[14] & 0xE0 >> 5));

            // Process 'Current Value'
            variant.put("CURRENT_VALUE", Long.valueOf((payload[15] << 24) + (payload[16] << 16) + (payload[17] << 8) + payload[18]));

            // Add to the list
            variantList.add(variant);

            // Add the length of this variant
            offset += (payload[offset + 0] & 0xFF) >> 0;
        }

        // Add the variant list to the response
        response.put("VG", variantList);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the METER_TBL_HISTORICAL_DATA_GET command.
     * <p>
     * Meter Tbl Historical Data Get
     *
     * @param maximumReports {@link Integer}
     * @param startYear {@link Integer}
     * @param startMonth {@link Integer}
     * @param startDay {@link Integer}
     * @param startHourLocalTime {@link Integer}
     * @param startMinuteLocalTime {@link Integer}
     * @param startSecondLocalTime {@link Integer}
     * @param stopYear {@link Integer}
     * @param stopMonth {@link Integer}
     * @param stopDay {@link Integer}
     * @param stopHourLocalTime {@link Integer}
     * @param stopMinuteLocalTime {@link Integer}
     * @param stopSecondLocalTime {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getMeterTblHistoricalDataGet(Integer maximumReports, Integer startYear, Integer startMonth,
            Integer startDay, Integer startHourLocalTime, Integer startMinuteLocalTime, Integer startSecondLocalTime,
            Integer stopYear, Integer stopMonth, Integer stopDay, Integer stopHourLocalTime, Integer stopMinuteLocalTime,
            Integer stopSecondLocalTime) {
        logger.debug("Creating command message METER_TBL_HISTORICAL_DATA_GET version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(METER_TBL_HISTORICAL_DATA_GET);

        // Process 'Maximum Reports'
        outputData.write(maximumReports);

        // Process 'Historical Dataset Requested'

        // Process 'Start Year'
        outputData.write((startYear >> 8) & 0xff);
        outputData.write(startYear & 0xff);

        // Process 'Start Month'
        outputData.write(startMonth);

        // Process 'Start Day'
        outputData.write(startDay);

        // Process 'Start Hour Local Time'
        outputData.write(startHourLocalTime);

        // Process 'Start Minute Local Time'
        outputData.write(startMinuteLocalTime);

        // Process 'Start Second Local Time'
        outputData.write(startSecondLocalTime);

        // Process 'Stop Year'
        outputData.write((stopYear >> 8) & 0xff);
        outputData.write(stopYear & 0xff);

        // Process 'Stop Month'
        outputData.write(stopMonth);

        // Process 'Stop Day'
        outputData.write(stopDay);

        // Process 'Stop Hour Local Time'
        outputData.write(stopHourLocalTime);

        // Process 'Stop Minute Local Time'
        outputData.write(stopMinuteLocalTime);

        // Process 'Stop Second Local Time'
        outputData.write(stopSecondLocalTime);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the METER_TBL_HISTORICAL_DATA_GET command.
     * <p>
     * Meter Tbl Historical Data Get
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>MAXIMUM_REPORTS {@link Integer}
     * <li>START_YEAR {@link Integer}
     * <li>START_MONTH {@link Integer}
     * <li>START_DAY {@link Integer}
     * <li>START_HOUR_LOCAL_TIME {@link Integer}
     * <li>START_MINUTE_LOCAL_TIME {@link Integer}
     * <li>START_SECOND_LOCAL_TIME {@link Integer}
     * <li>STOP_YEAR {@link Integer}
     * <li>STOP_MONTH {@link Integer}
     * <li>STOP_DAY {@link Integer}
     * <li>STOP_HOUR_LOCAL_TIME {@link Integer}
     * <li>STOP_MINUTE_LOCAL_TIME {@link Integer}
     * <li>STOP_SECOND_LOCAL_TIME {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMeterTblHistoricalDataGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Maximum Reports'
        response.put("MAXIMUM_REPORTS", Integer.valueOf(payload[2]));

        // Process 'Historical Dataset Requested'

        // Process 'Start Year'
        response.put("START_YEAR", Integer.valueOf(((payload[6] & 0xff) << 8) + (payload[7] & 0xff)));

        // Process 'Start Month'
        response.put("START_MONTH", Integer.valueOf(payload[8]));

        // Process 'Start Day'
        response.put("START_DAY", Integer.valueOf(payload[9]));

        // Process 'Start Hour Local Time'
        response.put("START_HOUR_LOCAL_TIME", Integer.valueOf(payload[10]));

        // Process 'Start Minute Local Time'
        response.put("START_MINUTE_LOCAL_TIME", Integer.valueOf(payload[11]));

        // Process 'Start Second Local Time'
        response.put("START_SECOND_LOCAL_TIME", Integer.valueOf(payload[12]));

        // Process 'Stop Year'
        response.put("STOP_YEAR", Integer.valueOf(((payload[13] & 0xff) << 8) + (payload[14] & 0xff)));

        // Process 'Stop Month'
        response.put("STOP_MONTH", Integer.valueOf(payload[15]));

        // Process 'Stop Day'
        response.put("STOP_DAY", Integer.valueOf(payload[16]));

        // Process 'Stop Hour Local Time'
        response.put("STOP_HOUR_LOCAL_TIME", Integer.valueOf(payload[17]));

        // Process 'Stop Minute Local Time'
        response.put("STOP_MINUTE_LOCAL_TIME", Integer.valueOf(payload[18]));

        // Process 'Stop Second Local Time'
        response.put("STOP_SECOND_LOCAL_TIME", Integer.valueOf(payload[19]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the METER_TBL_HISTORICAL_DATA_REPORT command.
     * <p>
     * Meter Tbl Historical Data Report
     *
     * @param reportsToFollow {@link Integer}
     * @param rateType {@link Integer}
     * @param operatingStatusIndication {@link Boolean}
     * @param year {@link Integer}
     * @param month {@link Integer}
     * @param day {@link Integer}
     * @param hourLocalTime {@link Integer}
     * @param minuteLocalTime {@link Integer}
     * @param secondLocalTime {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getMeterTblHistoricalDataReport(Integer reportsToFollow, Integer rateType,
            Boolean operatingStatusIndication, Integer year, Integer month, Integer day, Integer hourLocalTime,
            Integer minuteLocalTime, Integer secondLocalTime) {
        logger.debug("Creating command message METER_TBL_HISTORICAL_DATA_REPORT version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(METER_TBL_HISTORICAL_DATA_REPORT);

        // Process 'Reports to Follow'
        outputData.write(reportsToFollow);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= rateType & 0x03;
        valProperties1 |= operatingStatusIndication ? 0x80 : 0;
        outputData.write(valProperties1);

        // Process 'Dataset'

        // Process 'Year'
        outputData.write((year >> 8) & 0xff);
        outputData.write(year & 0xff);

        // Process 'Month'
        outputData.write(month);

        // Process 'Day'
        outputData.write(day);

        // Process 'Hour Local Time'
        outputData.write(hourLocalTime);

        // Process 'Minute Local Time'
        outputData.write(minuteLocalTime);

        // Process 'Second Local Time'
        outputData.write(secondLocalTime);

        // Process 'vg'

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the METER_TBL_HISTORICAL_DATA_REPORT command.
     * <p>
     * Meter Tbl Historical Data Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>REPORTS_TO_FOLLOW {@link Integer}
     * <li>RATE_TYPE {@link Integer}
     * <li>OPERATING_STATUS_INDICATION {@link Boolean}
     * <li>YEAR {@link Integer}
     * <li>MONTH {@link Integer}
     * <li>DAY {@link Integer}
     * <li>HOUR_LOCAL_TIME {@link Integer}
     * <li>MINUTE_LOCAL_TIME {@link Integer}
     * <li>SECOND_LOCAL_TIME {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMeterTblHistoricalDataReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Reports to Follow'
        response.put("REPORTS_TO_FOLLOW", Integer.valueOf(payload[2]));

        // Process 'Properties1'
        response.put("RATE_TYPE", Integer.valueOf(payload[3] & 0x03));
        response.put("OPERATING_STATUS_INDICATION", Boolean.valueOf((payload[3] & 0x80) != 0));

        // Process 'Dataset'

        // Process 'Year'
        response.put("YEAR", Integer.valueOf(((payload[7] & 0xff) << 8) + (payload[8] & 0xff)));

        // Process 'Month'
        response.put("MONTH", Integer.valueOf(payload[9]));

        // Process 'Day'
        response.put("DAY", Integer.valueOf(payload[10]));

        // Process 'Hour Local Time'
        response.put("HOUR_LOCAL_TIME", Integer.valueOf(payload[11]));

        // Process 'Minute Local Time'
        response.put("MINUTE_LOCAL_TIME", Integer.valueOf(payload[12]));

        // Process 'Second Local Time'
        response.put("SECOND_LOCAL_TIME", Integer.valueOf(payload[13]));

        // Process 'vg'

        // Create a list to hold the group vg
        List<Map<String, Object>> variantList = new ArrayList<Map<String, Object>>();

        int offset = 14;
        while (offset < payload.length) {
            // Create a map to hold the members of this variant
            Map<String, Object> variant = new HashMap<String, Object>();

            // Process 'Properties1'
            variant.put("HISTORICAL_SCALE", Integer.valueOf(payload[14] & 0x1F));
            variant.put("HISTORICAL_PRECISION", Integer.valueOf(payload[14] & 0xE0 >> 5));

            // Process 'Historical Value'
            variant.put("HISTORICAL_VALUE", Long.valueOf((payload[15] << 24) + (payload[16] << 16) + (payload[17] << 8) + payload[18]));

            // Add to the list
            variantList.add(variant);

            // Add the length of this variant
            offset += (payload[offset + 0] & 0xFF) >> 0;
        }

        // Add the variant list to the response
        response.put("VG", variantList);

        // Return the map of processed response data;
        return response;
    }
}
