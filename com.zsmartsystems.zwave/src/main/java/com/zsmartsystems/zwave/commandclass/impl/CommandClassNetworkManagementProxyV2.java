/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_NETWORK_MANAGEMENT_PROXY</b> version <b>2</b>.
 * <p>
 * Command Class Network Management Proxy
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x52.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassNetworkManagementProxyV2 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassNetworkManagementProxyV2.class);

    /**
     * Integer command class key for COMMAND_CLASS_NETWORK_MANAGEMENT_PROXY
     */
    public final static int COMMAND_CLASS_KEY = 0x52;

    /**
     * Node List Get Command Constant
     */
    public final static int NODE_LIST_GET = 0x01;
    /**
     * Node List Report Command Constant
     */
    public final static int NODE_LIST_REPORT = 0x02;
    /**
     * Node Info Cached Get Command Constant
     */
    public final static int NODE_INFO_CACHED_GET = 0x03;
    /**
     * Node Info Cached Report Command Constant
     */
    public final static int NODE_INFO_CACHED_REPORT = 0x04;

    /**
     * Map holding constants for NodeInfoCachedReportStatus
     */
    private static Map<Integer, String> constantNodeInfoCachedReportStatus = new HashMap<Integer, String>();

    /**
     * Map holding constants for NodeListReportStatus
     */
    private static Map<Integer, String> constantNodeListReportStatus = new HashMap<Integer, String>();

    /**
     * Map holding constants for NodeInfoCachedReportProperties3
     */
    private static Map<Integer, String> constantNodeInfoCachedReportProperties3 = new HashMap<Integer, String>();

    /**
     * Map holding constants for NodeInfoCachedReportProperties2
     */
    private static Map<Integer, String> constantNodeInfoCachedReportProperties2 = new HashMap<Integer, String>();

    /**
     * Map holding constants for NodeInfoCachedReportSecurityMark
     */
    private static Map<Integer, String> constantNodeInfoCachedReportSecurityMark = new HashMap<Integer, String>();

    static {
        // Constants for NodeInfoCachedReportStatus
        constantNodeInfoCachedReportStatus.put(0x00, "STATUS_OK");
        constantNodeInfoCachedReportStatus.put(0x01, "STATUS_NOT_RESPONDING");
        constantNodeInfoCachedReportStatus.put(0x02, "STATUS_UNKNOWN");

        // Constants for NodeListReportStatus
        constantNodeListReportStatus.put(0x00, "LATEST");
        constantNodeListReportStatus.put(0x01, "MAY_NOT_BE_THE_LATEST");

        // Constants for NodeInfoCachedReportProperties3
        constantNodeInfoCachedReportProperties3.put(0x80, "OPT");

        // Constants for NodeInfoCachedReportProperties2
        constantNodeInfoCachedReportProperties2.put(0x80, "LISTENING");

        // Constants for NodeInfoCachedReportSecurityMark
        constantNodeInfoCachedReportSecurityMark.put(0x00, "SECURITY_MARK");
        constantNodeInfoCachedReportSecurityMark.put(0xF1, "SECURITY_MARK");
    }

    /**
     * Creates a new message with the NODE_LIST_GET command.
     * <p>
     * Node List Get
     *
     * @param seqNo {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getNodeListGet(Integer seqNo) {
        logger.debug("Creating command message NODE_LIST_GET version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(NODE_LIST_GET);

        // Process 'Seq. No'
        outputData.write(seqNo);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the NODE_LIST_GET command.
     * <p>
     * Node List Get
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleNodeListGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the NODE_LIST_REPORT command.
     * <p>
     * Node List Report
     *
     * @param seqNo {@link Integer}
     * @param status {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>LATEST
     *            <li>MAY_NOT_BE_THE_LATEST
     *            </ul>
     * @param nodeListControllerId {@link Integer}
     * @param nodeListData {@link List<Integer>}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getNodeListReport(Integer seqNo, String status, Integer nodeListControllerId,
            List<Integer> nodeListData) {
        logger.debug("Creating command message NODE_LIST_REPORT version 2");

        Collections.sort(nodeListData);
        int lenNodeListData = (nodeListData.get(nodeListData.size() - 1) / 8) + 1;

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(NODE_LIST_REPORT);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Status'
        boolean foundStatus = false;
        for (Integer entry : constantNodeListReportStatus.keySet()) {
            if (constantNodeListReportStatus.get(entry).equals(status)) {
                outputData.write(entry);
                foundStatus = true;
                break;
            }
        }
        if (!foundStatus) {
            throw new IllegalArgumentException("Unknown constant value '" + status + "' for status");
        }

        // Process 'Node List Controller ID'
        outputData.write(nodeListControllerId);

        // Process 'Node List Data'
        int valNodeListData = 0;
        for (int cntNodeListData = 1 ; cntNodeListData < lenNodeListData * 8 ; cntNodeListData++) {
            valNodeListData |= nodeListData.contains(valNodeListData) ? (1 << cntNodeListData % 8) : 0;
            if (cntNodeListData % 8 == 0) {
                outputData.write(valNodeListData);
                valNodeListData = 0;
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the NODE_LIST_REPORT command.
     * <p>
     * Node List Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>STATUS {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>LATEST
     * <li>MAY_NOT_BE_THE_LATEST
     * </ul>
     * <li>NODE_LIST_CONTROLLER_ID {@link Integer}
     * <li>NODE_LIST_DATA {@link List}<{@link Integer}>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleNodeListReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", Integer.valueOf(payload[2]));

        // Process 'Status'
        response.put("STATUS", constantNodeListReportStatus.get(payload[3] & 0xff));

        // Process 'Node List Controller ID'
        response.put("NODE_LIST_CONTROLLER_ID", Integer.valueOf(payload[4]));

        // Process 'Node List Data'
        List<Integer> responseNodeListData = new ArrayList<Integer>();
        for (int cntNodeListData = 0; cntNodeListData < (payload.length - 5) * 8; cntNodeListData++) {
            if ((payload[5 + (cntNodeListData / 8)] & (1 << cntNodeListData % 8)) == 0) {
                continue;
            }
            responseNodeListData.add(cntNodeListData);
        }
        response.put("NODE_LIST_DATA", responseNodeListData);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the NODE_INFO_CACHED_GET command.
     * <p>
     * Node Info Cached Get
     *
     * @param seqNo {@link Integer}
     * @param maxAge {@link Integer}
     * @param nodeId {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getNodeInfoCachedGet(Integer seqNo, Integer maxAge, Integer nodeId) {
        logger.debug("Creating command message NODE_INFO_CACHED_GET version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(NODE_INFO_CACHED_GET);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Properties1'
        outputData.write(maxAge & 0x0F);

        // Process 'Node ID'
        // Check the node number boundary
        if (nodeId < 1 || nodeId > 232) {
            logger.debug("Node number is out of bounds {}", nodeId);
            return null;
        }
        outputData.write(nodeId);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the NODE_INFO_CACHED_GET command.
     * <p>
     * Node Info Cached Get
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>MAX_AGE {@link Integer}
     * <li>NODE_ID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleNodeInfoCachedGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", Integer.valueOf(payload[2]));

        // Process 'Properties1'
        response.put("MAX_AGE", Integer.valueOf(payload[3] & 0x0F));

        // Process 'Node ID'
        response.put("NODE_ID", Integer.valueOf(payload[4]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the NODE_INFO_CACHED_REPORT command.
     * <p>
     * Node Info Cached Report
     *
     * @param seqNo {@link Integer}
     * @param age {@link Integer}
     * @param status {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>STATUS_OK
     *            <li>STATUS_NOT_RESPONDING
     *            <li>STATUS_UNKNOWN
     *            </ul>
     * @param capability {@link Integer}
     * @param listening {@link Boolean}
     * @param security {@link Integer}
     * @param sensor {@link Integer}
     * @param opt {@link Boolean}
     * @param grantedKeys {@link Integer}
     * @param basicDeviceClass {@link Integer}
     * @param genericDeviceClass {@link Integer}
     * @param specificDeviceClass {@link Integer}
     * @param nonSecureCommandClass {@link byte[]}
     * @param secureCommandClass {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getNodeInfoCachedReport(Integer seqNo, Integer age, String status, Integer capability,
            Boolean listening, Integer security, Integer sensor, Boolean opt, Integer grantedKeys,
            Integer basicDeviceClass, Integer genericDeviceClass, Integer specificDeviceClass,
            byte[] nonSecureCommandClass, byte[] secureCommandClass) {
        logger.debug("Creating command message NODE_INFO_CACHED_REPORT version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(NODE_INFO_CACHED_REPORT);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= age & 0x0F;
        int varStatus = Integer.MAX_VALUE;
        for (Integer entry : constantNodeInfoCachedReportStatus.keySet()) {
            if (constantNodeInfoCachedReportStatus.get(entry).equals(status)) {
                varStatus = entry;
                break;
            }
        }
        if (varStatus == Integer.MAX_VALUE) {
            throw new IllegalArgumentException("Unknown constant value '" + status + "' for status");
        }
        valProperties1 |= varStatus << 4 & 0xF0;
        outputData.write(valProperties1);

        // Process 'Properties2'
        int valProperties2 = 0;
        valProperties2 |= capability & 0x7F;
        valProperties2 |= listening ? 0x80 : 0;
        outputData.write(valProperties2);

        // Process 'Properties3'
        int valProperties3 = 0;
        valProperties3 |= security & 0x0F;
        valProperties3 |= ((sensor << 4) & 0x70);
        valProperties3 |= opt ? 0x80 : 0;
        outputData.write(valProperties3);

        // Process 'Granted Keys'
        outputData.write(grantedKeys);

        // Process 'Basic Device Class'
        outputData.write(basicDeviceClass);

        // Process 'Generic Device Class'
        outputData.write(genericDeviceClass);

        // Process 'Specific Device Class'
        outputData.write(specificDeviceClass);

        // Process 'Non-Secure Command Class'
        if (nonSecureCommandClass != null) {
            try {
                outputData.write(nonSecureCommandClass);
            } catch (IOException e) {
            }
        }

        // Process 'Security MARK'
        outputData.write(0xF1);

        // Process 'Secure Command Class'
        if (secureCommandClass != null) {
            try {
                outputData.write(secureCommandClass);
            } catch (IOException e) {
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the NODE_INFO_CACHED_REPORT command.
     * <p>
     * Node Info Cached Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>AGE {@link Integer}
     * <li>STATUS {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>STATUS_OK
     * <li>STATUS_NOT_RESPONDING
     * <li>STATUS_UNKNOWN
     * </ul>
     * <li>CAPABILITY {@link Integer}
     * <li>LISTENING {@link Boolean}
     * <li>SECURITY {@link Integer}
     * <li>SENSOR {@link Integer}
     * <li>OPT {@link Boolean}
     * <li>GRANTED_KEYS {@link Integer}
     * <li>BASIC_DEVICE_CLASS {@link Integer}
     * <li>GENERIC_DEVICE_CLASS {@link Integer}
     * <li>SPECIFIC_DEVICE_CLASS {@link Integer}
     * <li>NON_SECURE_COMMAND_CLASS {@link byte[]}
     * <li>SECURE_COMMAND_CLASS {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleNodeInfoCachedReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Seq. No'
        response.put("SEQ_NO", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Properties1'
        response.put("AGE", Integer.valueOf(payload[msgOffset] & 0x0F));
        response.put("STATUS", constantNodeInfoCachedReportStatus.get((payload[msgOffset] & 0xF0) >> 4));
        msgOffset += 1;

        // Process 'Properties2'
        response.put("CAPABILITY", Integer.valueOf(payload[msgOffset] & 0x7F));
        response.put("LISTENING", Boolean.valueOf((payload[msgOffset] & 0x80) != 0));
        msgOffset += 1;

        // Process 'Properties3'
        response.put("SECURITY", Integer.valueOf(payload[msgOffset] & 0x0F));
        response.put("SENSOR", Integer.valueOf(payload[msgOffset] & 0x70 >> 4));
        response.put("OPT", Boolean.valueOf((payload[msgOffset] & 0x80) != 0));
        msgOffset += 1;

        // Process 'Granted Keys'
        response.put("GRANTED_KEYS", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Basic Device Class'
        response.put("BASIC_DEVICE_CLASS", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Generic Device Class'
        response.put("GENERIC_DEVICE_CLASS", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Specific Device Class'
        response.put("SPECIFIC_DEVICE_CLASS", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Non-Secure Command Class'
        ByteArrayOutputStream valNonSecureCommandClass = new ByteArrayOutputStream();
        while (msgOffset < payload.length) {
            // Detect the marker
            if (((payload[msgOffset] & 0xFF) == 0xF1) && ((payload[msgOffset + 1] & 0xFF) == 0x00)) {
                break;
            }
            valNonSecureCommandClass.write(payload[msgOffset]);
            msgOffset++;
        }
        response.put("NON_SECURE_COMMAND_CLASS", valNonSecureCommandClass);

        // Process 'Security MARK'
        // Adjust position to account for the marker
        msgOffset += 2;

        // Process 'Secure Command Class'
        ByteArrayOutputStream valSecureCommandClass = new ByteArrayOutputStream();
        while (msgOffset < payload.length) {
            valSecureCommandClass.write(payload[msgOffset]);
            msgOffset++;
        }
        response.put("SECURE_COMMAND_CLASS", valSecureCommandClass);

        // Return the map of processed response data;
        return response;
    }
}
