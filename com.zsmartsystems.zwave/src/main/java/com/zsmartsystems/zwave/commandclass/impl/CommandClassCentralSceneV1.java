/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_CENTRAL_SCENE</b> version <b>1</b>.
 * <p>
 * Command Class Central Scene
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x5B.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassCentralSceneV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassCentralSceneV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_CENTRAL_SCENE
     */
    public final static int COMMAND_CLASS_KEY = 0x5B;

    /**
     * Central Scene Supported Get Command Constant
     */
    public final static int CENTRAL_SCENE_SUPPORTED_GET = 0x01;
    /**
     * Central Scene Supported Report Command Constant
     */
    public final static int CENTRAL_SCENE_SUPPORTED_REPORT = 0x02;
    /**
     * Central Scene Notification Command Constant
     */
    public final static int CENTRAL_SCENE_NOTIFICATION = 0x03;


    /**
     * Creates a new message with the CENTRAL_SCENE_SUPPORTED_GET command.
     * <p>
     * Central Scene Supported Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getCentralSceneSupportedGet() {
        logger.debug("Creating command message CENTRAL_SCENE_SUPPORTED_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CENTRAL_SCENE_SUPPORTED_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CENTRAL_SCENE_SUPPORTED_GET command.
     * <p>
     * Central Scene Supported Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleCentralSceneSupportedGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CENTRAL_SCENE_SUPPORTED_REPORT command.
     * <p>
     * Central Scene Supported Report
     *
     * @param supportedScenes {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getCentralSceneSupportedReport(Integer supportedScenes) {
        logger.debug("Creating command message CENTRAL_SCENE_SUPPORTED_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CENTRAL_SCENE_SUPPORTED_REPORT);

        // Process 'Supported Scenes'
        outputData.write(supportedScenes);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CENTRAL_SCENE_SUPPORTED_REPORT command.
     * <p>
     * Central Scene Supported Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SUPPORTED_SCENES {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleCentralSceneSupportedReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Supported Scenes'
        response.put("SUPPORTED_SCENES", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CENTRAL_SCENE_NOTIFICATION command.
     * <p>
     * Central Scene Notification
     *
     * @param sequenceNumber {@link Integer}
     * @param keyAttributes {@link Integer}
     * @param sceneNumber {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getCentralSceneNotification(Integer sequenceNumber, Integer keyAttributes, Integer sceneNumber) {
        logger.debug("Creating command message CENTRAL_SCENE_NOTIFICATION version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CENTRAL_SCENE_NOTIFICATION);

        // Process 'Sequence Number'
        outputData.write(sequenceNumber);

        // Process 'Properties1'
        outputData.write(keyAttributes & 0x07);

        // Process 'Scene Number'
        outputData.write(sceneNumber);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CENTRAL_SCENE_NOTIFICATION command.
     * <p>
     * Central Scene Notification
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQUENCE_NUMBER {@link Integer}
     * <li>KEY_ATTRIBUTES {@link Integer}
     * <li>SCENE_NUMBER {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleCentralSceneNotification(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Sequence Number'
        response.put("SEQUENCE_NUMBER", Integer.valueOf(payload[2]));

        // Process 'Properties1'
        response.put("KEY_ATTRIBUTES", Integer.valueOf(payload[3] & 0x07));

        // Process 'Scene Number'
        response.put("SCENE_NUMBER", Integer.valueOf(payload[4]));

        // Return the map of processed response data;
        return response;
    }
}
