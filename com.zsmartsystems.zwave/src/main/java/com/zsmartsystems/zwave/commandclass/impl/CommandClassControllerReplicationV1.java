/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_CONTROLLER_REPLICATION</b> version <b>1</b>.
 * <p>
 * Command Class Controller Replication
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x21.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassControllerReplicationV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassControllerReplicationV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_CONTROLLER_REPLICATION
     */
    public final static int COMMAND_CLASS_KEY = 0x21;

    /**
     * Ctrl Replication Transfer Group Command Constant
     */
    public final static int CTRL_REPLICATION_TRANSFER_GROUP = 0x31;
    /**
     * Ctrl Replication Transfer Group Name Command Constant
     */
    public final static int CTRL_REPLICATION_TRANSFER_GROUP_NAME = 0x32;
    /**
     * Ctrl Replication Transfer Scene Command Constant
     */
    public final static int CTRL_REPLICATION_TRANSFER_SCENE = 0x33;
    /**
     * Ctrl Replication Transfer Scene Name Command Constant
     */
    public final static int CTRL_REPLICATION_TRANSFER_SCENE_NAME = 0x34;


    /**
     * Creates a new message with the CTRL_REPLICATION_TRANSFER_GROUP command.
     * <p>
     * Ctrl Replication Transfer Group
     *
     * @param sequenceNumber {@link Integer}
     * @param groupId {@link Integer}
     * @param nodeId {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getCtrlReplicationTransferGroup(Integer sequenceNumber, Integer groupId, Integer nodeId) {
        logger.debug("Creating command message CTRL_REPLICATION_TRANSFER_GROUP version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CTRL_REPLICATION_TRANSFER_GROUP);

        // Process 'Sequence Number'
        outputData.write(sequenceNumber);

        // Process 'Group ID'
        outputData.write(groupId);

        // Process 'Node ID'
        // Check the node number boundary
        if (nodeId < 1 || nodeId > 232) {
            logger.debug("Node number is out of bounds {}", nodeId);
            return null;
        }
        outputData.write(nodeId);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CTRL_REPLICATION_TRANSFER_GROUP command.
     * <p>
     * Ctrl Replication Transfer Group
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQUENCE_NUMBER {@link Integer}
     * <li>GROUP_ID {@link Integer}
     * <li>NODE_ID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleCtrlReplicationTransferGroup(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Sequence Number'
        response.put("SEQUENCE_NUMBER", Integer.valueOf(payload[2]));

        // Process 'Group ID'
        response.put("GROUP_ID", Integer.valueOf(payload[3]));

        // Process 'Node ID'
        response.put("NODE_ID", Integer.valueOf(payload[4]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CTRL_REPLICATION_TRANSFER_GROUP_NAME command.
     * <p>
     * Ctrl Replication Transfer Group Name
     *
     * @param sequenceNumber {@link Integer}
     * @param groupId {@link Integer}
     * @param groupName {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getCtrlReplicationTransferGroupName(Integer sequenceNumber, Integer groupId, byte[] groupName) {
        logger.debug("Creating command message CTRL_REPLICATION_TRANSFER_GROUP_NAME version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CTRL_REPLICATION_TRANSFER_GROUP_NAME);

        // Process 'Sequence Number'
        outputData.write(sequenceNumber);

        // Process 'Group ID'
        outputData.write(groupId);

        // Process 'Group Name'
        if (groupName != null) {
            try {
                outputData.write(groupName);
            } catch (IOException e) {
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CTRL_REPLICATION_TRANSFER_GROUP_NAME command.
     * <p>
     * Ctrl Replication Transfer Group Name
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQUENCE_NUMBER {@link Integer}
     * <li>GROUP_ID {@link Integer}
     * <li>GROUP_NAME {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleCtrlReplicationTransferGroupName(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Sequence Number'
        response.put("SEQUENCE_NUMBER", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Group ID'
        response.put("GROUP_ID", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Group Name'
        ByteArrayOutputStream valGroupName = new ByteArrayOutputStream();
        while (msgOffset < payload.length) {
            valGroupName.write(payload[msgOffset]);
            msgOffset++;
        }
        response.put("GROUP_NAME", valGroupName);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CTRL_REPLICATION_TRANSFER_SCENE command.
     * <p>
     * Ctrl Replication Transfer Scene
     *
     * @param sequenceNumber {@link Integer}
     * @param sceneId {@link Integer}
     * @param nodeId {@link Integer}
     * @param level {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getCtrlReplicationTransferScene(Integer sequenceNumber, Integer sceneId, Integer nodeId,
            Integer level) {
        logger.debug("Creating command message CTRL_REPLICATION_TRANSFER_SCENE version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CTRL_REPLICATION_TRANSFER_SCENE);

        // Process 'Sequence Number'
        outputData.write(sequenceNumber);

        // Process 'Scene ID'
        outputData.write(sceneId);

        // Process 'Node ID'
        // Check the node number boundary
        if (nodeId < 1 || nodeId > 232) {
            logger.debug("Node number is out of bounds {}", nodeId);
            return null;
        }
        outputData.write(nodeId);

        // Process 'Level'
        outputData.write(level);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CTRL_REPLICATION_TRANSFER_SCENE command.
     * <p>
     * Ctrl Replication Transfer Scene
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQUENCE_NUMBER {@link Integer}
     * <li>SCENE_ID {@link Integer}
     * <li>NODE_ID {@link Integer}
     * <li>LEVEL {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleCtrlReplicationTransferScene(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Sequence Number'
        response.put("SEQUENCE_NUMBER", Integer.valueOf(payload[2]));

        // Process 'Scene ID'
        response.put("SCENE_ID", Integer.valueOf(payload[3]));

        // Process 'Node ID'
        response.put("NODE_ID", Integer.valueOf(payload[4]));

        // Process 'Level'
        response.put("LEVEL", Integer.valueOf(payload[5]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CTRL_REPLICATION_TRANSFER_SCENE_NAME command.
     * <p>
     * Ctrl Replication Transfer Scene Name
     *
     * @param sequenceNumber {@link Integer}
     * @param sceneId {@link Integer}
     * @param sceneName {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getCtrlReplicationTransferSceneName(Integer sequenceNumber, Integer sceneId, byte[] sceneName) {
        logger.debug("Creating command message CTRL_REPLICATION_TRANSFER_SCENE_NAME version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CTRL_REPLICATION_TRANSFER_SCENE_NAME);

        // Process 'Sequence Number'
        outputData.write(sequenceNumber);

        // Process 'Scene ID'
        outputData.write(sceneId);

        // Process 'Scene Name'
        if (sceneName != null) {
            try {
                outputData.write(sceneName);
            } catch (IOException e) {
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CTRL_REPLICATION_TRANSFER_SCENE_NAME command.
     * <p>
     * Ctrl Replication Transfer Scene Name
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQUENCE_NUMBER {@link Integer}
     * <li>SCENE_ID {@link Integer}
     * <li>SCENE_NAME {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleCtrlReplicationTransferSceneName(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Sequence Number'
        response.put("SEQUENCE_NUMBER", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Scene ID'
        response.put("SCENE_ID", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Scene Name'
        ByteArrayOutputStream valSceneName = new ByteArrayOutputStream();
        while (msgOffset < payload.length) {
            valSceneName.write(payload[msgOffset]);
            msgOffset++;
        }
        response.put("SCENE_NAME", valSceneName);

        // Return the map of processed response data;
        return response;
    }
}
