/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_METER</b> version <b>1</b>.
 * <p>
 * Command Class Meter
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x32.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassMeterV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassMeterV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_METER
     */
    public final static int COMMAND_CLASS_KEY = 0x32;

    /**
     * Meter Get Command Constant
     */
    public final static int METER_GET = 0x01;
    /**
     * Meter Report Command Constant
     */
    public final static int METER_REPORT = 0x02;

    /**
     * Map holding constants for MeterReportMeterType
     */
    private static Map<Integer, String> constantMeterReportMeterType = new HashMap<Integer, String>();

    static {
        // Constants for MeterReportMeterType
        constantMeterReportMeterType.put(0x01, "ELECTRIC_METER");
        constantMeterReportMeterType.put(0x02, "GAS_METER");
        constantMeterReportMeterType.put(0x03, "WATER_METER");
    }

    /**
     * Creates a new message with the METER_GET command.
     * <p>
     * Meter Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getMeterGet() {
        logger.debug("Creating command message METER_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(METER_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the METER_GET command.
     * <p>
     * Meter Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMeterGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the METER_REPORT command.
     * <p>
     * Meter Report
     *
     * @param meterType {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>ELECTRIC_METER
     *            <li>GAS_METER
     *            <li>WATER_METER
     *            </ul>
     * @param scale {@link Integer}
     * @param precision {@link Integer}
     * @param meterValue {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getMeterReport(String meterType, Integer scale, Integer precision, byte[] meterValue) {
        logger.debug("Creating command message METER_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(METER_REPORT);

        // Process 'Meter Type'
        boolean foundMeterType = false;
        for (Integer entry : constantMeterReportMeterType.keySet()) {
            if (constantMeterReportMeterType.get(entry).equals(meterType)) {
                outputData.write(entry);
                foundMeterType = true;
                break;
            }
        }
        if (!foundMeterType) {
            throw new IllegalArgumentException("Unknown constant value '" + meterType + "' for meterType");
        }

        // Process 'Properties1'
        // Size is used by 'Meter Value'
        int size = meterValue.length;
        int valProperties1 = 0;
        valProperties1 |= size & 0x07;
        valProperties1 |= ((scale << 3) & 0x18);
        valProperties1 |= ((precision << 5) & 0xE0);
        outputData.write(valProperties1);

        // Process 'Meter Value'
        if (meterValue != null) {
            try {
                outputData.write(meterValue);
            } catch (IOException e) {
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the METER_REPORT command.
     * <p>
     * Meter Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>METER_TYPE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>ELECTRIC_METER
     * <li>GAS_METER
     * <li>WATER_METER
     * </ul>
     * <li>SCALE {@link Integer}
     * <li>PRECISION {@link Integer}
     * <li>METER_VALUE {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMeterReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Meter Type'
        response.put("METER_TYPE", constantMeterReportMeterType.get(payload[msgOffset] & 0xff));
        msgOffset += 1;

        // Process 'Properties1'
        // Size is used by 'Meter Value'
        int varSize = payload[msgOffset] & 0x07;
        response.put("SCALE", Integer.valueOf(payload[msgOffset] & 0x18 >> 3));
        response.put("PRECISION", Integer.valueOf(payload[msgOffset] & 0xE0 >> 5));
        msgOffset += 1;

        // Process 'Meter Value'
        ByteArrayOutputStream valMeterValue = new ByteArrayOutputStream();
        for (int cntMeterValue = 0; cntMeterValue < varSize; cntMeterValue++) {
            valMeterValue.write(payload[msgOffset + cntMeterValue]);
        }
        response.put("METER_VALUE", valMeterValue.toByteArray());
        msgOffset += varSize;

        // Return the map of processed response data;
        return response;
    }
}
