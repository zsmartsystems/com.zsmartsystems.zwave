/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_DOOR_LOCK</b> version <b>3</b>.
 * <p>
 * Command Class Door Lock
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x62.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassDoorLockV3 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassDoorLockV3.class);

    /**
     * Integer command class key for COMMAND_CLASS_DOOR_LOCK
     */
    public final static int COMMAND_CLASS_KEY = 0x62;

    /**
     * Door Lock Operation Set Command Constant
     */
    public final static int DOOR_LOCK_OPERATION_SET = 0x01;
    /**
     * Door Lock Operation Get Command Constant
     */
    public final static int DOOR_LOCK_OPERATION_GET = 0x02;
    /**
     * Door Lock Operation Report Command Constant
     */
    public final static int DOOR_LOCK_OPERATION_REPORT = 0x03;
    /**
     * Door Lock Configuration Set Command Constant
     */
    public final static int DOOR_LOCK_CONFIGURATION_SET = 0x04;
    /**
     * Door Lock Configuration Get Command Constant
     */
    public final static int DOOR_LOCK_CONFIGURATION_GET = 0x05;
    /**
     * Door Lock Configuration Report Command Constant
     */
    public final static int DOOR_LOCK_CONFIGURATION_REPORT = 0x06;

    /**
     * Map holding constants for DoorLockOperationReportDuration
     */
    private static Map<Integer, String> constantDoorLockOperationReportDuration = new HashMap<Integer, String>();

    /**
     * Map holding constants for DoorLockConfigurationSetOperationType
     */
    private static Map<Integer, String> constantDoorLockConfigurationSetOperationType = new HashMap<Integer, String>();

    /**
     * Map holding constants for DoorLockConfigurationReportOperationType
     */
    private static Map<Integer, String> constantDoorLockConfigurationReportOperationType = new HashMap<Integer, String>();

    /**
     * Map holding constants for DoorLockOperationReportCurrentDoorLockMode
     */
    private static Map<Integer, String> constantDoorLockOperationReportCurrentDoorLockMode = new HashMap<Integer, String>();

    /**
     * Map holding constants for DoorLockOperationReportTargetDoorLockMode
     */
    private static Map<Integer, String> constantDoorLockOperationReportTargetDoorLockMode = new HashMap<Integer, String>();

    /**
     * Map holding constants for DoorLockOperationSetDoorLockMode
     */
    private static Map<Integer, String> constantDoorLockOperationSetDoorLockMode = new HashMap<Integer, String>();

    static {
        // Constants for DoorLockOperationReportDuration
        constantDoorLockOperationReportDuration.put(0xFE, "UNKNOWN_DURATION");
        constantDoorLockOperationReportDuration.put(0x00, "ALREADY_AT_THE_TARGET_VALUE");

        // Constants for DoorLockConfigurationSetOperationType
        constantDoorLockConfigurationSetOperationType.put(0x01, "CONSTANT_OPERATION");
        constantDoorLockConfigurationSetOperationType.put(0x02, "TIMED_OPERATION");

        // Constants for DoorLockConfigurationReportOperationType
        constantDoorLockConfigurationReportOperationType.put(0x01, "CONSTANT_OPERATION");
        constantDoorLockConfigurationReportOperationType.put(0x02, "TIMED_OPERATION");

        // Constants for DoorLockOperationReportCurrentDoorLockMode
        constantDoorLockOperationReportCurrentDoorLockMode.put(0xFE, "DOOR_LOCK_STATE_UNKNOWN");
        constantDoorLockOperationReportCurrentDoorLockMode.put(0x11, "DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES_WITH_TIMEOUT");
        constantDoorLockOperationReportCurrentDoorLockMode.put(0x00, "DOOR_UNSECURED");
        constantDoorLockOperationReportCurrentDoorLockMode.put(0xFF, "DOOR_SECURED");
        constantDoorLockOperationReportCurrentDoorLockMode.put(0x10, "DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES");
        constantDoorLockOperationReportCurrentDoorLockMode.put(0x01, "DOOR_UNSECURED_WITH_TIMEOUT");
        constantDoorLockOperationReportCurrentDoorLockMode.put(0x20, "DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES");
        constantDoorLockOperationReportCurrentDoorLockMode.put(0x21, "DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES_WITH_TIMEOUT");

        // Constants for DoorLockOperationReportTargetDoorLockMode
        constantDoorLockOperationReportTargetDoorLockMode.put(0xFE, "DOOR_LOCK_STATE_UNKNOWN");
        constantDoorLockOperationReportTargetDoorLockMode.put(0x11, "DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES_WITH_TIMEOUT");
        constantDoorLockOperationReportTargetDoorLockMode.put(0x00, "DOOR_UNSECURED");
        constantDoorLockOperationReportTargetDoorLockMode.put(0xFF, "DOOR_SECURED");
        constantDoorLockOperationReportTargetDoorLockMode.put(0x10, "DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES");
        constantDoorLockOperationReportTargetDoorLockMode.put(0x01, "DOOR_UNSECURED_WITH_TIMEOUT");
        constantDoorLockOperationReportTargetDoorLockMode.put(0x20, "DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES");
        constantDoorLockOperationReportTargetDoorLockMode.put(0x21, "DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES_WITH_TIMEOUT");

        // Constants for DoorLockOperationSetDoorLockMode
        constantDoorLockOperationSetDoorLockMode.put(0xFE, "DOOR_LOCK_STATE_UNKNOWN");
        constantDoorLockOperationSetDoorLockMode.put(0x11, "DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES_WITH_TIMEOUT");
        constantDoorLockOperationSetDoorLockMode.put(0x00, "DOOR_UNSECURED");
        constantDoorLockOperationSetDoorLockMode.put(0xFF, "DOOR_SECURED");
        constantDoorLockOperationSetDoorLockMode.put(0x10, "DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES");
        constantDoorLockOperationSetDoorLockMode.put(0x01, "DOOR_UNSECURED_WITH_TIMEOUT");
        constantDoorLockOperationSetDoorLockMode.put(0x20, "DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES");
        constantDoorLockOperationSetDoorLockMode.put(0x21, "DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES_WITH_TIMEOUT");
    }

    /**
     * Creates a new message with the DOOR_LOCK_OPERATION_SET command.
     * <p>
     * Door Lock Operation Set
     *
     * @param doorLockMode {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>DOOR_LOCK_STATE_UNKNOWN
     *            <li>DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES_WITH_TIMEOUT
     *            <li>DOOR_UNSECURED
     *            <li>DOOR_SECURED
     *            <li>DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES
     *            <li>DOOR_UNSECURED_WITH_TIMEOUT
     *            <li>DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES
     *            <li>DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES_WITH_TIMEOUT
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getDoorLockOperationSet(String doorLockMode) {
        logger.debug("Creating command message DOOR_LOCK_OPERATION_SET version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(DOOR_LOCK_OPERATION_SET);

        // Process 'Door Lock Mode'
        boolean foundDoorLockMode = false;
        for (Integer entry : constantDoorLockOperationSetDoorLockMode.keySet()) {
            if (constantDoorLockOperationSetDoorLockMode.get(entry).equals(doorLockMode)) {
                outputData.write(entry);
                foundDoorLockMode = true;
                break;
            }
        }
        if (!foundDoorLockMode) {
            throw new IllegalArgumentException("Unknown constant value '" + doorLockMode + "' for doorLockMode");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the DOOR_LOCK_OPERATION_SET command.
     * <p>
     * Door Lock Operation Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>DOOR_LOCK_MODE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>DOOR_LOCK_STATE_UNKNOWN
     * <li>DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES_WITH_TIMEOUT
     * <li>DOOR_UNSECURED
     * <li>DOOR_SECURED
     * <li>DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES
     * <li>DOOR_UNSECURED_WITH_TIMEOUT
     * <li>DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES
     * <li>DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES_WITH_TIMEOUT
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleDoorLockOperationSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Door Lock Mode'
        response.put("DOOR_LOCK_MODE", constantDoorLockOperationSetDoorLockMode.get(payload[2] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the DOOR_LOCK_OPERATION_GET command.
     * <p>
     * Door Lock Operation Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getDoorLockOperationGet() {
        logger.debug("Creating command message DOOR_LOCK_OPERATION_GET version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(DOOR_LOCK_OPERATION_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the DOOR_LOCK_OPERATION_GET command.
     * <p>
     * Door Lock Operation Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleDoorLockOperationGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the DOOR_LOCK_OPERATION_REPORT command.
     * <p>
     * Door Lock Operation Report
     *
     * @param currentDoorLockMode {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>DOOR_LOCK_STATE_UNKNOWN
     *            <li>DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES_WITH_TIMEOUT
     *            <li>DOOR_UNSECURED
     *            <li>DOOR_SECURED
     *            <li>DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES
     *            <li>DOOR_UNSECURED_WITH_TIMEOUT
     *            <li>DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES
     *            <li>DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES_WITH_TIMEOUT
     *            </ul>
     * @param insideDoorHandlesMode {@link Integer}
     * @param outsideDoorHandlesMode {@link Integer}
     * @param doorCondition {@link Integer}
     * @param lockTimeoutMinutes {@link Integer}
     * @param lockTimeoutSeconds {@link Integer}
     * @param targetDoorLockMode {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>DOOR_LOCK_STATE_UNKNOWN
     *            <li>DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES_WITH_TIMEOUT
     *            <li>DOOR_UNSECURED
     *            <li>DOOR_SECURED
     *            <li>DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES
     *            <li>DOOR_UNSECURED_WITH_TIMEOUT
     *            <li>DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES
     *            <li>DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES_WITH_TIMEOUT
     *            </ul>
     * @param duration {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>UNKNOWN_DURATION
     *            <li>ALREADY_AT_THE_TARGET_VALUE
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getDoorLockOperationReport(String currentDoorLockMode, Integer insideDoorHandlesMode,
            Integer outsideDoorHandlesMode, Integer doorCondition, Integer lockTimeoutMinutes,
            Integer lockTimeoutSeconds, String targetDoorLockMode, String duration) {
        logger.debug("Creating command message DOOR_LOCK_OPERATION_REPORT version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(DOOR_LOCK_OPERATION_REPORT);

        // Process 'Current Door Lock Mode'
        boolean foundCurrentDoorLockMode = false;
        for (Integer entry : constantDoorLockOperationReportCurrentDoorLockMode.keySet()) {
            if (constantDoorLockOperationReportCurrentDoorLockMode.get(entry).equals(currentDoorLockMode)) {
                outputData.write(entry);
                foundCurrentDoorLockMode = true;
                break;
            }
        }
        if (!foundCurrentDoorLockMode) {
            throw new IllegalArgumentException("Unknown constant value '" + currentDoorLockMode + "' for currentDoorLockMode");
        }

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= insideDoorHandlesMode & 0x0F;
        valProperties1 |= ((outsideDoorHandlesMode << 4) & 0xF0);
        outputData.write(valProperties1);

        // Process 'Door Condition'
        outputData.write(doorCondition);

        // Process 'Lock Timeout Minutes'
        outputData.write(lockTimeoutMinutes);

        // Process 'Lock Timeout Seconds'
        outputData.write(lockTimeoutSeconds);

        // Process 'Target Door Lock Mode'
        boolean foundTargetDoorLockMode = false;
        for (Integer entry : constantDoorLockOperationReportTargetDoorLockMode.keySet()) {
            if (constantDoorLockOperationReportTargetDoorLockMode.get(entry).equals(targetDoorLockMode)) {
                outputData.write(entry);
                foundTargetDoorLockMode = true;
                break;
            }
        }
        if (!foundTargetDoorLockMode) {
            throw new IllegalArgumentException("Unknown constant value '" + targetDoorLockMode + "' for targetDoorLockMode");
        }

        // Process 'Duration'
        boolean foundDuration = false;
        for (Integer entry : constantDoorLockOperationReportDuration.keySet()) {
            if (constantDoorLockOperationReportDuration.get(entry).equals(duration)) {
                outputData.write(entry);
                foundDuration = true;
                break;
            }
        }
        if (!foundDuration) {
            throw new IllegalArgumentException("Unknown constant value '" + duration + "' for duration");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the DOOR_LOCK_OPERATION_REPORT command.
     * <p>
     * Door Lock Operation Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>CURRENT_DOOR_LOCK_MODE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>DOOR_LOCK_STATE_UNKNOWN
     * <li>DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES_WITH_TIMEOUT
     * <li>DOOR_UNSECURED
     * <li>DOOR_SECURED
     * <li>DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES
     * <li>DOOR_UNSECURED_WITH_TIMEOUT
     * <li>DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES
     * <li>DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES_WITH_TIMEOUT
     * </ul>
     * <li>INSIDE_DOOR_HANDLES_MODE {@link Integer}
     * <li>OUTSIDE_DOOR_HANDLES_MODE {@link Integer}
     * <li>DOOR_CONDITION {@link Integer}
     * <li>LOCK_TIMEOUT_MINUTES {@link Integer}
     * <li>LOCK_TIMEOUT_SECONDS {@link Integer}
     * <li>TARGET_DOOR_LOCK_MODE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>DOOR_LOCK_STATE_UNKNOWN
     * <li>DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES_WITH_TIMEOUT
     * <li>DOOR_UNSECURED
     * <li>DOOR_SECURED
     * <li>DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES
     * <li>DOOR_UNSECURED_WITH_TIMEOUT
     * <li>DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES
     * <li>DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES_WITH_TIMEOUT
     * </ul>
     * <li>DURATION {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>UNKNOWN_DURATION
     * <li>ALREADY_AT_THE_TARGET_VALUE
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleDoorLockOperationReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Current Door Lock Mode'
        response.put("CURRENT_DOOR_LOCK_MODE", constantDoorLockOperationReportCurrentDoorLockMode.get(payload[2] & 0xff));

        // Process 'Properties1'
        response.put("INSIDE_DOOR_HANDLES_MODE", Integer.valueOf(payload[3] & 0x0F));
        response.put("OUTSIDE_DOOR_HANDLES_MODE", Integer.valueOf(payload[3] & 0xF0 >> 4));

        // Process 'Door Condition'
        response.put("DOOR_CONDITION", Integer.valueOf(payload[4]));

        // Process 'Lock Timeout Minutes'
        response.put("LOCK_TIMEOUT_MINUTES", Integer.valueOf(payload[5]));

        // Process 'Lock Timeout Seconds'
        response.put("LOCK_TIMEOUT_SECONDS", Integer.valueOf(payload[6]));

        // Process 'Target Door Lock Mode'
        response.put("TARGET_DOOR_LOCK_MODE", constantDoorLockOperationReportTargetDoorLockMode.get(payload[7] & 0xff));

        // Process 'Duration'
        response.put("DURATION", constantDoorLockOperationReportDuration.get(payload[8] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the DOOR_LOCK_CONFIGURATION_SET command.
     * <p>
     * Door Lock Configuration Set
     *
     * @param operationType {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>CONSTANT_OPERATION
     *            <li>TIMED_OPERATION
     *            </ul>
     * @param insideDoorHandlesState {@link Integer}
     * @param outsideDoorHandlesState {@link Integer}
     * @param lockTimeoutMinutes {@link Integer}
     * @param lockTimeoutSeconds {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getDoorLockConfigurationSet(String operationType, Integer insideDoorHandlesState,
            Integer outsideDoorHandlesState, Integer lockTimeoutMinutes, Integer lockTimeoutSeconds) {
        logger.debug("Creating command message DOOR_LOCK_CONFIGURATION_SET version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(DOOR_LOCK_CONFIGURATION_SET);

        // Process 'Operation Type'
        boolean foundOperationType = false;
        for (Integer entry : constantDoorLockConfigurationSetOperationType.keySet()) {
            if (constantDoorLockConfigurationSetOperationType.get(entry).equals(operationType)) {
                outputData.write(entry);
                foundOperationType = true;
                break;
            }
        }
        if (!foundOperationType) {
            throw new IllegalArgumentException("Unknown constant value '" + operationType + "' for operationType");
        }

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= insideDoorHandlesState & 0x0F;
        valProperties1 |= ((outsideDoorHandlesState << 4) & 0xF0);
        outputData.write(valProperties1);

        // Process 'Lock Timeout Minutes'
        outputData.write(lockTimeoutMinutes);

        // Process 'Lock Timeout Seconds'
        outputData.write(lockTimeoutSeconds);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the DOOR_LOCK_CONFIGURATION_SET command.
     * <p>
     * Door Lock Configuration Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>OPERATION_TYPE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>CONSTANT_OPERATION
     * <li>TIMED_OPERATION
     * </ul>
     * <li>INSIDE_DOOR_HANDLES_STATE {@link Integer}
     * <li>OUTSIDE_DOOR_HANDLES_STATE {@link Integer}
     * <li>LOCK_TIMEOUT_MINUTES {@link Integer}
     * <li>LOCK_TIMEOUT_SECONDS {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleDoorLockConfigurationSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Operation Type'
        response.put("OPERATION_TYPE", constantDoorLockConfigurationSetOperationType.get(payload[2] & 0xff));

        // Process 'Properties1'
        response.put("INSIDE_DOOR_HANDLES_STATE", Integer.valueOf(payload[3] & 0x0F));
        response.put("OUTSIDE_DOOR_HANDLES_STATE", Integer.valueOf(payload[3] & 0xF0 >> 4));

        // Process 'Lock Timeout Minutes'
        response.put("LOCK_TIMEOUT_MINUTES", Integer.valueOf(payload[4]));

        // Process 'Lock Timeout Seconds'
        response.put("LOCK_TIMEOUT_SECONDS", Integer.valueOf(payload[5]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the DOOR_LOCK_CONFIGURATION_GET command.
     * <p>
     * Door Lock Configuration Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getDoorLockConfigurationGet() {
        logger.debug("Creating command message DOOR_LOCK_CONFIGURATION_GET version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(DOOR_LOCK_CONFIGURATION_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the DOOR_LOCK_CONFIGURATION_GET command.
     * <p>
     * Door Lock Configuration Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleDoorLockConfigurationGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the DOOR_LOCK_CONFIGURATION_REPORT command.
     * <p>
     * Door Lock Configuration Report
     *
     * @param operationType {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>CONSTANT_OPERATION
     *            <li>TIMED_OPERATION
     *            </ul>
     * @param insideDoorHandlesState {@link Integer}
     * @param outsideDoorHandlesState {@link Integer}
     * @param lockTimeoutMinutes {@link Integer}
     * @param lockTimeoutSeconds {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getDoorLockConfigurationReport(String operationType, Integer insideDoorHandlesState,
            Integer outsideDoorHandlesState, Integer lockTimeoutMinutes, Integer lockTimeoutSeconds) {
        logger.debug("Creating command message DOOR_LOCK_CONFIGURATION_REPORT version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(DOOR_LOCK_CONFIGURATION_REPORT);

        // Process 'Operation Type'
        boolean foundOperationType = false;
        for (Integer entry : constantDoorLockConfigurationReportOperationType.keySet()) {
            if (constantDoorLockConfigurationReportOperationType.get(entry).equals(operationType)) {
                outputData.write(entry);
                foundOperationType = true;
                break;
            }
        }
        if (!foundOperationType) {
            throw new IllegalArgumentException("Unknown constant value '" + operationType + "' for operationType");
        }

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= insideDoorHandlesState & 0x0F;
        valProperties1 |= ((outsideDoorHandlesState << 4) & 0xF0);
        outputData.write(valProperties1);

        // Process 'Lock Timeout Minutes'
        outputData.write(lockTimeoutMinutes);

        // Process 'Lock Timeout Seconds'
        outputData.write(lockTimeoutSeconds);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the DOOR_LOCK_CONFIGURATION_REPORT command.
     * <p>
     * Door Lock Configuration Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>OPERATION_TYPE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>CONSTANT_OPERATION
     * <li>TIMED_OPERATION
     * </ul>
     * <li>INSIDE_DOOR_HANDLES_STATE {@link Integer}
     * <li>OUTSIDE_DOOR_HANDLES_STATE {@link Integer}
     * <li>LOCK_TIMEOUT_MINUTES {@link Integer}
     * <li>LOCK_TIMEOUT_SECONDS {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleDoorLockConfigurationReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Operation Type'
        response.put("OPERATION_TYPE", constantDoorLockConfigurationReportOperationType.get(payload[2] & 0xff));

        // Process 'Properties1'
        response.put("INSIDE_DOOR_HANDLES_STATE", Integer.valueOf(payload[3] & 0x0F));
        response.put("OUTSIDE_DOOR_HANDLES_STATE", Integer.valueOf(payload[3] & 0xF0 >> 4));

        // Process 'Lock Timeout Minutes'
        response.put("LOCK_TIMEOUT_MINUTES", Integer.valueOf(payload[4]));

        // Process 'Lock Timeout Seconds'
        response.put("LOCK_TIMEOUT_SECONDS", Integer.valueOf(payload[5]));

        // Return the map of processed response data;
        return response;
    }
}
