/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_SIMPLE_AV_CONTROL</b> version <b>1</b>.
 * <p>
 * Command Class Simple Av Control
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x94.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassSimpleAvControlV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassSimpleAvControlV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_SIMPLE_AV_CONTROL
     */
    public final static int COMMAND_CLASS_KEY = 0x94;

    /**
     * Simple Av Control Set Command Constant
     */
    public final static int SIMPLE_AV_CONTROL_SET = 0x01;
    /**
     * Simple Av Control Get Command Constant
     */
    public final static int SIMPLE_AV_CONTROL_GET = 0x02;
    /**
     * Simple Av Control Report Command Constant
     */
    public final static int SIMPLE_AV_CONTROL_REPORT = 0x03;
    /**
     * Simple Av Control Supported Get Command Constant
     */
    public final static int SIMPLE_AV_CONTROL_SUPPORTED_GET = 0x04;
    /**
     * Simple Av Control Supported Report Command Constant
     */
    public final static int SIMPLE_AV_CONTROL_SUPPORTED_REPORT = 0x05;


    /**
     * Creates a new message with the SIMPLE_AV_CONTROL_SET command.
     * <p>
     * Simple Av Control Set
     *
     * @param sequenceNumber {@link Integer}
     * @param keyAttributes {@link Integer}
     * @param itemId {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSimpleAvControlSet(Integer sequenceNumber, Integer keyAttributes, Integer itemId) {
        logger.debug("Creating command message SIMPLE_AV_CONTROL_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SIMPLE_AV_CONTROL_SET);

        // Process 'Sequence Number'
        outputData.write(sequenceNumber);

        // Process 'Properties1'
        outputData.write(keyAttributes & 0x07);

        // Process 'Item ID'
        outputData.write((itemId >> 8) & 0xff);
        outputData.write(itemId & 0xff);

        // Process 'vg'

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SIMPLE_AV_CONTROL_SET command.
     * <p>
     * Simple Av Control Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQUENCE_NUMBER {@link Integer}
     * <li>KEY_ATTRIBUTES {@link Integer}
     * <li>ITEM_ID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSimpleAvControlSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Sequence Number'
        response.put("SEQUENCE_NUMBER", Integer.valueOf(payload[2]));

        // Process 'Properties1'
        response.put("KEY_ATTRIBUTES", Integer.valueOf(payload[3] & 0x07));

        // Process 'Item ID'
        response.put("ITEM_ID", Integer.valueOf(((payload[4] & 0xff) << 8) + (payload[5] & 0xff)));

        // Process 'vg'

        // Create a list to hold the group vg
        List<Map<String, Object>> variantList = new ArrayList<Map<String, Object>>();

        int offset = 6;
        while (offset < payload.length) {
            // Create a map to hold the members of this variant
            Map<String, Object> variant = new HashMap<String, Object>();

            // Process 'Command'
            variant.put("COMMAND", Integer.valueOf(((payload[6] & 0xff) << 8) + (payload[7] & 0xff)));

        }

        // Add the variant list to the response
        response.put("VG", variantList);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SIMPLE_AV_CONTROL_GET command.
     * <p>
     * Simple Av Control Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSimpleAvControlGet() {
        logger.debug("Creating command message SIMPLE_AV_CONTROL_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SIMPLE_AV_CONTROL_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SIMPLE_AV_CONTROL_GET command.
     * <p>
     * Simple Av Control Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSimpleAvControlGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SIMPLE_AV_CONTROL_REPORT command.
     * <p>
     * Simple Av Control Report
     *
     * @param numberOfReports {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSimpleAvControlReport(Integer numberOfReports) {
        logger.debug("Creating command message SIMPLE_AV_CONTROL_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SIMPLE_AV_CONTROL_REPORT);

        // Process 'Number of reports'
        outputData.write(numberOfReports);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SIMPLE_AV_CONTROL_REPORT command.
     * <p>
     * Simple Av Control Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>NUMBER_OF_REPORTS {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSimpleAvControlReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Number of reports'
        response.put("NUMBER_OF_REPORTS", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SIMPLE_AV_CONTROL_SUPPORTED_GET command.
     * <p>
     * Simple Av Control Supported Get
     *
     * @param reportNo {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSimpleAvControlSupportedGet(Integer reportNo) {
        logger.debug("Creating command message SIMPLE_AV_CONTROL_SUPPORTED_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SIMPLE_AV_CONTROL_SUPPORTED_GET);

        // Process 'Report No'
        outputData.write(reportNo);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SIMPLE_AV_CONTROL_SUPPORTED_GET command.
     * <p>
     * Simple Av Control Supported Get
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>REPORT_NO {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSimpleAvControlSupportedGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Report No'
        response.put("REPORT_NO", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SIMPLE_AV_CONTROL_SUPPORTED_REPORT command.
     * <p>
     * Simple Av Control Supported Report
     *
     * @param reportNo {@link Integer}
     * @param bitMask {@link List<Integer>}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSimpleAvControlSupportedReport(Integer reportNo, List<Integer> bitMask) {
        logger.debug("Creating command message SIMPLE_AV_CONTROL_SUPPORTED_REPORT version 1");

        Collections.sort(bitMask);
        int lenBitMask = (bitMask.get(bitMask.size() - 1) / 8) + 1;

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SIMPLE_AV_CONTROL_SUPPORTED_REPORT);

        // Process 'Report No'
        outputData.write(reportNo);

        // Process 'Bit Mask'
        int valBitMask = 0;
        for (int cntBitMask = 1 ; cntBitMask < lenBitMask * 8 ; cntBitMask++) {
            valBitMask |= bitMask.contains(valBitMask) ? (1 << cntBitMask % 8) : 0;
            if (cntBitMask % 8 == 0) {
                outputData.write(valBitMask);
                valBitMask = 0;
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SIMPLE_AV_CONTROL_SUPPORTED_REPORT command.
     * <p>
     * Simple Av Control Supported Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>REPORT_NO {@link Integer}
     * <li>BIT_MASK {@link List}<{@link Integer}>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSimpleAvControlSupportedReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Report No'
        response.put("REPORT_NO", Integer.valueOf(payload[2]));

        // Process 'Bit Mask'
        List<Integer> responseBitMask = new ArrayList<Integer>();
        for (int cntBitMask = 0; cntBitMask < (payload.length - 3) * 8; cntBitMask++) {
            if ((payload[3 + (cntBitMask / 8)] & (1 << cntBitMask % 8)) == 0) {
                continue;
            }
            responseBitMask.add(cntBitMask);
        }
        response.put("BIT_MASK", responseBitMask);

        // Return the map of processed response data;
        return response;
    }
}
