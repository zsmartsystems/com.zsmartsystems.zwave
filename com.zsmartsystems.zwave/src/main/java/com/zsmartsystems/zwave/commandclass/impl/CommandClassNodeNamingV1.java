/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.lang.IllegalArgumentException;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_NODE_NAMING</b> version <b>1</b>.
 * <p>
 * Command Class Node Naming
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x77.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassNodeNamingV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassNodeNamingV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_NODE_NAMING
     */
    public final static int COMMAND_CLASS_KEY = 0x77;

    /**
     * Node Naming Node Name Set Command Constant
     */
    public final static int NODE_NAMING_NODE_NAME_SET = 0x01;
    /**
     * Node Naming Node Name Get Command Constant
     */
    public final static int NODE_NAMING_NODE_NAME_GET = 0x02;
    /**
     * Node Naming Node Name Report Command Constant
     */
    public final static int NODE_NAMING_NODE_NAME_REPORT = 0x03;
    /**
     * Node Naming Node Location Set Command Constant
     */
    public final static int NODE_NAMING_NODE_LOCATION_SET = 0x04;
    /**
     * Node Naming Node Location Get Command Constant
     */
    public final static int NODE_NAMING_NODE_LOCATION_GET = 0x05;
    /**
     * Node Naming Node Location Report Command Constant
     */
    public final static int NODE_NAMING_NODE_LOCATION_REPORT = 0x06;


    /**
     * Creates a new message with the NODE_NAMING_NODE_NAME_SET command.
     * <p>
     * Node Naming Node Name Set
     *
     * @param charPresentation {@link Integer}
     * @param nodeNameChar {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getNodeNamingNodeNameSet(Integer charPresentation, byte[] nodeNameChar) {
        logger.debug("Creating command message NODE_NAMING_NODE_NAME_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(NODE_NAMING_NODE_NAME_SET);

        // Process 'Level'
        outputData.write(charPresentation & 0x07);

        // Process 'Node name char'
        if (nodeNameChar != null) {
            if (nodeNameChar.length > 16) {
                throw new IllegalArgumentException("Length of array nodeNameChar exceeds maximum length of 16 bytes");
            }
            try {
                outputData.write(nodeNameChar);
            } catch (IOException e) {
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the NODE_NAMING_NODE_NAME_SET command.
     * <p>
     * Node Naming Node Name Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>CHAR_PRESENTATION {@link Integer}
     * <li>NODE_NAME_CHAR {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleNodeNamingNodeNameSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Level'
        response.put("CHAR_PRESENTATION", Integer.valueOf(payload[2] & 0x07));

        // Process 'Node name char'
        int lenNodeNameChar = Math.min(16, payload.length - 3);
        byte[] valNodeNameChar = new byte[lenNodeNameChar];
        for (int cntNodeNameChar = 0; cntNodeNameChar < lenNodeNameChar; cntNodeNameChar++) {
            valNodeNameChar[cntNodeNameChar] = payload[3 + cntNodeNameChar];
        }
        response.put("NODE_NAME_CHAR", valNodeNameChar);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the NODE_NAMING_NODE_NAME_GET command.
     * <p>
     * Node Naming Node Name Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getNodeNamingNodeNameGet() {
        logger.debug("Creating command message NODE_NAMING_NODE_NAME_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(NODE_NAMING_NODE_NAME_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the NODE_NAMING_NODE_NAME_GET command.
     * <p>
     * Node Naming Node Name Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleNodeNamingNodeNameGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the NODE_NAMING_NODE_NAME_REPORT command.
     * <p>
     * Node Naming Node Name Report
     *
     * @param charPresentation {@link Integer}
     * @param nodeNameChar {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getNodeNamingNodeNameReport(Integer charPresentation, byte[] nodeNameChar) {
        logger.debug("Creating command message NODE_NAMING_NODE_NAME_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(NODE_NAMING_NODE_NAME_REPORT);

        // Process 'Level'
        outputData.write(charPresentation & 0x07);

        // Process 'Node name char'
        if (nodeNameChar != null) {
            if (nodeNameChar.length > 16) {
                throw new IllegalArgumentException("Length of array nodeNameChar exceeds maximum length of 16 bytes");
            }
            try {
                outputData.write(nodeNameChar);
            } catch (IOException e) {
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the NODE_NAMING_NODE_NAME_REPORT command.
     * <p>
     * Node Naming Node Name Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>CHAR_PRESENTATION {@link Integer}
     * <li>NODE_NAME_CHAR {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleNodeNamingNodeNameReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Level'
        response.put("CHAR_PRESENTATION", Integer.valueOf(payload[2] & 0x07));

        // Process 'Node name char'
        int lenNodeNameChar = Math.min(16, payload.length - 3);
        byte[] valNodeNameChar = new byte[lenNodeNameChar];
        for (int cntNodeNameChar = 0; cntNodeNameChar < lenNodeNameChar; cntNodeNameChar++) {
            valNodeNameChar[cntNodeNameChar] = payload[3 + cntNodeNameChar];
        }
        response.put("NODE_NAME_CHAR", valNodeNameChar);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the NODE_NAMING_NODE_LOCATION_SET command.
     * <p>
     * Node Naming Node Location Set
     *
     * @param charPresentation {@link Integer}
     * @param nodeLocationChar {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getNodeNamingNodeLocationSet(Integer charPresentation, byte[] nodeLocationChar) {
        logger.debug("Creating command message NODE_NAMING_NODE_LOCATION_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(NODE_NAMING_NODE_LOCATION_SET);

        // Process 'Level'
        outputData.write(charPresentation & 0x07);

        // Process 'Node location char'
        if (nodeLocationChar != null) {
            if (nodeLocationChar.length > 16) {
                throw new IllegalArgumentException("Length of array nodeLocationChar exceeds maximum length of 16 bytes");
            }
            try {
                outputData.write(nodeLocationChar);
            } catch (IOException e) {
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the NODE_NAMING_NODE_LOCATION_SET command.
     * <p>
     * Node Naming Node Location Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>CHAR_PRESENTATION {@link Integer}
     * <li>NODE_LOCATION_CHAR {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleNodeNamingNodeLocationSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Level'
        response.put("CHAR_PRESENTATION", Integer.valueOf(payload[2] & 0x07));

        // Process 'Node location char'
        int lenNodeLocationChar = Math.min(16, payload.length - 3);
        byte[] valNodeLocationChar = new byte[lenNodeLocationChar];
        for (int cntNodeLocationChar = 0; cntNodeLocationChar < lenNodeLocationChar; cntNodeLocationChar++) {
            valNodeLocationChar[cntNodeLocationChar] = payload[3 + cntNodeLocationChar];
        }
        response.put("NODE_LOCATION_CHAR", valNodeLocationChar);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the NODE_NAMING_NODE_LOCATION_GET command.
     * <p>
     * Node Naming Node Location Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getNodeNamingNodeLocationGet() {
        logger.debug("Creating command message NODE_NAMING_NODE_LOCATION_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(NODE_NAMING_NODE_LOCATION_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the NODE_NAMING_NODE_LOCATION_GET command.
     * <p>
     * Node Naming Node Location Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleNodeNamingNodeLocationGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the NODE_NAMING_NODE_LOCATION_REPORT command.
     * <p>
     * Node Naming Node Location Report
     *
     * @param charPresentation {@link Integer}
     * @param nodeLocationChar {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getNodeNamingNodeLocationReport(Integer charPresentation, byte[] nodeLocationChar) {
        logger.debug("Creating command message NODE_NAMING_NODE_LOCATION_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(NODE_NAMING_NODE_LOCATION_REPORT);

        // Process 'Level'
        outputData.write(charPresentation & 0x07);

        // Process 'Node location char'
        if (nodeLocationChar != null) {
            if (nodeLocationChar.length > 16) {
                throw new IllegalArgumentException("Length of array nodeLocationChar exceeds maximum length of 16 bytes");
            }
            try {
                outputData.write(nodeLocationChar);
            } catch (IOException e) {
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the NODE_NAMING_NODE_LOCATION_REPORT command.
     * <p>
     * Node Naming Node Location Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>CHAR_PRESENTATION {@link Integer}
     * <li>NODE_LOCATION_CHAR {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleNodeNamingNodeLocationReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Level'
        response.put("CHAR_PRESENTATION", Integer.valueOf(payload[2] & 0x07));

        // Process 'Node location char'
        int lenNodeLocationChar = Math.min(16, payload.length - 3);
        byte[] valNodeLocationChar = new byte[lenNodeLocationChar];
        for (int cntNodeLocationChar = 0; cntNodeLocationChar < lenNodeLocationChar; cntNodeLocationChar++) {
            valNodeLocationChar[cntNodeLocationChar] = payload[3 + cntNodeLocationChar];
        }
        response.put("NODE_LOCATION_CHAR", valNodeLocationChar);

        // Return the map of processed response data;
        return response;
    }
}
