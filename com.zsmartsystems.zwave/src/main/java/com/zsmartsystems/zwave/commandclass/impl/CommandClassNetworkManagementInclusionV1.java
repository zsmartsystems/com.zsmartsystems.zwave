/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_NETWORK_MANAGEMENT_INCLUSION</b> version <b>1</b>.
 * <p>
 * Command Class Network Management Inclusion
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x34.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassNetworkManagementInclusionV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassNetworkManagementInclusionV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_NETWORK_MANAGEMENT_INCLUSION
     */
    public final static int COMMAND_CLASS_KEY = 0x34;

    /**
     * Node Add Command Constant
     */
    public final static int NODE_ADD = 0x01;
    /**
     * Node Add Status Command Constant
     */
    public final static int NODE_ADD_STATUS = 0x02;
    /**
     * Node Remove Command Constant
     */
    public final static int NODE_REMOVE = 0x03;
    /**
     * Node Remove Status Command Constant
     */
    public final static int NODE_REMOVE_STATUS = 0x04;
    /**
     * Failed Node Remove Command Constant
     */
    public final static int FAILED_NODE_REMOVE = 0x07;
    /**
     * Failed Node Remove Status Command Constant
     */
    public final static int FAILED_NODE_REMOVE_STATUS = 0x08;
    /**
     * Failed Node Replace Command Constant
     */
    public final static int FAILED_NODE_REPLACE = 0x09;
    /**
     * Failed Node Replace Status Command Constant
     */
    public final static int FAILED_NODE_REPLACE_STATUS = 0x0A;
    /**
     * Node Neighbor Update Request Command Constant
     */
    public final static int NODE_NEIGHBOR_UPDATE_REQUEST = 0x0B;
    /**
     * Node Neighbor Update Status Command Constant
     */
    public final static int NODE_NEIGHBOR_UPDATE_STATUS = 0x0C;
    /**
     * Return Route Assign Command Constant
     */
    public final static int RETURN_ROUTE_ASSIGN = 0x0D;
    /**
     * Return Route Assign Complete Command Constant
     */
    public final static int RETURN_ROUTE_ASSIGN_COMPLETE = 0x0E;
    /**
     * Return Route Delete Command Constant
     */
    public final static int RETURN_ROUTE_DELETE = 0x0F;
    /**
     * Return Route Delete Complete Command Constant
     */
    public final static int RETURN_ROUTE_DELETE_COMPLETE = 0x10;

    /**
     * Map holding constants for NodeAddStatusProperties1
     */
    private static Map<Integer, String> constantNodeAddStatusProperties1 = new HashMap<Integer, String>();

    /**
     * Map holding constants for FailedNodeReplaceStatusStatus
     */
    private static Map<Integer, String> constantFailedNodeReplaceStatusStatus = new HashMap<Integer, String>();

    /**
     * Map holding constants for NodeAddStatusProperties2
     */
    private static Map<Integer, String> constantNodeAddStatusProperties2 = new HashMap<Integer, String>();

    /**
     * Map holding constants for ReturnRouteAssignCompleteStatus
     */
    private static Map<Integer, String> constantReturnRouteAssignCompleteStatus = new HashMap<Integer, String>();

    /**
     * Map holding constants for ReturnRouteDeleteCompleteStatus
     */
    private static Map<Integer, String> constantReturnRouteDeleteCompleteStatus = new HashMap<Integer, String>();

    /**
     * Map holding constants for FailedNodeReplaceTxOptions
     */
    private static Map<Integer, String> constantFailedNodeReplaceTxOptions = new HashMap<Integer, String>();

    /**
     * Map holding constants for NodeAddTxOptions
     */
    private static Map<Integer, String> constantNodeAddTxOptions = new HashMap<Integer, String>();

    /**
     * Map holding constants for NodeRemoveMode
     */
    private static Map<Integer, String> constantNodeRemoveMode = new HashMap<Integer, String>();

    /**
     * Map holding constants for FailedNodeRemoveStatusStatus
     */
    private static Map<Integer, String> constantFailedNodeRemoveStatusStatus = new HashMap<Integer, String>();

    /**
     * Map holding constants for NodeNeighborUpdateStatusStatus
     */
    private static Map<Integer, String> constantNodeNeighborUpdateStatusStatus = new HashMap<Integer, String>();

    /**
     * Map holding constants for NodeAddMode
     */
    private static Map<Integer, String> constantNodeAddMode = new HashMap<Integer, String>();

    /**
     * Map holding constants for NodeRemoveStatusStatus
     */
    private static Map<Integer, String> constantNodeRemoveStatusStatus = new HashMap<Integer, String>();

    /**
     * Map holding constants for NodeAddStatusStatus
     */
    private static Map<Integer, String> constantNodeAddStatusStatus = new HashMap<Integer, String>();

    static {
        // Constants for NodeAddStatusProperties1
        constantNodeAddStatusProperties1.put(0x80, "LISTENING");

        // Constants for FailedNodeReplaceStatusStatus
        constantFailedNodeReplaceStatusStatus.put(0x04, "DONE");
        constantFailedNodeReplaceStatusStatus.put(0x05, "FAILED_NODE_REPLACE_FAIL");
        constantFailedNodeReplaceStatusStatus.put(0x09, "FAILED_NODE_REPLACE_SECURITY_FAILED");

        // Constants for NodeAddStatusProperties2
        constantNodeAddStatusProperties2.put(0x80, "OPT");

        // Constants for ReturnRouteAssignCompleteStatus
        constantReturnRouteAssignCompleteStatus.put(0x00, "TRANSMIT_COMPLETE_OK");
        constantReturnRouteAssignCompleteStatus.put(0x01, "TRANSMIT_COMPLETE_NO_ACK");
        constantReturnRouteAssignCompleteStatus.put(0x02, "TRANSMIT_COMPLETE_FAIL");

        // Constants for ReturnRouteDeleteCompleteStatus
        constantReturnRouteDeleteCompleteStatus.put(0x00, "TRANSMIT_COMPLETE_OK");
        constantReturnRouteDeleteCompleteStatus.put(0x01, "TRANSMIT_COMPLETE_NO_ACK");
        constantReturnRouteDeleteCompleteStatus.put(0x02, "TRANSMIT_COMPLETE_FAIL");

        // Constants for FailedNodeReplaceTxOptions
        constantFailedNodeReplaceTxOptions.put(0x10, "NO_ROUTE");
        constantFailedNodeReplaceTxOptions.put(0x01, "ACK");
        constantFailedNodeReplaceTxOptions.put(0x20, "EXPLORE");
        constantFailedNodeReplaceTxOptions.put(0x02, "LOW_POWER");
        constantFailedNodeReplaceTxOptions.put(0x40, "NO_RETRANSMISSION");
        constantFailedNodeReplaceTxOptions.put(0x04, "AUTO_ROUTE");
        constantFailedNodeReplaceTxOptions.put(0x80, "HIGH_POWER");

        // Constants for NodeAddTxOptions
        constantNodeAddTxOptions.put(0x10, "NO_ROUTE");
        constantNodeAddTxOptions.put(0x01, "ACK");
        constantNodeAddTxOptions.put(0x20, "EXPLORE");
        constantNodeAddTxOptions.put(0x02, "LOW_POWER");
        constantNodeAddTxOptions.put(0x40, "NO_RETRANSMISSION");
        constantNodeAddTxOptions.put(0x04, "AUTO_ROUTE");
        constantNodeAddTxOptions.put(0x80, "HIGH_POWER");

        // Constants for NodeRemoveMode
        constantNodeRemoveMode.put(0x01, "NODE_REMOVE_ANY");
        constantNodeRemoveMode.put(0x02, "NODE_REMOVE_CONTROLLER");
        constantNodeRemoveMode.put(0x03, "NODE_REMOVE_SLAVE");
        constantNodeRemoveMode.put(0x05, "NODE_REMOVE_STOP");

        // Constants for FailedNodeRemoveStatusStatus
        constantFailedNodeRemoveStatusStatus.put(0x00, "FAILED_NODE_NOT_FOUND");
        constantFailedNodeRemoveStatusStatus.put(0x01, "DONE");
        constantFailedNodeRemoveStatusStatus.put(0x02, "FAILED_NODE_REMOVE_FAIL");

        // Constants for NodeNeighborUpdateStatusStatus
        constantNodeNeighborUpdateStatusStatus.put(0x22, "NEIGHBOR_UPDATE_STATUS_DONE");
        constantNodeNeighborUpdateStatusStatus.put(0x23, "NEIGHBOR_UPDATE_STATUS_FAIL");

        // Constants for NodeAddMode
        constantNodeAddMode.put(0x01, "NODE_ADD_ANY");
        constantNodeAddMode.put(0x02, "NODE_ADD_CONTROLLER");
        constantNodeAddMode.put(0x03, "NODE_ADD_SLAVE");
        constantNodeAddMode.put(0x04, "NODE_ADD_EXISTING");
        constantNodeAddMode.put(0x05, "NODE_ADD_STOP");
        constantNodeAddMode.put(0x06, "NODE_ADD_STOP_FAILED");

        // Constants for NodeRemoveStatusStatus
        constantNodeRemoveStatusStatus.put(0x06, "NODE_REMOVE_STATUS_DONE");
        constantNodeRemoveStatusStatus.put(0x07, "NODE_REMOVE_STATUS_FAILED");

        // Constants for NodeAddStatusStatus
        constantNodeAddStatusStatus.put(0x06, "NODE_ADD_STATUS_DONE");
        constantNodeAddStatusStatus.put(0x07, "NODE_ADD_STATUS_FAILED");
        constantNodeAddStatusStatus.put(0x09, "NODE_ADD_STATUS_SECURITY_FAILED");
    }

    /**
     * Creates a new message with the NODE_ADD command.
     * <p>
     * Node Add
     *
     * @param seqNo {@link Integer}
     * @param mode {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>NODE_ADD_ANY
     *            <li>NODE_ADD_CONTROLLER
     *            <li>NODE_ADD_SLAVE
     *            <li>NODE_ADD_EXISTING
     *            <li>NODE_ADD_STOP
     *            <li>NODE_ADD_STOP_FAILED
     *            </ul>
     * @param txOptions {@link List<String>}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>NO_ROUTE
     *            <li>ACK
     *            <li>EXPLORE
     *            <li>LOW_POWER
     *            <li>NO_RETRANSMISSION
     *            <li>AUTO_ROUTE
     *            <li>HIGH_POWER
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getNodeAdd(Integer seqNo, String mode, List<String> txOptions) {
        logger.debug("Creating command message NODE_ADD version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(NODE_ADD);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Reserved'
        outputData.write(0);

        // Process 'Mode'
        boolean foundMode = false;
        for (Integer entry : constantNodeAddMode.keySet()) {
            if (constantNodeAddMode.get(entry).equals(mode)) {
                outputData.write(entry);
                foundMode = true;
                break;
            }
        }
        if (!foundMode) {
            throw new IllegalArgumentException("Unknown constant value '" + mode + "' for mode");
        }

        // Process 'tx Options'
        int valTxOptions = 0;
        for (String value : txOptions) {
            boolean foundTxOptions = false;
            for (Integer entry : constantNodeAddTxOptions.keySet()) {
                if (constantNodeAddTxOptions.get(entry).equals(value)) {
                    foundTxOptions = true;
                    valTxOptions += entry;
                    break;
                }
            }
            if (!foundTxOptions) {
                throw new IllegalArgumentException("Unknown constant value '" + txOptions + "' for txOptions");
            }
        }
        outputData.write(valTxOptions);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the NODE_ADD command.
     * <p>
     * Node Add
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>MODE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>NODE_ADD_ANY
     * <li>NODE_ADD_CONTROLLER
     * <li>NODE_ADD_SLAVE
     * <li>NODE_ADD_EXISTING
     * <li>NODE_ADD_STOP
     * <li>NODE_ADD_STOP_FAILED
     * </ul>
     * <li>TX_OPTIONS {@link List}<{@link String}>
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>NO_ROUTE
     * <li>ACK
     * <li>EXPLORE
     * <li>LOW_POWER
     * <li>NO_RETRANSMISSION
     * <li>AUTO_ROUTE
     * <li>HIGH_POWER
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleNodeAdd(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", Integer.valueOf(payload[2]));

        // Process 'Mode'
        response.put("MODE", constantNodeAddMode.get(payload[4] & 0xff));

        // Process 'tx Options'
        List<String> responseTxOptions = new ArrayList<String>();
        int lenTxOptions = 1;
        for (int cntTxOptions = 0; cntTxOptions < lenTxOptions; cntTxOptions++) {
            if ((payload[5 + (cntTxOptions / 8)] & (1 << cntTxOptions % 8)) == 0) {
                continue;
            }
            responseTxOptions.add(constantNodeAddTxOptions.get(cntTxOptions));
        }
        response.put("TX_OPTIONS", responseTxOptions);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the NODE_ADD_STATUS command.
     * <p>
     * Node Add Status
     *
     * @param seqNo {@link Integer}
     * @param status {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>NODE_ADD_STATUS_DONE
     *            <li>NODE_ADD_STATUS_FAILED
     *            <li>NODE_ADD_STATUS_SECURITY_FAILED
     *            </ul>
     * @param newNodeId {@link Integer}
     * @param nodeInfoLength {@link Integer}
     * @param capability {@link Integer}
     * @param listening {@link Boolean}
     * @param security {@link Integer}
     * @param opt {@link Boolean}
     * @param basicDeviceClass {@link Integer}
     * @param genericDeviceClass {@link Integer}
     * @param specificDeviceClass {@link Integer}
     * @param commandClass {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getNodeAddStatus(Integer seqNo, String status, Integer newNodeId, Integer nodeInfoLength,
            Integer capability, Boolean listening, Integer security, Boolean opt, Integer basicDeviceClass,
            Integer genericDeviceClass, Integer specificDeviceClass, byte[] commandClass) {
        logger.debug("Creating command message NODE_ADD_STATUS version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(NODE_ADD_STATUS);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Status'
        boolean foundStatus = false;
        for (Integer entry : constantNodeAddStatusStatus.keySet()) {
            if (constantNodeAddStatusStatus.get(entry).equals(status)) {
                outputData.write(entry);
                foundStatus = true;
                break;
            }
        }
        if (!foundStatus) {
            throw new IllegalArgumentException("Unknown constant value '" + status + "' for status");
        }

        // Process 'Reserved'
        outputData.write(0);

        // Process 'New Node ID'
        // Check the node number boundary
        if (newNodeId < 1 || newNodeId > 232) {
            logger.debug("Node number is out of bounds {}", newNodeId);
            return null;
        }
        outputData.write(newNodeId);

        // Process 'Node Info Length'
        outputData.write(nodeInfoLength);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= capability & 0x7F;
        valProperties1 |= listening ? 0x80 : 0;
        outputData.write(valProperties1);

        // Process 'Properties2'
        int valProperties2 = 0;
        valProperties2 |= security & 0x7F;
        valProperties2 |= opt ? 0x80 : 0;
        outputData.write(valProperties2);

        // Process 'Basic Device Class'
        outputData.write(basicDeviceClass);

        // Process 'Generic Device Class'
        outputData.write(genericDeviceClass);

        // Process 'Specific Device Class'
        outputData.write(specificDeviceClass);

        // Process 'Command Class'
        if (commandClass != null) {
            try {
                outputData.write(commandClass);
            } catch (IOException e) {
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the NODE_ADD_STATUS command.
     * <p>
     * Node Add Status
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>STATUS {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>NODE_ADD_STATUS_DONE
     * <li>NODE_ADD_STATUS_FAILED
     * <li>NODE_ADD_STATUS_SECURITY_FAILED
     * </ul>
     * <li>NEW_NODE_ID {@link Integer}
     * <li>NODE_INFO_LENGTH {@link Integer}
     * <li>CAPABILITY {@link Integer}
     * <li>LISTENING {@link Boolean}
     * <li>SECURITY {@link Integer}
     * <li>OPT {@link Boolean}
     * <li>BASIC_DEVICE_CLASS {@link Integer}
     * <li>GENERIC_DEVICE_CLASS {@link Integer}
     * <li>SPECIFIC_DEVICE_CLASS {@link Integer}
     * <li>COMMAND_CLASS {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleNodeAddStatus(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Seq. No'
        response.put("SEQ_NO", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Status'
        response.put("STATUS", constantNodeAddStatusStatus.get(payload[msgOffset] & 0xff));
        msgOffset += 1;

        msgOffset += 1;

        // Process 'New Node ID'
        response.put("NEW_NODE_ID", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Node Info Length'
        response.put("NODE_INFO_LENGTH", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Properties1'
        response.put("CAPABILITY", Integer.valueOf(payload[msgOffset] & 0x7F));
        response.put("LISTENING", Boolean.valueOf((payload[msgOffset] & 0x80) != 0));
        msgOffset += 1;

        // Process 'Properties2'
        response.put("SECURITY", Integer.valueOf(payload[msgOffset] & 0x7F));
        response.put("OPT", Boolean.valueOf((payload[msgOffset] & 0x80) != 0));
        msgOffset += 1;

        // Process 'Basic Device Class'
        response.put("BASIC_DEVICE_CLASS", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Generic Device Class'
        response.put("GENERIC_DEVICE_CLASS", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Specific Device Class'
        response.put("SPECIFIC_DEVICE_CLASS", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Command Class'
        ByteArrayOutputStream valCommandClass = new ByteArrayOutputStream();
        while (msgOffset < payload.length) {
            valCommandClass.write(payload[msgOffset]);
            msgOffset++;
        }
        response.put("COMMAND_CLASS", valCommandClass);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the NODE_REMOVE command.
     * <p>
     * Node Remove
     *
     * @param seqNo {@link Integer}
     * @param mode {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>NODE_REMOVE_ANY
     *            <li>NODE_REMOVE_CONTROLLER
     *            <li>NODE_REMOVE_SLAVE
     *            <li>NODE_REMOVE_STOP
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getNodeRemove(Integer seqNo, String mode) {
        logger.debug("Creating command message NODE_REMOVE version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(NODE_REMOVE);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Reserved'
        outputData.write(0);

        // Process 'Mode'
        boolean foundMode = false;
        for (Integer entry : constantNodeRemoveMode.keySet()) {
            if (constantNodeRemoveMode.get(entry).equals(mode)) {
                outputData.write(entry);
                foundMode = true;
                break;
            }
        }
        if (!foundMode) {
            throw new IllegalArgumentException("Unknown constant value '" + mode + "' for mode");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the NODE_REMOVE command.
     * <p>
     * Node Remove
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>MODE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>NODE_REMOVE_ANY
     * <li>NODE_REMOVE_CONTROLLER
     * <li>NODE_REMOVE_SLAVE
     * <li>NODE_REMOVE_STOP
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleNodeRemove(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", Integer.valueOf(payload[2]));

        // Process 'Mode'
        response.put("MODE", constantNodeRemoveMode.get(payload[4] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the NODE_REMOVE_STATUS command.
     * <p>
     * Node Remove Status
     *
     * @param seqNo {@link Integer}
     * @param status {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>NODE_REMOVE_STATUS_DONE
     *            <li>NODE_REMOVE_STATUS_FAILED
     *            </ul>
     * @param nodeid {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getNodeRemoveStatus(Integer seqNo, String status, Integer nodeid) {
        logger.debug("Creating command message NODE_REMOVE_STATUS version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(NODE_REMOVE_STATUS);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Status'
        boolean foundStatus = false;
        for (Integer entry : constantNodeRemoveStatusStatus.keySet()) {
            if (constantNodeRemoveStatusStatus.get(entry).equals(status)) {
                outputData.write(entry);
                foundStatus = true;
                break;
            }
        }
        if (!foundStatus) {
            throw new IllegalArgumentException("Unknown constant value '" + status + "' for status");
        }

        // Process 'NodeID'
        // Check the node number boundary
        if (nodeid < 1 || nodeid > 232) {
            logger.debug("Node number is out of bounds {}", nodeid);
            return null;
        }
        outputData.write(nodeid);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the NODE_REMOVE_STATUS command.
     * <p>
     * Node Remove Status
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>STATUS {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>NODE_REMOVE_STATUS_DONE
     * <li>NODE_REMOVE_STATUS_FAILED
     * </ul>
     * <li>NODEID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleNodeRemoveStatus(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", Integer.valueOf(payload[2]));

        // Process 'Status'
        response.put("STATUS", constantNodeRemoveStatusStatus.get(payload[3] & 0xff));

        // Process 'NodeID'
        response.put("NODEID", Integer.valueOf(payload[4]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the FAILED_NODE_REMOVE command.
     * <p>
     * Failed Node Remove
     *
     * @param seqNo {@link Integer}
     * @param nodeId {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getFailedNodeRemove(Integer seqNo, Integer nodeId) {
        logger.debug("Creating command message FAILED_NODE_REMOVE version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(FAILED_NODE_REMOVE);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Node ID'
        // Check the node number boundary
        if (nodeId < 1 || nodeId > 232) {
            logger.debug("Node number is out of bounds {}", nodeId);
            return null;
        }
        outputData.write(nodeId);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the FAILED_NODE_REMOVE command.
     * <p>
     * Failed Node Remove
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>NODE_ID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleFailedNodeRemove(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", Integer.valueOf(payload[2]));

        // Process 'Node ID'
        response.put("NODE_ID", Integer.valueOf(payload[3]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the FAILED_NODE_REMOVE_STATUS command.
     * <p>
     * Failed Node Remove Status
     *
     * @param seqNo {@link Integer}
     * @param status {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>FAILED_NODE_NOT_FOUND
     *            <li>DONE
     *            <li>FAILED_NODE_REMOVE_FAIL
     *            </ul>
     * @param nodeId {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getFailedNodeRemoveStatus(Integer seqNo, String status, Integer nodeId) {
        logger.debug("Creating command message FAILED_NODE_REMOVE_STATUS version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(FAILED_NODE_REMOVE_STATUS);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Status'
        boolean foundStatus = false;
        for (Integer entry : constantFailedNodeRemoveStatusStatus.keySet()) {
            if (constantFailedNodeRemoveStatusStatus.get(entry).equals(status)) {
                outputData.write(entry);
                foundStatus = true;
                break;
            }
        }
        if (!foundStatus) {
            throw new IllegalArgumentException("Unknown constant value '" + status + "' for status");
        }

        // Process 'Node ID'
        // Check the node number boundary
        if (nodeId < 1 || nodeId > 232) {
            logger.debug("Node number is out of bounds {}", nodeId);
            return null;
        }
        outputData.write(nodeId);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the FAILED_NODE_REMOVE_STATUS command.
     * <p>
     * Failed Node Remove Status
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>STATUS {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>FAILED_NODE_NOT_FOUND
     * <li>DONE
     * <li>FAILED_NODE_REMOVE_FAIL
     * </ul>
     * <li>NODE_ID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleFailedNodeRemoveStatus(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", Integer.valueOf(payload[2]));

        // Process 'Status'
        response.put("STATUS", constantFailedNodeRemoveStatusStatus.get(payload[3] & 0xff));

        // Process 'Node ID'
        response.put("NODE_ID", Integer.valueOf(payload[4]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the FAILED_NODE_REPLACE command.
     * <p>
     * Failed Node Replace
     *
     * @param seqNo {@link Integer}
     * @param nodeId {@link Integer}
     * @param txOptions {@link List<String>}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>NO_ROUTE
     *            <li>ACK
     *            <li>EXPLORE
     *            <li>LOW_POWER
     *            <li>NO_RETRANSMISSION
     *            <li>AUTO_ROUTE
     *            <li>HIGH_POWER
     *            </ul>
     * @param mode {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getFailedNodeReplace(Integer seqNo, Integer nodeId, List<String> txOptions, Integer mode) {
        logger.debug("Creating command message FAILED_NODE_REPLACE version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(FAILED_NODE_REPLACE);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Node ID'
        // Check the node number boundary
        if (nodeId < 1 || nodeId > 232) {
            logger.debug("Node number is out of bounds {}", nodeId);
            return null;
        }
        outputData.write(nodeId);

        // Process 'tx Options'
        int valTxOptions = 0;
        for (String value : txOptions) {
            boolean foundTxOptions = false;
            for (Integer entry : constantFailedNodeReplaceTxOptions.keySet()) {
                if (constantFailedNodeReplaceTxOptions.get(entry).equals(value)) {
                    foundTxOptions = true;
                    valTxOptions += entry;
                    break;
                }
            }
            if (!foundTxOptions) {
                throw new IllegalArgumentException("Unknown constant value '" + txOptions + "' for txOptions");
            }
        }
        outputData.write(valTxOptions);

        // Process 'Mode'
        outputData.write(mode);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the FAILED_NODE_REPLACE command.
     * <p>
     * Failed Node Replace
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>NODE_ID {@link Integer}
     * <li>TX_OPTIONS {@link List}<{@link String}>
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>NO_ROUTE
     * <li>ACK
     * <li>EXPLORE
     * <li>LOW_POWER
     * <li>NO_RETRANSMISSION
     * <li>AUTO_ROUTE
     * <li>HIGH_POWER
     * </ul>
     * <li>MODE {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleFailedNodeReplace(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", Integer.valueOf(payload[2]));

        // Process 'Node ID'
        response.put("NODE_ID", Integer.valueOf(payload[3]));

        // Process 'tx Options'
        List<String> responseTxOptions = new ArrayList<String>();
        int lenTxOptions = 1;
        for (int cntTxOptions = 0; cntTxOptions < lenTxOptions; cntTxOptions++) {
            if ((payload[4 + (cntTxOptions / 8)] & (1 << cntTxOptions % 8)) == 0) {
                continue;
            }
            responseTxOptions.add(constantFailedNodeReplaceTxOptions.get(cntTxOptions));
        }
        response.put("TX_OPTIONS", responseTxOptions);

        // Process 'Mode'
        response.put("MODE", Integer.valueOf(payload[5]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the FAILED_NODE_REPLACE_STATUS command.
     * <p>
     * Failed Node Replace Status
     *
     * @param seqNo {@link Integer}
     * @param status {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>DONE
     *            <li>FAILED_NODE_REPLACE_FAIL
     *            <li>FAILED_NODE_REPLACE_SECURITY_FAILED
     *            </ul>
     * @param nodeId {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getFailedNodeReplaceStatus(Integer seqNo, String status, Integer nodeId) {
        logger.debug("Creating command message FAILED_NODE_REPLACE_STATUS version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(FAILED_NODE_REPLACE_STATUS);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Status'
        boolean foundStatus = false;
        for (Integer entry : constantFailedNodeReplaceStatusStatus.keySet()) {
            if (constantFailedNodeReplaceStatusStatus.get(entry).equals(status)) {
                outputData.write(entry);
                foundStatus = true;
                break;
            }
        }
        if (!foundStatus) {
            throw new IllegalArgumentException("Unknown constant value '" + status + "' for status");
        }

        // Process 'Node ID'
        // Check the node number boundary
        if (nodeId < 1 || nodeId > 232) {
            logger.debug("Node number is out of bounds {}", nodeId);
            return null;
        }
        outputData.write(nodeId);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the FAILED_NODE_REPLACE_STATUS command.
     * <p>
     * Failed Node Replace Status
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>STATUS {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>DONE
     * <li>FAILED_NODE_REPLACE_FAIL
     * <li>FAILED_NODE_REPLACE_SECURITY_FAILED
     * </ul>
     * <li>NODE_ID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleFailedNodeReplaceStatus(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", Integer.valueOf(payload[2]));

        // Process 'Status'
        response.put("STATUS", constantFailedNodeReplaceStatusStatus.get(payload[3] & 0xff));

        // Process 'Node ID'
        response.put("NODE_ID", Integer.valueOf(payload[4]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the NODE_NEIGHBOR_UPDATE_REQUEST command.
     * <p>
     * Node Neighbor Update Request
     *
     * @param seqNo {@link Integer}
     * @param nodeId {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getNodeNeighborUpdateRequest(Integer seqNo, Integer nodeId) {
        logger.debug("Creating command message NODE_NEIGHBOR_UPDATE_REQUEST version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(NODE_NEIGHBOR_UPDATE_REQUEST);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Node ID'
        // Check the node number boundary
        if (nodeId < 1 || nodeId > 232) {
            logger.debug("Node number is out of bounds {}", nodeId);
            return null;
        }
        outputData.write(nodeId);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the NODE_NEIGHBOR_UPDATE_REQUEST command.
     * <p>
     * Node Neighbor Update Request
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>NODE_ID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleNodeNeighborUpdateRequest(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", Integer.valueOf(payload[2]));

        // Process 'Node ID'
        response.put("NODE_ID", Integer.valueOf(payload[3]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the NODE_NEIGHBOR_UPDATE_STATUS command.
     * <p>
     * Node Neighbor Update Status
     *
     * @param seqNo {@link Integer}
     * @param status {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>NEIGHBOR_UPDATE_STATUS_DONE
     *            <li>NEIGHBOR_UPDATE_STATUS_FAIL
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getNodeNeighborUpdateStatus(Integer seqNo, String status) {
        logger.debug("Creating command message NODE_NEIGHBOR_UPDATE_STATUS version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(NODE_NEIGHBOR_UPDATE_STATUS);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Status'
        boolean foundStatus = false;
        for (Integer entry : constantNodeNeighborUpdateStatusStatus.keySet()) {
            if (constantNodeNeighborUpdateStatusStatus.get(entry).equals(status)) {
                outputData.write(entry);
                foundStatus = true;
                break;
            }
        }
        if (!foundStatus) {
            throw new IllegalArgumentException("Unknown constant value '" + status + "' for status");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the NODE_NEIGHBOR_UPDATE_STATUS command.
     * <p>
     * Node Neighbor Update Status
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>STATUS {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>NEIGHBOR_UPDATE_STATUS_DONE
     * <li>NEIGHBOR_UPDATE_STATUS_FAIL
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleNodeNeighborUpdateStatus(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", Integer.valueOf(payload[2]));

        // Process 'Status'
        response.put("STATUS", constantNodeNeighborUpdateStatusStatus.get(payload[3] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the RETURN_ROUTE_ASSIGN command.
     * <p>
     * Return Route Assign
     *
     * @param seqNo {@link Integer}
     * @param sourceNodeId {@link Integer}
     * @param destinationNodeId {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getReturnRouteAssign(Integer seqNo, Integer sourceNodeId, Integer destinationNodeId) {
        logger.debug("Creating command message RETURN_ROUTE_ASSIGN version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(RETURN_ROUTE_ASSIGN);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Source Node ID'
        // Check the node number boundary
        if (sourceNodeId < 1 || sourceNodeId > 232) {
            logger.debug("Node number is out of bounds {}", sourceNodeId);
            return null;
        }
        outputData.write(sourceNodeId);

        // Process 'Destination Node ID'
        // Check the node number boundary
        if (destinationNodeId < 1 || destinationNodeId > 232) {
            logger.debug("Node number is out of bounds {}", destinationNodeId);
            return null;
        }
        outputData.write(destinationNodeId);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the RETURN_ROUTE_ASSIGN command.
     * <p>
     * Return Route Assign
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>SOURCE_NODE_ID {@link Integer}
     * <li>DESTINATION_NODE_ID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleReturnRouteAssign(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", Integer.valueOf(payload[2]));

        // Process 'Source Node ID'
        response.put("SOURCE_NODE_ID", Integer.valueOf(payload[3]));

        // Process 'Destination Node ID'
        response.put("DESTINATION_NODE_ID", Integer.valueOf(payload[4]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the RETURN_ROUTE_ASSIGN_COMPLETE command.
     * <p>
     * Return Route Assign Complete
     *
     * @param seqNo {@link Integer}
     * @param status {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>TRANSMIT_COMPLETE_OK
     *            <li>TRANSMIT_COMPLETE_NO_ACK
     *            <li>TRANSMIT_COMPLETE_FAIL
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getReturnRouteAssignComplete(Integer seqNo, String status) {
        logger.debug("Creating command message RETURN_ROUTE_ASSIGN_COMPLETE version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(RETURN_ROUTE_ASSIGN_COMPLETE);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Status'
        boolean foundStatus = false;
        for (Integer entry : constantReturnRouteAssignCompleteStatus.keySet()) {
            if (constantReturnRouteAssignCompleteStatus.get(entry).equals(status)) {
                outputData.write(entry);
                foundStatus = true;
                break;
            }
        }
        if (!foundStatus) {
            throw new IllegalArgumentException("Unknown constant value '" + status + "' for status");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the RETURN_ROUTE_ASSIGN_COMPLETE command.
     * <p>
     * Return Route Assign Complete
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>STATUS {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>TRANSMIT_COMPLETE_OK
     * <li>TRANSMIT_COMPLETE_NO_ACK
     * <li>TRANSMIT_COMPLETE_FAIL
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleReturnRouteAssignComplete(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", Integer.valueOf(payload[2]));

        // Process 'Status'
        response.put("STATUS", constantReturnRouteAssignCompleteStatus.get(payload[3] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the RETURN_ROUTE_DELETE command.
     * <p>
     * Return Route Delete
     *
     * @param seqNo {@link Integer}
     * @param nodeId {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getReturnRouteDelete(Integer seqNo, Integer nodeId) {
        logger.debug("Creating command message RETURN_ROUTE_DELETE version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(RETURN_ROUTE_DELETE);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Node ID'
        // Check the node number boundary
        if (nodeId < 1 || nodeId > 232) {
            logger.debug("Node number is out of bounds {}", nodeId);
            return null;
        }
        outputData.write(nodeId);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the RETURN_ROUTE_DELETE command.
     * <p>
     * Return Route Delete
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>NODE_ID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleReturnRouteDelete(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", Integer.valueOf(payload[2]));

        // Process 'Node ID'
        response.put("NODE_ID", Integer.valueOf(payload[3]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the RETURN_ROUTE_DELETE_COMPLETE command.
     * <p>
     * Return Route Delete Complete
     *
     * @param seqNo {@link Integer}
     * @param status {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>TRANSMIT_COMPLETE_OK
     *            <li>TRANSMIT_COMPLETE_NO_ACK
     *            <li>TRANSMIT_COMPLETE_FAIL
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getReturnRouteDeleteComplete(Integer seqNo, String status) {
        logger.debug("Creating command message RETURN_ROUTE_DELETE_COMPLETE version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(RETURN_ROUTE_DELETE_COMPLETE);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Status'
        boolean foundStatus = false;
        for (Integer entry : constantReturnRouteDeleteCompleteStatus.keySet()) {
            if (constantReturnRouteDeleteCompleteStatus.get(entry).equals(status)) {
                outputData.write(entry);
                foundStatus = true;
                break;
            }
        }
        if (!foundStatus) {
            throw new IllegalArgumentException("Unknown constant value '" + status + "' for status");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the RETURN_ROUTE_DELETE_COMPLETE command.
     * <p>
     * Return Route Delete Complete
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>STATUS {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>TRANSMIT_COMPLETE_OK
     * <li>TRANSMIT_COMPLETE_NO_ACK
     * <li>TRANSMIT_COMPLETE_FAIL
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleReturnRouteDeleteComplete(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", Integer.valueOf(payload[2]));

        // Process 'Status'
        response.put("STATUS", constantReturnRouteDeleteCompleteStatus.get(payload[3] & 0xff));

        // Return the map of processed response data;
        return response;
    }
}
