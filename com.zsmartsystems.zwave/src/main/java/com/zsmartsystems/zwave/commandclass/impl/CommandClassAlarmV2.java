/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_ALARM</b> version <b>2</b>.
 * <p>
 * Command Class Alarm
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x71.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassAlarmV2 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassAlarmV2.class);

    /**
     * Integer command class key for COMMAND_CLASS_ALARM
     */
    public final static int COMMAND_CLASS_KEY = 0x71;

    /**
     * Alarm Get Command Constant
     */
    public final static int ALARM_GET = 0x04;
    /**
     * Alarm Report Command Constant
     */
    public final static int ALARM_REPORT = 0x05;
    /**
     * Alarm Set Command Constant
     */
    public final static int ALARM_SET = 0x06;
    /**
     * Alarm Type Supported Get Command Constant
     */
    public final static int ALARM_TYPE_SUPPORTED_GET = 0x07;
    /**
     * Alarm Type Supported Report Command Constant
     */
    public final static int ALARM_TYPE_SUPPORTED_REPORT = 0x08;

    /**
     * Map holding constants for AlarmSetZwaveAlarmType
     */
    private static Map<Integer, String> constantAlarmSetZwaveAlarmType = new HashMap<Integer, String>();

    /**
     * Map holding constants for AlarmReportZwaveAlarmType
     */
    private static Map<Integer, String> constantAlarmReportZwaveAlarmType = new HashMap<Integer, String>();

    /**
     * Map holding constants for AlarmGetZwaveAlarmType
     */
    private static Map<Integer, String> constantAlarmGetZwaveAlarmType = new HashMap<Integer, String>();

    /**
     * Map holding constants for AlarmTypeSupportedReportProperties1
     */
    private static Map<Integer, String> constantAlarmTypeSupportedReportProperties1 = new HashMap<Integer, String>();

    /**
     * Map holding constants for AlarmReportZwaveAlarmStatus
     */
    private static Map<Integer, String> constantAlarmReportZwaveAlarmStatus = new HashMap<Integer, String>();

    /**
     * Map holding constants for AlarmTypeSupportedReportBitMask
     */
    private static Map<Integer, String> constantAlarmTypeSupportedReportBitMask = new HashMap<Integer, String>();

    /**
     * Map holding constants for AlarmSetZwaveAlarmStatus
     */
    private static Map<Integer, String> constantAlarmSetZwaveAlarmStatus = new HashMap<Integer, String>();

    static {
        // Constants for AlarmSetZwaveAlarmType
        constantAlarmSetZwaveAlarmType.put(0x01, "SMOKE");
        constantAlarmSetZwaveAlarmType.put(0x02, "CO");
        constantAlarmSetZwaveAlarmType.put(0x03, "CO2");
        constantAlarmSetZwaveAlarmType.put(0x04, "HEAT");
        constantAlarmSetZwaveAlarmType.put(0x05, "WATER");
        constantAlarmSetZwaveAlarmType.put(0x06, "ACCESS_CONTROL");
        constantAlarmSetZwaveAlarmType.put(0x07, "BURGLAR");
        constantAlarmSetZwaveAlarmType.put(0x08, "POWER_MANAGEMENT");
        constantAlarmSetZwaveAlarmType.put(0x09, "SYSTEM");
        constantAlarmSetZwaveAlarmType.put(0x0A, "EMERGENCY");
        constantAlarmSetZwaveAlarmType.put(0x0B, "CLOCK");

        // Constants for AlarmReportZwaveAlarmType
        constantAlarmReportZwaveAlarmType.put(0x01, "SMOKE");
        constantAlarmReportZwaveAlarmType.put(0x02, "CO");
        constantAlarmReportZwaveAlarmType.put(0x03, "CO2");
        constantAlarmReportZwaveAlarmType.put(0x04, "HEAT");
        constantAlarmReportZwaveAlarmType.put(0x05, "WATER");
        constantAlarmReportZwaveAlarmType.put(0x06, "ACCESS_CONTROL");
        constantAlarmReportZwaveAlarmType.put(0x07, "BURGLAR");
        constantAlarmReportZwaveAlarmType.put(0x08, "POWER_MANAGEMENT");
        constantAlarmReportZwaveAlarmType.put(0x09, "SYSTEM");
        constantAlarmReportZwaveAlarmType.put(0x0A, "EMERGENCY");
        constantAlarmReportZwaveAlarmType.put(0x0B, "CLOCK");

        // Constants for AlarmGetZwaveAlarmType
        constantAlarmGetZwaveAlarmType.put(0x01, "SMOKE");
        constantAlarmGetZwaveAlarmType.put(0x02, "CO");
        constantAlarmGetZwaveAlarmType.put(0x03, "CO2");
        constantAlarmGetZwaveAlarmType.put(0x04, "HEAT");
        constantAlarmGetZwaveAlarmType.put(0x05, "WATER");
        constantAlarmGetZwaveAlarmType.put(0x06, "ACCESS_CONTROL");
        constantAlarmGetZwaveAlarmType.put(0x07, "BURGLAR");
        constantAlarmGetZwaveAlarmType.put(0x08, "POWER_MANAGEMENT");
        constantAlarmGetZwaveAlarmType.put(0x09, "SYSTEM");
        constantAlarmGetZwaveAlarmType.put(0x0A, "EMERGENCY");
        constantAlarmGetZwaveAlarmType.put(0x0B, "CLOCK");

        // Constants for AlarmTypeSupportedReportProperties1
        constantAlarmTypeSupportedReportProperties1.put(0x80, "V1_ALARM");

        // Constants for AlarmReportZwaveAlarmStatus
        constantAlarmReportZwaveAlarmStatus.put(0x00, "OFF");
        constantAlarmReportZwaveAlarmStatus.put(0xFF, "ON");

        // Constants for AlarmTypeSupportedReportBitMask
        constantAlarmTypeSupportedReportBitMask.put(0x01, "SMOKE");
        constantAlarmTypeSupportedReportBitMask.put(0x02, "CO");
        constantAlarmTypeSupportedReportBitMask.put(0x03, "CO2");
        constantAlarmTypeSupportedReportBitMask.put(0x04, "HEAT");
        constantAlarmTypeSupportedReportBitMask.put(0x05, "WATER");
        constantAlarmTypeSupportedReportBitMask.put(0x06, "ACCESS_CONTROL");
        constantAlarmTypeSupportedReportBitMask.put(0x07, "BURGLAR");
        constantAlarmTypeSupportedReportBitMask.put(0x08, "POWER_MANAGEMENT");
        constantAlarmTypeSupportedReportBitMask.put(0x09, "SYSTEM");
        constantAlarmTypeSupportedReportBitMask.put(0x0A, "EMERGENCY");
        constantAlarmTypeSupportedReportBitMask.put(0x0B, "CLOCK");

        // Constants for AlarmSetZwaveAlarmStatus
        constantAlarmSetZwaveAlarmStatus.put(0x00, "OFF");
        constantAlarmSetZwaveAlarmStatus.put(0xFF, "ON");
    }

    /**
     * Creates a new message with the ALARM_GET command.
     * <p>
     * Alarm Get
     *
     * @param alarmType {@link Integer}
     * @param zwaveAlarmType {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>SMOKE
     *            <li>CO
     *            <li>CO2
     *            <li>HEAT
     *            <li>WATER
     *            <li>ACCESS_CONTROL
     *            <li>BURGLAR
     *            <li>POWER_MANAGEMENT
     *            <li>SYSTEM
     *            <li>EMERGENCY
     *            <li>CLOCK
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getAlarmGet(Integer alarmType, String zwaveAlarmType) {
        logger.debug("Creating command message ALARM_GET version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(ALARM_GET);

        // Process 'Alarm Type'
        outputData.write(alarmType);

        // Process 'ZWave Alarm Type'
        boolean foundZwaveAlarmType = false;
        for (Integer entry : constantAlarmGetZwaveAlarmType.keySet()) {
            if (constantAlarmGetZwaveAlarmType.get(entry).equals(zwaveAlarmType)) {
                outputData.write(entry);
                foundZwaveAlarmType = true;
                break;
            }
        }
        if (!foundZwaveAlarmType) {
            throw new IllegalArgumentException("Unknown constant value '" + zwaveAlarmType + "' for zwaveAlarmType");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the ALARM_GET command.
     * <p>
     * Alarm Get
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>ALARM_TYPE {@link Integer}
     * <li>ZWAVE_ALARM_TYPE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>SMOKE
     * <li>CO
     * <li>CO2
     * <li>HEAT
     * <li>WATER
     * <li>ACCESS_CONTROL
     * <li>BURGLAR
     * <li>POWER_MANAGEMENT
     * <li>SYSTEM
     * <li>EMERGENCY
     * <li>CLOCK
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleAlarmGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Alarm Type'
        response.put("ALARM_TYPE", Integer.valueOf(payload[2]));

        // Process 'ZWave Alarm Type'
        response.put("ZWAVE_ALARM_TYPE", constantAlarmGetZwaveAlarmType.get(payload[3] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the ALARM_REPORT command.
     * <p>
     * Alarm Report
     *
     * @param alarmType {@link Integer}
     * @param alarmLevel {@link Integer}
     * @param zensorNetSourceNodeId {@link Integer}
     * @param zwaveAlarmStatus {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>OFF
     *            <li>ON
     *            </ul>
     * @param zwaveAlarmType {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>SMOKE
     *            <li>CO
     *            <li>CO2
     *            <li>HEAT
     *            <li>WATER
     *            <li>ACCESS_CONTROL
     *            <li>BURGLAR
     *            <li>POWER_MANAGEMENT
     *            <li>SYSTEM
     *            <li>EMERGENCY
     *            <li>CLOCK
     *            </ul>
     * @param zwaveAlarmEvent {@link Integer}
     * @param numberOfEventParameters {@link Integer}
     * @param eventParameter {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getAlarmReport(Integer alarmType, Integer alarmLevel, Integer zensorNetSourceNodeId,
            String zwaveAlarmStatus, String zwaveAlarmType, Integer zwaveAlarmEvent, Integer numberOfEventParameters,
            byte[] eventParameter) {
        logger.debug("Creating command message ALARM_REPORT version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(ALARM_REPORT);

        // Process 'Alarm Type'
        outputData.write(alarmType);

        // Process 'Alarm Level'
        outputData.write(alarmLevel);

        // Process 'Zensor Net Source Node ID'
        // Check the node number boundary
        if (zensorNetSourceNodeId < 1 || zensorNetSourceNodeId > 232) {
            logger.debug("Node number is out of bounds {}", zensorNetSourceNodeId);
            return null;
        }
        outputData.write(zensorNetSourceNodeId);

        // Process 'ZWave Alarm Status'
        boolean foundZwaveAlarmStatus = false;
        for (Integer entry : constantAlarmReportZwaveAlarmStatus.keySet()) {
            if (constantAlarmReportZwaveAlarmStatus.get(entry).equals(zwaveAlarmStatus)) {
                outputData.write(entry);
                foundZwaveAlarmStatus = true;
                break;
            }
        }
        if (!foundZwaveAlarmStatus) {
            throw new IllegalArgumentException("Unknown constant value '" + zwaveAlarmStatus + "' for zwaveAlarmStatus");
        }

        // Process 'ZWave Alarm Type'
        boolean foundZwaveAlarmType = false;
        for (Integer entry : constantAlarmReportZwaveAlarmType.keySet()) {
            if (constantAlarmReportZwaveAlarmType.get(entry).equals(zwaveAlarmType)) {
                outputData.write(entry);
                foundZwaveAlarmType = true;
                break;
            }
        }
        if (!foundZwaveAlarmType) {
            throw new IllegalArgumentException("Unknown constant value '" + zwaveAlarmType + "' for zwaveAlarmType");
        }

        // Process 'ZWave Alarm Event'
        outputData.write(zwaveAlarmEvent);

        // Process 'Number of Event Parameters'
        outputData.write(numberOfEventParameters);

        // Process 'Event Parameter'
        if (eventParameter != null) {
            try {
                outputData.write(eventParameter);
            } catch (IOException e) {
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the ALARM_REPORT command.
     * <p>
     * Alarm Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>ALARM_TYPE {@link Integer}
     * <li>ALARM_LEVEL {@link Integer}
     * <li>ZENSOR_NET_SOURCE_NODE_ID {@link Integer}
     * <li>ZWAVE_ALARM_STATUS {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>OFF
     * <li>ON
     * </ul>
     * <li>ZWAVE_ALARM_TYPE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>SMOKE
     * <li>CO
     * <li>CO2
     * <li>HEAT
     * <li>WATER
     * <li>ACCESS_CONTROL
     * <li>BURGLAR
     * <li>POWER_MANAGEMENT
     * <li>SYSTEM
     * <li>EMERGENCY
     * <li>CLOCK
     * </ul>
     * <li>ZWAVE_ALARM_EVENT {@link Integer}
     * <li>NUMBER_OF_EVENT_PARAMETERS {@link Integer}
     * <li>EVENT_PARAMETER {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleAlarmReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Alarm Type'
        response.put("ALARM_TYPE", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Alarm Level'
        response.put("ALARM_LEVEL", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Zensor Net Source Node ID'
        response.put("ZENSOR_NET_SOURCE_NODE_ID", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'ZWave Alarm Status'
        response.put("ZWAVE_ALARM_STATUS", constantAlarmReportZwaveAlarmStatus.get(payload[msgOffset] & 0xff));
        msgOffset += 1;

        // Process 'ZWave Alarm Type'
        response.put("ZWAVE_ALARM_TYPE", constantAlarmReportZwaveAlarmType.get(payload[msgOffset] & 0xff));
        msgOffset += 1;

        // Process 'ZWave Alarm Event'
        response.put("ZWAVE_ALARM_EVENT", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Number of Event Parameters'
        response.put("NUMBER_OF_EVENT_PARAMETERS", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Event Parameter'
        ByteArrayOutputStream valEventParameter = new ByteArrayOutputStream();
        int lenEventParameter = payload[msgOffset - 1];
        for (int cntEventParameter = 0; cntEventParameter < lenEventParameter; cntEventParameter++) {
            valEventParameter.write(payload[msgOffset + cntEventParameter]);
        }
        response.put("EVENT_PARAMETER", valEventParameter.toByteArray());
        msgOffset += lenEventParameter;

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the ALARM_SET command.
     * <p>
     * Alarm Set
     *
     * @param zwaveAlarmType {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>SMOKE
     *            <li>CO
     *            <li>CO2
     *            <li>HEAT
     *            <li>WATER
     *            <li>ACCESS_CONTROL
     *            <li>BURGLAR
     *            <li>POWER_MANAGEMENT
     *            <li>SYSTEM
     *            <li>EMERGENCY
     *            <li>CLOCK
     *            </ul>
     * @param zwaveAlarmStatus {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>OFF
     *            <li>ON
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getAlarmSet(String zwaveAlarmType, String zwaveAlarmStatus) {
        logger.debug("Creating command message ALARM_SET version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(ALARM_SET);

        // Process 'ZWave Alarm Type'
        boolean foundZwaveAlarmType = false;
        for (Integer entry : constantAlarmSetZwaveAlarmType.keySet()) {
            if (constantAlarmSetZwaveAlarmType.get(entry).equals(zwaveAlarmType)) {
                outputData.write(entry);
                foundZwaveAlarmType = true;
                break;
            }
        }
        if (!foundZwaveAlarmType) {
            throw new IllegalArgumentException("Unknown constant value '" + zwaveAlarmType + "' for zwaveAlarmType");
        }

        // Process 'ZWave Alarm Status'
        boolean foundZwaveAlarmStatus = false;
        for (Integer entry : constantAlarmSetZwaveAlarmStatus.keySet()) {
            if (constantAlarmSetZwaveAlarmStatus.get(entry).equals(zwaveAlarmStatus)) {
                outputData.write(entry);
                foundZwaveAlarmStatus = true;
                break;
            }
        }
        if (!foundZwaveAlarmStatus) {
            throw new IllegalArgumentException("Unknown constant value '" + zwaveAlarmStatus + "' for zwaveAlarmStatus");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the ALARM_SET command.
     * <p>
     * Alarm Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>ZWAVE_ALARM_TYPE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>SMOKE
     * <li>CO
     * <li>CO2
     * <li>HEAT
     * <li>WATER
     * <li>ACCESS_CONTROL
     * <li>BURGLAR
     * <li>POWER_MANAGEMENT
     * <li>SYSTEM
     * <li>EMERGENCY
     * <li>CLOCK
     * </ul>
     * <li>ZWAVE_ALARM_STATUS {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>OFF
     * <li>ON
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleAlarmSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'ZWave Alarm Type'
        response.put("ZWAVE_ALARM_TYPE", constantAlarmSetZwaveAlarmType.get(payload[2] & 0xff));

        // Process 'ZWave Alarm Status'
        response.put("ZWAVE_ALARM_STATUS", constantAlarmSetZwaveAlarmStatus.get(payload[3] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the ALARM_TYPE_SUPPORTED_GET command.
     * <p>
     * Alarm Type Supported Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getAlarmTypeSupportedGet() {
        logger.debug("Creating command message ALARM_TYPE_SUPPORTED_GET version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(ALARM_TYPE_SUPPORTED_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the ALARM_TYPE_SUPPORTED_GET command.
     * <p>
     * Alarm Type Supported Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleAlarmTypeSupportedGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the ALARM_TYPE_SUPPORTED_REPORT command.
     * <p>
     * Alarm Type Supported Report
     *
     * @param v1Alarm {@link Boolean}
     * @param bitMask {@link List<String>}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>SMOKE
     *            <li>CO
     *            <li>CO2
     *            <li>HEAT
     *            <li>WATER
     *            <li>ACCESS_CONTROL
     *            <li>BURGLAR
     *            <li>POWER_MANAGEMENT
     *            <li>SYSTEM
     *            <li>EMERGENCY
     *            <li>CLOCK
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getAlarmTypeSupportedReport(Boolean v1Alarm, List<String> bitMask) {
        logger.debug("Creating command message ALARM_TYPE_SUPPORTED_REPORT version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(ALARM_TYPE_SUPPORTED_REPORT);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= 4;
        valProperties1 |= v1Alarm ? 0x80 : 0;
        outputData.write(valProperties1);

        // Process 'Bit Mask'
        int valBitMask = 0;
        for (String value : bitMask) {
            boolean foundBitMask = false;
            for (Integer entry : constantAlarmTypeSupportedReportBitMask.keySet()) {
                if (constantAlarmTypeSupportedReportBitMask.get(entry).equals(value)) {
                    foundBitMask = true;
                    valBitMask += entry;
                    break;
                }
            }
            if (!foundBitMask) {
                throw new IllegalArgumentException("Unknown constant value '" + bitMask + "' for bitMask");
            }
        }
        outputData.write(valBitMask);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the ALARM_TYPE_SUPPORTED_REPORT command.
     * <p>
     * Alarm Type Supported Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>V1_ALARM {@link Boolean}
     * <li>BIT_MASK {@link List}<{@link String}>
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>SMOKE
     * <li>CO
     * <li>CO2
     * <li>HEAT
     * <li>WATER
     * <li>ACCESS_CONTROL
     * <li>BURGLAR
     * <li>POWER_MANAGEMENT
     * <li>SYSTEM
     * <li>EMERGENCY
     * <li>CLOCK
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleAlarmTypeSupportedReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("NUMBER_OF_BIT_MASKS", Integer.valueOf(payload[2] & 0x1F));
        response.put("V1_ALARM", Boolean.valueOf((payload[2] & 0x80) != 0));

        // Process 'Bit Mask'
        List<String> responseBitMask = new ArrayList<String>();
        int lenBitMask = (payload[2] & 0x1F) * 8;
        for (int cntBitMask = 0; cntBitMask < lenBitMask; cntBitMask++) {
            if ((payload[3 + (cntBitMask / 8)] & (1 << cntBitMask % 8)) == 0) {
                continue;
            }
            responseBitMask.add(constantAlarmTypeSupportedReportBitMask.get(cntBitMask));
        }
        response.put("BIT_MASK", responseBitMask);

        // Return the map of processed response data;
        return response;
    }
}
