/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_IP_CONFIGURATION</b> version <b>1</b>.
 * <p>
 * Command Class Ip Configuration
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x9A.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassIpConfigurationV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassIpConfigurationV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_IP_CONFIGURATION
     */
    public final static int COMMAND_CLASS_KEY = 0x9A;

    /**
     * Ip Configuration Set Command Constant
     */
    public final static int IP_CONFIGURATION_SET = 0x01;
    /**
     * Ip Configuration Get Command Constant
     */
    public final static int IP_CONFIGURATION_GET = 0x02;
    /**
     * Ip Configuration Report Command Constant
     */
    public final static int IP_CONFIGURATION_REPORT = 0x03;
    /**
     * Ip Configuration Release Command Constant
     */
    public final static int IP_CONFIGURATION_RELEASE = 0x04;
    /**
     * Ip Configuration Renew Command Constant
     */
    public final static int IP_CONFIGURATION_RENEW = 0x05;

    /**
     * Map holding constants for IpConfigurationSetProperties1
     */
    private static Map<Integer, String> constantIpConfigurationSetProperties1 = new HashMap<Integer, String>();

    /**
     * Map holding constants for IpConfigurationReportProperties1
     */
    private static Map<Integer, String> constantIpConfigurationReportProperties1 = new HashMap<Integer, String>();

    static {
        // Constants for IpConfigurationSetProperties1
        constantIpConfigurationSetProperties1.put(0x01, "AUTO_DNS");
        constantIpConfigurationSetProperties1.put(0x02, "AUTO_IP");

        // Constants for IpConfigurationReportProperties1
        constantIpConfigurationReportProperties1.put(0x01, "AUTO_DNS");
        constantIpConfigurationReportProperties1.put(0x02, "AUTO_IP");
    }

    /**
     * Creates a new message with the IP_CONFIGURATION_SET command.
     * <p>
     * Ip Configuration Set
     *
     * @param autoDns {@link Boolean}
     * @param autoIp {@link Boolean}
     * @param ipAddress {@link Long}
     * @param subnetMask {@link Long}
     * @param gateway {@link Long}
     * @param dns1 {@link Long}
     * @param dns2 {@link Long}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getIpConfigurationSet(Boolean autoDns, Boolean autoIp, Long ipAddress, Long subnetMask,
            Long gateway, Long dns1, Long dns2) {
        logger.debug("Creating command message IP_CONFIGURATION_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(IP_CONFIGURATION_SET);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= autoDns ? 0x01 : 0;
        valProperties1 |= autoIp ? 0x02 : 0;
        outputData.write(valProperties1);

        // Process 'IP Address'
        outputData.write((byte) ((ipAddress >> 24) & 0xff));
        outputData.write((byte) ((ipAddress >> 16) & 0xff));
        outputData.write((byte) ((ipAddress >> 8) & 0xff));
        outputData.write((byte) (ipAddress & 0xff));

        // Process 'Subnet Mask'
        outputData.write((byte) ((subnetMask >> 24) & 0xff));
        outputData.write((byte) ((subnetMask >> 16) & 0xff));
        outputData.write((byte) ((subnetMask >> 8) & 0xff));
        outputData.write((byte) (subnetMask & 0xff));

        // Process 'Gateway'
        outputData.write((byte) ((gateway >> 24) & 0xff));
        outputData.write((byte) ((gateway >> 16) & 0xff));
        outputData.write((byte) ((gateway >> 8) & 0xff));
        outputData.write((byte) (gateway & 0xff));

        // Process 'DNS1'
        outputData.write((byte) ((dns1 >> 24) & 0xff));
        outputData.write((byte) ((dns1 >> 16) & 0xff));
        outputData.write((byte) ((dns1 >> 8) & 0xff));
        outputData.write((byte) (dns1 & 0xff));

        // Process 'DNS2'
        outputData.write((byte) ((dns2 >> 24) & 0xff));
        outputData.write((byte) ((dns2 >> 16) & 0xff));
        outputData.write((byte) ((dns2 >> 8) & 0xff));
        outputData.write((byte) (dns2 & 0xff));

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the IP_CONFIGURATION_SET command.
     * <p>
     * Ip Configuration Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>AUTO_DNS {@link Boolean}
     * <li>AUTO_IP {@link Boolean}
     * <li>IP_ADDRESS {@link Long}
     * <li>SUBNET_MASK {@link Long}
     * <li>GATEWAY {@link Long}
     * <li>DNS1 {@link Long}
     * <li>DNS2 {@link Long}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleIpConfigurationSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("AUTO_DNS", Boolean.valueOf((payload[2] & 0x01) != 0));
        response.put("AUTO_IP", Boolean.valueOf((payload[2] & 0x02) != 0));

        // Process 'IP Address'
        response.put("IP_ADDRESS", Long.valueOf((payload[3] << 24) + (payload[4] << 16) + (payload[5] << 8) + payload[6]));

        // Process 'Subnet Mask'
        response.put("SUBNET_MASK", Long.valueOf((payload[7] << 24) + (payload[8] << 16) + (payload[9] << 8) + payload[10]));

        // Process 'Gateway'
        response.put("GATEWAY", Long.valueOf((payload[11] << 24) + (payload[12] << 16) + (payload[13] << 8) + payload[14]));

        // Process 'DNS1'
        response.put("DNS1", Long.valueOf((payload[15] << 24) + (payload[16] << 16) + (payload[17] << 8) + payload[18]));

        // Process 'DNS2'
        response.put("DNS2", Long.valueOf((payload[19] << 24) + (payload[20] << 16) + (payload[21] << 8) + payload[22]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the IP_CONFIGURATION_GET command.
     * <p>
     * Ip Configuration Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getIpConfigurationGet() {
        logger.debug("Creating command message IP_CONFIGURATION_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(IP_CONFIGURATION_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the IP_CONFIGURATION_GET command.
     * <p>
     * Ip Configuration Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleIpConfigurationGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the IP_CONFIGURATION_REPORT command.
     * <p>
     * Ip Configuration Report
     *
     * @param autoDns {@link Boolean}
     * @param autoIp {@link Boolean}
     * @param ipAddress {@link Long}
     * @param subnetMask {@link Long}
     * @param gateway {@link Long}
     * @param dns1 {@link Long}
     * @param dns2 {@link Long}
     * @param leasetime {@link Long}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getIpConfigurationReport(Boolean autoDns, Boolean autoIp, Long ipAddress, Long subnetMask,
            Long gateway, Long dns1, Long dns2, Long leasetime) {
        logger.debug("Creating command message IP_CONFIGURATION_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(IP_CONFIGURATION_REPORT);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= autoDns ? 0x01 : 0;
        valProperties1 |= autoIp ? 0x02 : 0;
        outputData.write(valProperties1);

        // Process 'IP Address'
        outputData.write((byte) ((ipAddress >> 24) & 0xff));
        outputData.write((byte) ((ipAddress >> 16) & 0xff));
        outputData.write((byte) ((ipAddress >> 8) & 0xff));
        outputData.write((byte) (ipAddress & 0xff));

        // Process 'Subnet Mask'
        outputData.write((byte) ((subnetMask >> 24) & 0xff));
        outputData.write((byte) ((subnetMask >> 16) & 0xff));
        outputData.write((byte) ((subnetMask >> 8) & 0xff));
        outputData.write((byte) (subnetMask & 0xff));

        // Process 'Gateway'
        outputData.write((byte) ((gateway >> 24) & 0xff));
        outputData.write((byte) ((gateway >> 16) & 0xff));
        outputData.write((byte) ((gateway >> 8) & 0xff));
        outputData.write((byte) (gateway & 0xff));

        // Process 'DNS1'
        outputData.write((byte) ((dns1 >> 24) & 0xff));
        outputData.write((byte) ((dns1 >> 16) & 0xff));
        outputData.write((byte) ((dns1 >> 8) & 0xff));
        outputData.write((byte) (dns1 & 0xff));

        // Process 'DNS2'
        outputData.write((byte) ((dns2 >> 24) & 0xff));
        outputData.write((byte) ((dns2 >> 16) & 0xff));
        outputData.write((byte) ((dns2 >> 8) & 0xff));
        outputData.write((byte) (dns2 & 0xff));

        // Process 'LeaseTime'
        outputData.write((byte) ((leasetime >> 24) & 0xff));
        outputData.write((byte) ((leasetime >> 16) & 0xff));
        outputData.write((byte) ((leasetime >> 8) & 0xff));
        outputData.write((byte) (leasetime & 0xff));

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the IP_CONFIGURATION_REPORT command.
     * <p>
     * Ip Configuration Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>AUTO_DNS {@link Boolean}
     * <li>AUTO_IP {@link Boolean}
     * <li>IP_ADDRESS {@link Long}
     * <li>SUBNET_MASK {@link Long}
     * <li>GATEWAY {@link Long}
     * <li>DNS1 {@link Long}
     * <li>DNS2 {@link Long}
     * <li>LEASETIME {@link Long}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleIpConfigurationReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("AUTO_DNS", Boolean.valueOf((payload[2] & 0x01) != 0));
        response.put("AUTO_IP", Boolean.valueOf((payload[2] & 0x02) != 0));

        // Process 'IP Address'
        response.put("IP_ADDRESS", Long.valueOf((payload[3] << 24) + (payload[4] << 16) + (payload[5] << 8) + payload[6]));

        // Process 'Subnet Mask'
        response.put("SUBNET_MASK", Long.valueOf((payload[7] << 24) + (payload[8] << 16) + (payload[9] << 8) + payload[10]));

        // Process 'Gateway'
        response.put("GATEWAY", Long.valueOf((payload[11] << 24) + (payload[12] << 16) + (payload[13] << 8) + payload[14]));

        // Process 'DNS1'
        response.put("DNS1", Long.valueOf((payload[15] << 24) + (payload[16] << 16) + (payload[17] << 8) + payload[18]));

        // Process 'DNS2'
        response.put("DNS2", Long.valueOf((payload[19] << 24) + (payload[20] << 16) + (payload[21] << 8) + payload[22]));

        // Process 'LeaseTime'
        response.put("LEASETIME", Long.valueOf((payload[23] << 24) + (payload[24] << 16) + (payload[25] << 8) + payload[26]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the IP_CONFIGURATION_RELEASE command.
     * <p>
     * Ip Configuration Release
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getIpConfigurationRelease() {
        logger.debug("Creating command message IP_CONFIGURATION_RELEASE version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(IP_CONFIGURATION_RELEASE);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the IP_CONFIGURATION_RELEASE command.
     * <p>
     * Ip Configuration Release
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleIpConfigurationRelease(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the IP_CONFIGURATION_RENEW command.
     * <p>
     * Ip Configuration Renew
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getIpConfigurationRenew() {
        logger.debug("Creating command message IP_CONFIGURATION_RENEW version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(IP_CONFIGURATION_RENEW);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the IP_CONFIGURATION_RENEW command.
     * <p>
     * Ip Configuration Renew
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleIpConfigurationRenew(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }
}
