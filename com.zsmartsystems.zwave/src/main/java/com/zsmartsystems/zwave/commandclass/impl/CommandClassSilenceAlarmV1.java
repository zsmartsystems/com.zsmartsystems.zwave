/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_SILENCE_ALARM</b> version <b>1</b>.
 * <p>
 * Command Class Silence Alarm
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x9D.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassSilenceAlarmV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassSilenceAlarmV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_SILENCE_ALARM
     */
    public final static int COMMAND_CLASS_KEY = 0x9D;

    /**
     * Sensor Alarm Set Command Constant
     */
    public final static int SENSOR_ALARM_SET = 0x01;

    /**
     * Map holding constants for SensorAlarmSetMode
     */
    private static Map<Integer, String> constantSensorAlarmSetMode = new HashMap<Integer, String>();

    static {
        // Constants for SensorAlarmSetMode
        constantSensorAlarmSetMode.put(0x00, "DISABLE_SOUNDING_OF_ALL_SENSOR_ALARMS");
        constantSensorAlarmSetMode.put(0x01, "DISABLE_SOUNDING_OF_ALL_SENSOR_ALARMS_INDEPENDENT_OF_BIT_MASK_WHICH_HAVE_RECEIVED_THE_ALARM");
        constantSensorAlarmSetMode.put(0x02, "DISABLE_SOUNDING_OF_ALL_SENSOR_ALARMS_ACCORDING_TO_BIT_MASK");
        constantSensorAlarmSetMode.put(0x03, "DISABLE_SOUNDING_OF_ALL_SENSOR_ALARMS_ACCORDING_TO_BIT_MASK_WHICH_HAVE_RECEIVED_THE_ALARM");
    }

    /**
     * Creates a new message with the SENSOR_ALARM_SET command.
     * <p>
     * Sensor Alarm Set
     *
     * @param mode {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>DISABLE_SOUNDING_OF_ALL_SENSOR_ALARMS
     *            <li>DISABLE_SOUNDING_OF_ALL_SENSOR_ALARMS_INDEPENDENT_OF_BIT_MASK_WHICH_HAVE_RECEIVED_THE_ALARM
     *            <li>DISABLE_SOUNDING_OF_ALL_SENSOR_ALARMS_ACCORDING_TO_BIT_MASK
     *            <li>DISABLE_SOUNDING_OF_ALL_SENSOR_ALARMS_ACCORDING_TO_BIT_MASK_WHICH_HAVE_RECEIVED_THE_ALARM
     *            </ul>
     * @param seconds {@link Integer}
     * @param numberOfBitMasks {@link Integer}
     * @param bitMask {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSensorAlarmSet(String mode, Integer seconds, Integer numberOfBitMasks, byte[] bitMask) {
        logger.debug("Creating command message SENSOR_ALARM_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SENSOR_ALARM_SET);

        // Process 'Mode'
        boolean foundMode = false;
        for (Integer entry : constantSensorAlarmSetMode.keySet()) {
            if (constantSensorAlarmSetMode.get(entry).equals(mode)) {
                outputData.write(entry);
                foundMode = true;
                break;
            }
        }
        if (!foundMode) {
            throw new IllegalArgumentException("Unknown constant value '" + mode + "' for mode");
        }

        // Process 'Seconds'
        outputData.write((seconds >> 8) & 0xff);
        outputData.write(seconds & 0xff);

        // Process 'Number of Bit Masks'
        outputData.write(numberOfBitMasks);

        // Process 'Bit Mask'
        if (bitMask != null) {
            try {
                outputData.write(bitMask);
            } catch (IOException e) {
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SENSOR_ALARM_SET command.
     * <p>
     * Sensor Alarm Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>MODE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>DISABLE_SOUNDING_OF_ALL_SENSOR_ALARMS
     * <li>DISABLE_SOUNDING_OF_ALL_SENSOR_ALARMS_INDEPENDENT_OF_BIT_MASK_WHICH_HAVE_RECEIVED_THE_ALARM
     * <li>DISABLE_SOUNDING_OF_ALL_SENSOR_ALARMS_ACCORDING_TO_BIT_MASK
     * <li>DISABLE_SOUNDING_OF_ALL_SENSOR_ALARMS_ACCORDING_TO_BIT_MASK_WHICH_HAVE_RECEIVED_THE_ALARM
     * </ul>
     * <li>SECONDS {@link Integer}
     * <li>NUMBER_OF_BIT_MASKS {@link Integer}
     * <li>BIT_MASK {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSensorAlarmSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Mode'
        response.put("MODE", constantSensorAlarmSetMode.get(payload[msgOffset] & 0xff));
        msgOffset += 1;

        // Process 'Seconds'
        response.put("SECONDS", Integer.valueOf(((payload[msgOffset] & 0xff) << 8) + (payload[msgOffset + 1] & 0xff)));
        msgOffset += 2;

        // Process 'Number of Bit Masks'
        response.put("NUMBER_OF_BIT_MASKS", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Bit Mask'
        ByteArrayOutputStream valBitMask = new ByteArrayOutputStream();
        int lenBitMask = payload[msgOffset - 1];
        for (int cntBitMask = 0; cntBitMask < lenBitMask; cntBitMask++) {
            valBitMask.write(payload[msgOffset + cntBitMask]);
        }
        response.put("BIT_MASK", valBitMask.toByteArray());
        msgOffset += lenBitMask;

        // Return the map of processed response data;
        return response;
    }
}
