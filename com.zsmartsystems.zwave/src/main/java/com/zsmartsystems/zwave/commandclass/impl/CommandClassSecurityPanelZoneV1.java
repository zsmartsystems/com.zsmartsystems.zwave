/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_SECURITY_PANEL_ZONE</b> version <b>1</b>.
 * <p>
 * Command Class Security Panel Zone
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x2E.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassSecurityPanelZoneV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassSecurityPanelZoneV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_SECURITY_PANEL_ZONE
     */
    public final static int COMMAND_CLASS_KEY = 0x2E;

    /**
     * Security Panel Zone Number Supported Get Command Constant
     */
    public final static int SECURITY_PANEL_ZONE_NUMBER_SUPPORTED_GET = 0x01;
    /**
     * Security Panel Zone Supported Report Command Constant
     */
    public final static int SECURITY_PANEL_ZONE_SUPPORTED_REPORT = 0x02;
    /**
     * Security Panel Zone Type Get Command Constant
     */
    public final static int SECURITY_PANEL_ZONE_TYPE_GET = 0x03;
    /**
     * Security Panel Zone Type Report Command Constant
     */
    public final static int SECURITY_PANEL_ZONE_TYPE_REPORT = 0x04;
    /**
     * Security Panel Zone State Get Command Constant
     */
    public final static int SECURITY_PANEL_ZONE_STATE_GET = 0x05;
    /**
     * Security Panel Zone State Report Command Constant
     */
    public final static int SECURITY_PANEL_ZONE_STATE_REPORT = 0x06;

    /**
     * Map holding constants for SecurityPanelZoneStateReportZoneState
     */
    private static Map<Integer, String> constantSecurityPanelZoneStateReportZoneState = new HashMap<Integer, String>();

    /**
     * Map holding constants for SecurityPanelZoneTypeReportZoneType
     */
    private static Map<Integer, String> constantSecurityPanelZoneTypeReportZoneType = new HashMap<Integer, String>();

    /**
     * Map holding constants for SecurityPanelZoneSupportedReportParameters1
     */
    private static Map<Integer, String> constantSecurityPanelZoneSupportedReportParameters1 = new HashMap<Integer, String>();

    static {
        // Constants for SecurityPanelZoneStateReportZoneState
        constantSecurityPanelZoneStateReportZoneState.put(0x00, "FAULTED");
        constantSecurityPanelZoneStateReportZoneState.put(0x01, "NOT_FAULTED");
        constantSecurityPanelZoneStateReportZoneState.put(0x02, "BYPASS_FAULTED");
        constantSecurityPanelZoneStateReportZoneState.put(0x03, "BYPASS_NOT_FAULTED");

        // Constants for SecurityPanelZoneTypeReportZoneType
        constantSecurityPanelZoneTypeReportZoneType.put(0x01, "ALARM_ZONE");
        constantSecurityPanelZoneTypeReportZoneType.put(0x02, "NOTIFICATION_ZONE");

        // Constants for SecurityPanelZoneSupportedReportParameters1
        constantSecurityPanelZoneSupportedReportParameters1.put(0x80, "ZM");
    }

    /**
     * Creates a new message with the SECURITY_PANEL_ZONE_NUMBER_SUPPORTED_GET command.
     * <p>
     * Security Panel Zone Number Supported Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSecurityPanelZoneNumberSupportedGet() {
        logger.debug("Creating command message SECURITY_PANEL_ZONE_NUMBER_SUPPORTED_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SECURITY_PANEL_ZONE_NUMBER_SUPPORTED_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SECURITY_PANEL_ZONE_NUMBER_SUPPORTED_GET command.
     * <p>
     * Security Panel Zone Number Supported Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSecurityPanelZoneNumberSupportedGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SECURITY_PANEL_ZONE_SUPPORTED_REPORT command.
     * <p>
     * Security Panel Zone Supported Report
     *
     * @param zonesSupported {@link Integer}
     * @param zm {@link Boolean}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSecurityPanelZoneSupportedReport(Integer zonesSupported, Boolean zm) {
        logger.debug("Creating command message SECURITY_PANEL_ZONE_SUPPORTED_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SECURITY_PANEL_ZONE_SUPPORTED_REPORT);

        // Process 'Parameters1'
        int valParameters1 = 0;
        valParameters1 |= zonesSupported & 0x7F;
        valParameters1 |= zm ? 0x80 : 0;
        outputData.write(valParameters1);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SECURITY_PANEL_ZONE_SUPPORTED_REPORT command.
     * <p>
     * Security Panel Zone Supported Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>ZONES_SUPPORTED {@link Integer}
     * <li>ZM {@link Boolean}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSecurityPanelZoneSupportedReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Parameters1'
        response.put("ZONES_SUPPORTED", Integer.valueOf(payload[2] & 0x7F));
        response.put("ZM", Boolean.valueOf((payload[2] & 0x80) != 0));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SECURITY_PANEL_ZONE_TYPE_GET command.
     * <p>
     * Security Panel Zone Type Get
     *
     * @param zoneNumber {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSecurityPanelZoneTypeGet(Integer zoneNumber) {
        logger.debug("Creating command message SECURITY_PANEL_ZONE_TYPE_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SECURITY_PANEL_ZONE_TYPE_GET);

        // Process 'Zone Number'
        outputData.write(zoneNumber);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SECURITY_PANEL_ZONE_TYPE_GET command.
     * <p>
     * Security Panel Zone Type Get
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>ZONE_NUMBER {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSecurityPanelZoneTypeGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Zone Number'
        response.put("ZONE_NUMBER", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SECURITY_PANEL_ZONE_TYPE_REPORT command.
     * <p>
     * Security Panel Zone Type Report
     *
     * @param zoneNumber {@link Integer}
     * @param zoneType {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>ALARM_ZONE
     *            <li>NOTIFICATION_ZONE
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSecurityPanelZoneTypeReport(Integer zoneNumber, String zoneType) {
        logger.debug("Creating command message SECURITY_PANEL_ZONE_TYPE_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SECURITY_PANEL_ZONE_TYPE_REPORT);

        // Process 'Zone Number'
        outputData.write(zoneNumber);

        // Process 'Zone Type'
        boolean foundZoneType = false;
        for (Integer entry : constantSecurityPanelZoneTypeReportZoneType.keySet()) {
            if (constantSecurityPanelZoneTypeReportZoneType.get(entry).equals(zoneType)) {
                outputData.write(entry);
                foundZoneType = true;
                break;
            }
        }
        if (!foundZoneType) {
            throw new IllegalArgumentException("Unknown constant value '" + zoneType + "' for zoneType");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SECURITY_PANEL_ZONE_TYPE_REPORT command.
     * <p>
     * Security Panel Zone Type Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>ZONE_NUMBER {@link Integer}
     * <li>ZONE_TYPE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>ALARM_ZONE
     * <li>NOTIFICATION_ZONE
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSecurityPanelZoneTypeReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Zone Number'
        response.put("ZONE_NUMBER", Integer.valueOf(payload[2]));

        // Process 'Zone Type'
        response.put("ZONE_TYPE", constantSecurityPanelZoneTypeReportZoneType.get(payload[3] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SECURITY_PANEL_ZONE_STATE_GET command.
     * <p>
     * Security Panel Zone State Get
     *
     * @param zoneNumber {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSecurityPanelZoneStateGet(Integer zoneNumber) {
        logger.debug("Creating command message SECURITY_PANEL_ZONE_STATE_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SECURITY_PANEL_ZONE_STATE_GET);

        // Process 'Zone Number'
        outputData.write(zoneNumber);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SECURITY_PANEL_ZONE_STATE_GET command.
     * <p>
     * Security Panel Zone State Get
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>ZONE_NUMBER {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSecurityPanelZoneStateGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Zone Number'
        response.put("ZONE_NUMBER", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SECURITY_PANEL_ZONE_STATE_REPORT command.
     * <p>
     * Security Panel Zone State Report
     *
     * @param zoneNumber {@link Integer}
     * @param zoneState {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>FAULTED
     *            <li>NOT_FAULTED
     *            <li>BYPASS_FAULTED
     *            <li>BYPASS_NOT_FAULTED
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSecurityPanelZoneStateReport(Integer zoneNumber, String zoneState) {
        logger.debug("Creating command message SECURITY_PANEL_ZONE_STATE_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SECURITY_PANEL_ZONE_STATE_REPORT);

        // Process 'Zone number'
        outputData.write(zoneNumber);

        // Process 'Zone State'
        boolean foundZoneState = false;
        for (Integer entry : constantSecurityPanelZoneStateReportZoneState.keySet()) {
            if (constantSecurityPanelZoneStateReportZoneState.get(entry).equals(zoneState)) {
                outputData.write(entry);
                foundZoneState = true;
                break;
            }
        }
        if (!foundZoneState) {
            throw new IllegalArgumentException("Unknown constant value '" + zoneState + "' for zoneState");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SECURITY_PANEL_ZONE_STATE_REPORT command.
     * <p>
     * Security Panel Zone State Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>ZONE_NUMBER {@link Integer}
     * <li>ZONE_STATE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>FAULTED
     * <li>NOT_FAULTED
     * <li>BYPASS_FAULTED
     * <li>BYPASS_NOT_FAULTED
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSecurityPanelZoneStateReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Zone number'
        response.put("ZONE_NUMBER", Integer.valueOf(payload[2]));

        // Process 'Zone State'
        response.put("ZONE_STATE", constantSecurityPanelZoneStateReportZoneState.get(payload[3] & 0xff));

        // Return the map of processed response data;
        return response;
    }
}
