/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.lang.IllegalArgumentException;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_ZIP_PORTAL</b> version <b>1</b>.
 * <p>
 * Command Class Z/IP Portal
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x61.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassZipPortalV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassZipPortalV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_ZIP_PORTAL
     */
    public final static int COMMAND_CLASS_KEY = 0x61;

    /**
     * Gateway Configuration Set Command Constant
     */
    public final static int GATEWAY_CONFIGURATION_SET = 0x01;
    /**
     * Gateway Configuration Status Command Constant
     */
    public final static int GATEWAY_CONFIGURATION_STATUS = 0x02;
    /**
     * Gateway Configuration Get Command Constant
     */
    public final static int GATEWAY_CONFIGURATION_GET = 0x03;
    /**
     * Gateway Configuration Report Command Constant
     */
    public final static int GATEWAY_CONFIGURATION_REPORT = 0x04;


    /**
     * Creates a new message with the GATEWAY_CONFIGURATION_SET command.
     * <p>
     * Gateway Configuration Set
     *
     * @param lanIpv6Address {@link byte[]}
     * @param lanIpv6PrefixLength {@link Integer}
     * @param portalIpv6Prefix {@link byte[]}
     * @param portalIpv6PrefixLength {@link Integer}
     * @param defaultGatewayIpv6Address {@link byte[]}
     * @param panIpv6Prefix {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getGatewayConfigurationSet(byte[] lanIpv6Address, Integer lanIpv6PrefixLength,
            byte[] portalIpv6Prefix, Integer portalIpv6PrefixLength, byte[] defaultGatewayIpv6Address,
            byte[] panIpv6Prefix) {
        logger.debug("Creating command message GATEWAY_CONFIGURATION_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(GATEWAY_CONFIGURATION_SET);

        // Process 'LAN IPv6 Address'
        if (lanIpv6Address != null) {
            if (lanIpv6Address.length > 16) {
                throw new IllegalArgumentException("Length of array lanIpv6Address exceeds maximum length of 16 bytes");
            }
            try {
                outputData.write(lanIpv6Address);
            } catch (IOException e) {
            }
        }

        // Process 'LAN IPv6 Prefix Length'
        outputData.write(lanIpv6PrefixLength);

        // Process 'Portal IPv6 Prefix'
        if (portalIpv6Prefix != null) {
            if (portalIpv6Prefix.length > 16) {
                throw new IllegalArgumentException("Length of array portalIpv6Prefix exceeds maximum length of 16 bytes");
            }
            try {
                outputData.write(portalIpv6Prefix);
            } catch (IOException e) {
            }
        }

        // Process 'Portal IPv6 Prefix Length'
        outputData.write(portalIpv6PrefixLength);

        // Process 'Default Gateway IPv6 Address'
        if (defaultGatewayIpv6Address != null) {
            if (defaultGatewayIpv6Address.length > 16) {
                throw new IllegalArgumentException("Length of array defaultGatewayIpv6Address exceeds maximum length of 16 bytes");
            }
            try {
                outputData.write(defaultGatewayIpv6Address);
            } catch (IOException e) {
            }
        }

        // Process 'PAN IPv6 Prefix'
        if (panIpv6Prefix != null) {
            if (panIpv6Prefix.length > 16) {
                throw new IllegalArgumentException("Length of array panIpv6Prefix exceeds maximum length of 16 bytes");
            }
            try {
                outputData.write(panIpv6Prefix);
            } catch (IOException e) {
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the GATEWAY_CONFIGURATION_SET command.
     * <p>
     * Gateway Configuration Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>LAN_IPV6_ADDRESS {@link byte[]}
     * <li>LAN_IPV6_PREFIX_LENGTH {@link Integer}
     * <li>PORTAL_IPV6_PREFIX {@link byte[]}
     * <li>PORTAL_IPV6_PREFIX_LENGTH {@link Integer}
     * <li>DEFAULT_GATEWAY_IPV6_ADDRESS {@link byte[]}
     * <li>PAN_IPV6_PREFIX {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleGatewayConfigurationSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'LAN IPv6 Address'
        int lenLanIpv6Address = Math.min(16, payload.length - 2);
        byte[] valLanIpv6Address = new byte[lenLanIpv6Address];
        for (int cntLanIpv6Address = 0; cntLanIpv6Address < lenLanIpv6Address; cntLanIpv6Address++) {
            valLanIpv6Address[cntLanIpv6Address] = payload[2 + cntLanIpv6Address];
        }
        response.put("LAN_IPV6_ADDRESS", valLanIpv6Address);

        // Process 'LAN IPv6 Prefix Length'
        response.put("LAN_IPV6_PREFIX_LENGTH", Integer.valueOf(payload[18]));

        // Process 'Portal IPv6 Prefix'
        int lenPortalIpv6Prefix = Math.min(16, payload.length - 19);
        byte[] valPortalIpv6Prefix = new byte[lenPortalIpv6Prefix];
        for (int cntPortalIpv6Prefix = 0; cntPortalIpv6Prefix < lenPortalIpv6Prefix; cntPortalIpv6Prefix++) {
            valPortalIpv6Prefix[cntPortalIpv6Prefix] = payload[19 + cntPortalIpv6Prefix];
        }
        response.put("PORTAL_IPV6_PREFIX", valPortalIpv6Prefix);

        // Process 'Portal IPv6 Prefix Length'
        response.put("PORTAL_IPV6_PREFIX_LENGTH", Integer.valueOf(payload[35]));

        // Process 'Default Gateway IPv6 Address'
        int lenDefaultGatewayIpv6Address = Math.min(16, payload.length - 36);
        byte[] valDefaultGatewayIpv6Address = new byte[lenDefaultGatewayIpv6Address];
        for (int cntDefaultGatewayIpv6Address = 0; cntDefaultGatewayIpv6Address < lenDefaultGatewayIpv6Address; cntDefaultGatewayIpv6Address++) {
            valDefaultGatewayIpv6Address[cntDefaultGatewayIpv6Address] = payload[36 + cntDefaultGatewayIpv6Address];
        }
        response.put("DEFAULT_GATEWAY_IPV6_ADDRESS", valDefaultGatewayIpv6Address);

        // Process 'PAN IPv6 Prefix'
        int lenPanIpv6Prefix = Math.min(16, payload.length - 52);
        byte[] valPanIpv6Prefix = new byte[lenPanIpv6Prefix];
        for (int cntPanIpv6Prefix = 0; cntPanIpv6Prefix < lenPanIpv6Prefix; cntPanIpv6Prefix++) {
            valPanIpv6Prefix[cntPanIpv6Prefix] = payload[52 + cntPanIpv6Prefix];
        }
        response.put("PAN_IPV6_PREFIX", valPanIpv6Prefix);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the GATEWAY_CONFIGURATION_STATUS command.
     * <p>
     * Gateway Configuration Status
     *
     * @param status {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getGatewayConfigurationStatus(Integer status) {
        logger.debug("Creating command message GATEWAY_CONFIGURATION_STATUS version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(GATEWAY_CONFIGURATION_STATUS);

        // Process 'Status'
        outputData.write(status);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the GATEWAY_CONFIGURATION_STATUS command.
     * <p>
     * Gateway Configuration Status
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>STATUS {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleGatewayConfigurationStatus(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Status'
        response.put("STATUS", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the GATEWAY_CONFIGURATION_GET command.
     * <p>
     * Gateway Configuration Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getGatewayConfigurationGet() {
        logger.debug("Creating command message GATEWAY_CONFIGURATION_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(GATEWAY_CONFIGURATION_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the GATEWAY_CONFIGURATION_GET command.
     * <p>
     * Gateway Configuration Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleGatewayConfigurationGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the GATEWAY_CONFIGURATION_REPORT command.
     * <p>
     * Gateway Configuration Report
     *
     * @param lanIpv6Address {@link byte[]}
     * @param lanIpv6PrefixLength {@link Integer}
     * @param portalIpv6Prefix {@link byte[]}
     * @param portalIpv6PrefixLength {@link Integer}
     * @param defaultGatewayIpv6Address {@link byte[]}
     * @param panIpv6Prefix {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getGatewayConfigurationReport(byte[] lanIpv6Address, Integer lanIpv6PrefixLength,
            byte[] portalIpv6Prefix, Integer portalIpv6PrefixLength, byte[] defaultGatewayIpv6Address,
            byte[] panIpv6Prefix) {
        logger.debug("Creating command message GATEWAY_CONFIGURATION_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(GATEWAY_CONFIGURATION_REPORT);

        // Process 'LAN IPv6 Address'
        if (lanIpv6Address != null) {
            if (lanIpv6Address.length > 16) {
                throw new IllegalArgumentException("Length of array lanIpv6Address exceeds maximum length of 16 bytes");
            }
            try {
                outputData.write(lanIpv6Address);
            } catch (IOException e) {
            }
        }

        // Process 'LAN IPv6 Prefix Length'
        outputData.write(lanIpv6PrefixLength);

        // Process 'Portal IPv6 Prefix'
        if (portalIpv6Prefix != null) {
            if (portalIpv6Prefix.length > 16) {
                throw new IllegalArgumentException("Length of array portalIpv6Prefix exceeds maximum length of 16 bytes");
            }
            try {
                outputData.write(portalIpv6Prefix);
            } catch (IOException e) {
            }
        }

        // Process 'Portal IPv6 Prefix Length'
        outputData.write(portalIpv6PrefixLength);

        // Process 'Default Gateway IPv6 Address'
        if (defaultGatewayIpv6Address != null) {
            if (defaultGatewayIpv6Address.length > 16) {
                throw new IllegalArgumentException("Length of array defaultGatewayIpv6Address exceeds maximum length of 16 bytes");
            }
            try {
                outputData.write(defaultGatewayIpv6Address);
            } catch (IOException e) {
            }
        }

        // Process 'PAN IPv6 Prefix'
        if (panIpv6Prefix != null) {
            if (panIpv6Prefix.length > 16) {
                throw new IllegalArgumentException("Length of array panIpv6Prefix exceeds maximum length of 16 bytes");
            }
            try {
                outputData.write(panIpv6Prefix);
            } catch (IOException e) {
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the GATEWAY_CONFIGURATION_REPORT command.
     * <p>
     * Gateway Configuration Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>LAN_IPV6_ADDRESS {@link byte[]}
     * <li>LAN_IPV6_PREFIX_LENGTH {@link Integer}
     * <li>PORTAL_IPV6_PREFIX {@link byte[]}
     * <li>PORTAL_IPV6_PREFIX_LENGTH {@link Integer}
     * <li>DEFAULT_GATEWAY_IPV6_ADDRESS {@link byte[]}
     * <li>PAN_IPV6_PREFIX {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleGatewayConfigurationReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'LAN IPv6 Address'
        int lenLanIpv6Address = Math.min(16, payload.length - 2);
        byte[] valLanIpv6Address = new byte[lenLanIpv6Address];
        for (int cntLanIpv6Address = 0; cntLanIpv6Address < lenLanIpv6Address; cntLanIpv6Address++) {
            valLanIpv6Address[cntLanIpv6Address] = payload[2 + cntLanIpv6Address];
        }
        response.put("LAN_IPV6_ADDRESS", valLanIpv6Address);

        // Process 'LAN IPv6 Prefix Length'
        response.put("LAN_IPV6_PREFIX_LENGTH", Integer.valueOf(payload[18]));

        // Process 'Portal IPv6 Prefix'
        int lenPortalIpv6Prefix = Math.min(16, payload.length - 19);
        byte[] valPortalIpv6Prefix = new byte[lenPortalIpv6Prefix];
        for (int cntPortalIpv6Prefix = 0; cntPortalIpv6Prefix < lenPortalIpv6Prefix; cntPortalIpv6Prefix++) {
            valPortalIpv6Prefix[cntPortalIpv6Prefix] = payload[19 + cntPortalIpv6Prefix];
        }
        response.put("PORTAL_IPV6_PREFIX", valPortalIpv6Prefix);

        // Process 'Portal IPv6 Prefix Length'
        response.put("PORTAL_IPV6_PREFIX_LENGTH", Integer.valueOf(payload[35]));

        // Process 'Default Gateway IPv6 Address'
        int lenDefaultGatewayIpv6Address = Math.min(16, payload.length - 36);
        byte[] valDefaultGatewayIpv6Address = new byte[lenDefaultGatewayIpv6Address];
        for (int cntDefaultGatewayIpv6Address = 0; cntDefaultGatewayIpv6Address < lenDefaultGatewayIpv6Address; cntDefaultGatewayIpv6Address++) {
            valDefaultGatewayIpv6Address[cntDefaultGatewayIpv6Address] = payload[36 + cntDefaultGatewayIpv6Address];
        }
        response.put("DEFAULT_GATEWAY_IPV6_ADDRESS", valDefaultGatewayIpv6Address);

        // Process 'PAN IPv6 Prefix'
        int lenPanIpv6Prefix = Math.min(16, payload.length - 52);
        byte[] valPanIpv6Prefix = new byte[lenPanIpv6Prefix];
        for (int cntPanIpv6Prefix = 0; cntPanIpv6Prefix < lenPanIpv6Prefix; cntPanIpv6Prefix++) {
            valPanIpv6Prefix[cntPanIpv6Prefix] = payload[52 + cntPanIpv6Prefix];
        }
        response.put("PAN_IPV6_PREFIX", valPanIpv6Prefix);

        // Return the map of processed response data;
        return response;
    }
}
