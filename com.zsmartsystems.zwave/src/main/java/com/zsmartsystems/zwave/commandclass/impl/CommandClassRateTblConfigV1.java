/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_RATE_TBL_CONFIG</b> version <b>1</b>.
 * <p>
 * Command Class Rate Tbl Config
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x48.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassRateTblConfigV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassRateTblConfigV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_RATE_TBL_CONFIG
     */
    public final static int COMMAND_CLASS_KEY = 0x48;

    /**
     * Rate Tbl Set Command Constant
     */
    public final static int RATE_TBL_SET = 0x01;
    /**
     * Rate Tbl Remove Command Constant
     */
    public final static int RATE_TBL_REMOVE = 0x02;


    /**
     * Creates a new message with the RATE_TBL_SET command.
     * <p>
     * Rate Tbl Set
     *
     * @param rateParameterSetId {@link Integer}
     * @param rateType {@link Integer}
     * @param rateCharacter {@link byte[]}
     * @param startHourLocalTime {@link Integer}
     * @param startMinuteLocalTime {@link Integer}
     * @param durationMinute {@link Integer}
     * @param consumptionScale {@link Integer}
     * @param consumptionPrecision {@link Integer}
     * @param minConsumptionValue {@link Long}
     * @param maxConsumptionValue {@link Long}
     * @param maxDemandScale {@link Integer}
     * @param maxDemandPrecision {@link Integer}
     * @param maxDemandValue {@link Long}
     * @param dcpRateId {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getRateTblSet(Integer rateParameterSetId, Integer rateType, byte[] rateCharacter,
            Integer startHourLocalTime, Integer startMinuteLocalTime, Integer durationMinute, Integer consumptionScale,
            Integer consumptionPrecision, Long minConsumptionValue, Long maxConsumptionValue, Integer maxDemandScale,
            Integer maxDemandPrecision, Long maxDemandValue, Integer dcpRateId) {
        logger.debug("Creating command message RATE_TBL_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(RATE_TBL_SET);

        // Process 'Rate Parameter Set ID'
        outputData.write(rateParameterSetId);

        // Process 'Properties1'
        // Number of Rate Char is used by 'Rate Character'
        int numberOfRateChar = rateCharacter.length;
        int valProperties1 = 0;
        valProperties1 |= numberOfRateChar & 0x1F;
        valProperties1 |= ((rateType << 5) & 0x60);
        outputData.write(valProperties1);

        // Process 'Rate Character'
        if (rateCharacter != null) {
            try {
                outputData.write(rateCharacter);
            } catch (IOException e) {
            }
        }

        // Process 'Start Hour Local Time'
        outputData.write(startHourLocalTime);

        // Process 'Start Minute Local Time'
        outputData.write(startMinuteLocalTime);

        // Process 'Duration Minute'
        outputData.write((durationMinute >> 8) & 0xff);
        outputData.write(durationMinute & 0xff);

        // Process 'Properties2'
        int valProperties2 = 0;
        valProperties2 |= consumptionScale & 0x1F;
        valProperties2 |= ((consumptionPrecision << 5) & 0xE0);
        outputData.write(valProperties2);

        // Process 'Min Consumption Value'
        outputData.write((byte) ((minConsumptionValue >> 24) & 0xff));
        outputData.write((byte) ((minConsumptionValue >> 16) & 0xff));
        outputData.write((byte) ((minConsumptionValue >> 8) & 0xff));
        outputData.write((byte) (minConsumptionValue & 0xff));

        // Process 'Max Consumption Value'
        outputData.write((byte) ((maxConsumptionValue >> 24) & 0xff));
        outputData.write((byte) ((maxConsumptionValue >> 16) & 0xff));
        outputData.write((byte) ((maxConsumptionValue >> 8) & 0xff));
        outputData.write((byte) (maxConsumptionValue & 0xff));

        // Process 'Properties3'
        int valProperties3 = 0;
        valProperties3 |= maxDemandScale & 0x1F;
        valProperties3 |= ((maxDemandPrecision << 5) & 0xE0);
        outputData.write(valProperties3);

        // Process 'Max Demand Value'
        outputData.write((byte) ((maxDemandValue >> 24) & 0xff));
        outputData.write((byte) ((maxDemandValue >> 16) & 0xff));
        outputData.write((byte) ((maxDemandValue >> 8) & 0xff));
        outputData.write((byte) (maxDemandValue & 0xff));

        // Process 'DCP Rate ID'
        outputData.write(dcpRateId);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the RATE_TBL_SET command.
     * <p>
     * Rate Tbl Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>RATE_PARAMETER_SET_ID {@link Integer}
     * <li>RATE_TYPE {@link Integer}
     * <li>RATE_CHARACTER {@link byte[]}
     * <li>START_HOUR_LOCAL_TIME {@link Integer}
     * <li>START_MINUTE_LOCAL_TIME {@link Integer}
     * <li>DURATION_MINUTE {@link Integer}
     * <li>CONSUMPTION_SCALE {@link Integer}
     * <li>CONSUMPTION_PRECISION {@link Integer}
     * <li>MIN_CONSUMPTION_VALUE {@link Long}
     * <li>MAX_CONSUMPTION_VALUE {@link Long}
     * <li>MAX_DEMAND_SCALE {@link Integer}
     * <li>MAX_DEMAND_PRECISION {@link Integer}
     * <li>MAX_DEMAND_VALUE {@link Long}
     * <li>DCP_RATE_ID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleRateTblSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Rate Parameter Set ID'
        response.put("RATE_PARAMETER_SET_ID", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Properties1'
        // Number of Rate Char is used by 'Rate Character'
        int varNumberOfRateChar = payload[msgOffset] & 0x1F;
        response.put("RATE_TYPE", Integer.valueOf(payload[msgOffset] & 0x60 >> 5));
        msgOffset += 1;

        // Process 'Rate Character'
        ByteArrayOutputStream valRateCharacter = new ByteArrayOutputStream();
        for (int cntRateCharacter = 0; cntRateCharacter < varNumberOfRateChar; cntRateCharacter++) {
            valRateCharacter.write(payload[msgOffset + cntRateCharacter]);
        }
        response.put("RATE_CHARACTER", valRateCharacter.toByteArray());
        msgOffset += varNumberOfRateChar;

        // Process 'Start Hour Local Time'
        response.put("START_HOUR_LOCAL_TIME", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Start Minute Local Time'
        response.put("START_MINUTE_LOCAL_TIME", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Duration Minute'
        response.put("DURATION_MINUTE", Integer.valueOf(((payload[msgOffset] & 0xff) << 8) + (payload[msgOffset + 1] & 0xff)));
        msgOffset += 2;

        // Process 'Properties2'
        response.put("CONSUMPTION_SCALE", Integer.valueOf(payload[msgOffset] & 0x1F));
        response.put("CONSUMPTION_PRECISION", Integer.valueOf(payload[msgOffset] & 0xE0 >> 5));
        msgOffset += 1;

        // Process 'Min Consumption Value'
        response.put("MIN_CONSUMPTION_VALUE", Long.valueOf((payload[msgOffset] << 24) + (payload[msgOffset + 1] << 16) + (payload[msgOffset + 2] << 8) + payload[msgOffset + 3]));
        msgOffset += 4;

        // Process 'Max Consumption Value'
        response.put("MAX_CONSUMPTION_VALUE", Long.valueOf((payload[msgOffset] << 24) + (payload[msgOffset + 1] << 16) + (payload[msgOffset + 2] << 8) + payload[msgOffset + 3]));
        msgOffset += 4;

        // Process 'Properties3'
        response.put("MAX_DEMAND_SCALE", Integer.valueOf(payload[msgOffset] & 0x1F));
        response.put("MAX_DEMAND_PRECISION", Integer.valueOf(payload[msgOffset] & 0xE0 >> 5));
        msgOffset += 1;

        // Process 'Max Demand Value'
        response.put("MAX_DEMAND_VALUE", Long.valueOf((payload[msgOffset] << 24) + (payload[msgOffset + 1] << 16) + (payload[msgOffset + 2] << 8) + payload[msgOffset + 3]));
        msgOffset += 4;

        // Process 'DCP Rate ID'
        response.put("DCP_RATE_ID", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the RATE_TBL_REMOVE command.
     * <p>
     * Rate Tbl Remove
     *
     * @param rateParameterSetId {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getRateTblRemove(byte[] rateParameterSetId) {
        logger.debug("Creating command message RATE_TBL_REMOVE version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(RATE_TBL_REMOVE);

        // Process 'Properties1'
        // Rate Parameter Set IDs is used by 'Rate Parameter Set ID'
        int rateParameterSetIds = rateParameterSetId.length;
        outputData.write(rateParameterSetIds & 0x3F);

        // Process 'Rate Parameter Set ID'
        if (rateParameterSetId != null) {
            try {
                outputData.write(rateParameterSetId);
            } catch (IOException e) {
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the RATE_TBL_REMOVE command.
     * <p>
     * Rate Tbl Remove
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>RATE_PARAMETER_SET_ID {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleRateTblRemove(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Properties1'
        // Rate Parameter Set IDs is used by 'Rate Parameter Set ID'
        int varRateParameterSetIds = payload[msgOffset] & 0x3F;
        msgOffset += 1;

        // Process 'Rate Parameter Set ID'
        response.put("RATE_PARAMETER_SET_ID", Integer.valueOf(payload[msgOffset]));
        msgOffset += payload[msgOffset - 1];

        // Return the map of processed response data;
        return response;
    }
}
