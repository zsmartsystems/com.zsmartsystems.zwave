/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_HRV_STATUS</b> version <b>1</b>.
 * <p>
 * Command Class Hrv Status
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x37.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassHrvStatusV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassHrvStatusV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_HRV_STATUS
     */
    public final static int COMMAND_CLASS_KEY = 0x37;

    /**
     * Hrv Status Get Command Constant
     */
    public final static int HRV_STATUS_GET = 0x01;
    /**
     * Hrv Status Report Command Constant
     */
    public final static int HRV_STATUS_REPORT = 0x02;
    /**
     * Hrv Status Supported Get Command Constant
     */
    public final static int HRV_STATUS_SUPPORTED_GET = 0x03;
    /**
     * Hrv Status Supported Report Command Constant
     */
    public final static int HRV_STATUS_SUPPORTED_REPORT = 0x04;

    /**
     * Map holding constants for HrvStatusGetStatusParameter
     */
    private static Map<Integer, String> constantHrvStatusGetStatusParameter = new HashMap<Integer, String>();

    /**
     * Map holding constants for HrvStatusSupportedReportBitMask
     */
    private static Map<Integer, String> constantHrvStatusSupportedReportBitMask = new HashMap<Integer, String>();

    /**
     * Map holding constants for HrvStatusReportStatusParameter
     */
    private static Map<Integer, String> constantHrvStatusReportStatusParameter = new HashMap<Integer, String>();

    static {
        // Constants for HrvStatusGetStatusParameter
        constantHrvStatusGetStatusParameter.put(0x00, "OUTDOOR_AIR_TEMPERATURE");
        constantHrvStatusGetStatusParameter.put(0x01, "SUPPLY_AIR_TEMPERATURE");
        constantHrvStatusGetStatusParameter.put(0x02, "EXHAUST_AIR_TEMPERATURE");
        constantHrvStatusGetStatusParameter.put(0x03, "DISCHARGE_AIR_TEMPERATURE");
        constantHrvStatusGetStatusParameter.put(0x04, "ROOM_TEMPERATURE");
        constantHrvStatusGetStatusParameter.put(0x05, "RELATIVE_HUMIDITY_IN_ROOM");
        constantHrvStatusGetStatusParameter.put(0x06, "REMAINING_FILTER_LIFE");

        // Constants for HrvStatusSupportedReportBitMask
        constantHrvStatusSupportedReportBitMask.put(0x00, "OUTDOOR_AIR_TEMPERATURE");
        constantHrvStatusSupportedReportBitMask.put(0x01, "SUPPLY_AIR_TEMPERATURE");
        constantHrvStatusSupportedReportBitMask.put(0x02, "EXHAUST_AIR_TEMPERATURE");
        constantHrvStatusSupportedReportBitMask.put(0x03, "DISCHARGE_AIR_TEMPERATURE");
        constantHrvStatusSupportedReportBitMask.put(0x04, "ROOM_TEMPERATURE");
        constantHrvStatusSupportedReportBitMask.put(0x05, "RELATIVE_HUMIDITY_IN_ROOM");
        constantHrvStatusSupportedReportBitMask.put(0x06, "REMAINING_FILTER_LIFE");

        // Constants for HrvStatusReportStatusParameter
        constantHrvStatusReportStatusParameter.put(0x00, "OUTDOOR_AIR_TEMPERATURE");
        constantHrvStatusReportStatusParameter.put(0x01, "SUPPLY_AIR_TEMPERATURE");
        constantHrvStatusReportStatusParameter.put(0x02, "EXHAUST_AIR_TEMPERATURE");
        constantHrvStatusReportStatusParameter.put(0x03, "DISCHARGE_AIR_TEMPERATURE");
        constantHrvStatusReportStatusParameter.put(0x04, "ROOM_TEMPERATURE");
        constantHrvStatusReportStatusParameter.put(0x05, "RELATIVE_HUMIDITY_IN_ROOM");
        constantHrvStatusReportStatusParameter.put(0x06, "REMAINING_FILTER_LIFE");
    }

    /**
     * Creates a new message with the HRV_STATUS_GET command.
     * <p>
     * Hrv Status Get
     *
     * @param statusParameter {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>OUTDOOR_AIR_TEMPERATURE
     *            <li>SUPPLY_AIR_TEMPERATURE
     *            <li>EXHAUST_AIR_TEMPERATURE
     *            <li>DISCHARGE_AIR_TEMPERATURE
     *            <li>ROOM_TEMPERATURE
     *            <li>RELATIVE_HUMIDITY_IN_ROOM
     *            <li>REMAINING_FILTER_LIFE
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getHrvStatusGet(String statusParameter) {
        logger.debug("Creating command message HRV_STATUS_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(HRV_STATUS_GET);

        // Process 'Status Parameter'
        boolean foundStatusParameter = false;
        for (Integer entry : constantHrvStatusGetStatusParameter.keySet()) {
            if (constantHrvStatusGetStatusParameter.get(entry).equals(statusParameter)) {
                outputData.write(entry);
                foundStatusParameter = true;
                break;
            }
        }
        if (!foundStatusParameter) {
            throw new IllegalArgumentException("Unknown constant value '" + statusParameter + "' for statusParameter");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the HRV_STATUS_GET command.
     * <p>
     * Hrv Status Get
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>STATUS_PARAMETER {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>OUTDOOR_AIR_TEMPERATURE
     * <li>SUPPLY_AIR_TEMPERATURE
     * <li>EXHAUST_AIR_TEMPERATURE
     * <li>DISCHARGE_AIR_TEMPERATURE
     * <li>ROOM_TEMPERATURE
     * <li>RELATIVE_HUMIDITY_IN_ROOM
     * <li>REMAINING_FILTER_LIFE
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleHrvStatusGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Status Parameter'
        response.put("STATUS_PARAMETER", constantHrvStatusGetStatusParameter.get(payload[2] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the HRV_STATUS_REPORT command.
     * <p>
     * Hrv Status Report
     *
     * @param statusParameter {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>OUTDOOR_AIR_TEMPERATURE
     *            <li>SUPPLY_AIR_TEMPERATURE
     *            <li>EXHAUST_AIR_TEMPERATURE
     *            <li>DISCHARGE_AIR_TEMPERATURE
     *            <li>ROOM_TEMPERATURE
     *            <li>RELATIVE_HUMIDITY_IN_ROOM
     *            <li>REMAINING_FILTER_LIFE
     *            </ul>
     * @param size {@link Integer}
     * @param scale {@link Integer}
     * @param precision {@link Integer}
     * @param value {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getHrvStatusReport(String statusParameter, Integer size, Integer scale, Integer precision,
            byte[] value) {
        logger.debug("Creating command message HRV_STATUS_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(HRV_STATUS_REPORT);

        // Process 'Status Parameter'
        boolean foundStatusParameter = false;
        for (Integer entry : constantHrvStatusReportStatusParameter.keySet()) {
            if (constantHrvStatusReportStatusParameter.get(entry).equals(statusParameter)) {
                outputData.write(entry);
                foundStatusParameter = true;
                break;
            }
        }
        if (!foundStatusParameter) {
            throw new IllegalArgumentException("Unknown constant value '" + statusParameter + "' for statusParameter");
        }

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= size & 0x07;
        valProperties1 |= ((scale << 3) & 0x18);
        valProperties1 |= ((precision << 5) & 0xE0);
        outputData.write(valProperties1);

        // Process 'Value'
        if (value != null) {
            try {
                outputData.write(value);
            } catch (IOException e) {
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the HRV_STATUS_REPORT command.
     * <p>
     * Hrv Status Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>STATUS_PARAMETER {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>OUTDOOR_AIR_TEMPERATURE
     * <li>SUPPLY_AIR_TEMPERATURE
     * <li>EXHAUST_AIR_TEMPERATURE
     * <li>DISCHARGE_AIR_TEMPERATURE
     * <li>ROOM_TEMPERATURE
     * <li>RELATIVE_HUMIDITY_IN_ROOM
     * <li>REMAINING_FILTER_LIFE
     * </ul>
     * <li>SIZE {@link Integer}
     * <li>SCALE {@link Integer}
     * <li>PRECISION {@link Integer}
     * <li>VALUE {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleHrvStatusReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Status Parameter'
        response.put("STATUS_PARAMETER", constantHrvStatusReportStatusParameter.get(payload[msgOffset] & 0xff));
        msgOffset += 1;

        // Process 'Properties1'
        response.put("SIZE", Integer.valueOf(payload[msgOffset] & 0x07));
        response.put("SCALE", Integer.valueOf(payload[msgOffset] & 0x18 >> 3));
        response.put("PRECISION", Integer.valueOf(payload[msgOffset] & 0xE0 >> 5));
        msgOffset += 1;

        // Process 'Value'
        ByteArrayOutputStream valValue = new ByteArrayOutputStream();
        while (msgOffset < payload.length) {
            valValue.write(payload[msgOffset]);
            msgOffset++;
        }
        response.put("VALUE", valValue);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the HRV_STATUS_SUPPORTED_GET command.
     * <p>
     * Hrv Status Supported Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getHrvStatusSupportedGet() {
        logger.debug("Creating command message HRV_STATUS_SUPPORTED_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(HRV_STATUS_SUPPORTED_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the HRV_STATUS_SUPPORTED_GET command.
     * <p>
     * Hrv Status Supported Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleHrvStatusSupportedGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the HRV_STATUS_SUPPORTED_REPORT command.
     * <p>
     * Hrv Status Supported Report
     *
     * @param bitMask {@link List<String>}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>OUTDOOR_AIR_TEMPERATURE
     *            <li>SUPPLY_AIR_TEMPERATURE
     *            <li>EXHAUST_AIR_TEMPERATURE
     *            <li>DISCHARGE_AIR_TEMPERATURE
     *            <li>ROOM_TEMPERATURE
     *            <li>RELATIVE_HUMIDITY_IN_ROOM
     *            <li>REMAINING_FILTER_LIFE
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getHrvStatusSupportedReport(List<String> bitMask) {
        logger.debug("Creating command message HRV_STATUS_SUPPORTED_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(HRV_STATUS_SUPPORTED_REPORT);

        // Process 'Bit Mask'
        int valBitMask = 0;
        for (String value : bitMask) {
            boolean foundBitMask = false;
            for (Integer entry : constantHrvStatusSupportedReportBitMask.keySet()) {
                if (constantHrvStatusSupportedReportBitMask.get(entry).equals(value)) {
                    foundBitMask = true;
                    valBitMask += entry;
                    break;
                }
            }
            if (!foundBitMask) {
                throw new IllegalArgumentException("Unknown constant value '" + bitMask + "' for bitMask");
            }
        }
        outputData.write(valBitMask);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the HRV_STATUS_SUPPORTED_REPORT command.
     * <p>
     * Hrv Status Supported Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>BIT_MASK {@link List}<{@link String}>
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>OUTDOOR_AIR_TEMPERATURE
     * <li>SUPPLY_AIR_TEMPERATURE
     * <li>EXHAUST_AIR_TEMPERATURE
     * <li>DISCHARGE_AIR_TEMPERATURE
     * <li>ROOM_TEMPERATURE
     * <li>RELATIVE_HUMIDITY_IN_ROOM
     * <li>REMAINING_FILTER_LIFE
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleHrvStatusSupportedReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Bit Mask'
        List<String> responseBitMask = new ArrayList<String>();
        for (int cntBitMask = 0; cntBitMask < (payload.length - 2) * 8; cntBitMask++) {
            if ((payload[2 + (cntBitMask / 8)] & (1 << cntBitMask % 8)) == 0) {
                continue;
            }
            responseBitMask.add(constantHrvStatusSupportedReportBitMask.get(cntBitMask));
        }
        response.put("BIT_MASK", responseBitMask);

        // Return the map of processed response data;
        return response;
    }
}
