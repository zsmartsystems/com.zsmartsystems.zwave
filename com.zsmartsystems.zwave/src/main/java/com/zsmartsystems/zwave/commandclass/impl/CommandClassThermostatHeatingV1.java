/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_THERMOSTAT_HEATING</b> version <b>1</b>.
 * <p>
 * Command Class Thermostat Heating
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x38.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassThermostatHeatingV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassThermostatHeatingV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_THERMOSTAT_HEATING
     */
    public final static int COMMAND_CLASS_KEY = 0x38;

    /**
     * Thermostat Heating Mode Set Command Constant
     */
    public final static int THERMOSTAT_HEATING_MODE_SET = 0x01;
    /**
     * Thermostat Heating Mode Get Command Constant
     */
    public final static int THERMOSTAT_HEATING_MODE_GET = 0x02;
    /**
     * Thermostat Heating Mode Report Command Constant
     */
    public final static int THERMOSTAT_HEATING_MODE_REPORT = 0x03;
    /**
     * Thermostat Heating Setpoint Set Command Constant
     */
    public final static int THERMOSTAT_HEATING_SETPOINT_SET = 0x04;
    /**
     * Thermostat Heating Setpoint Get Command Constant
     */
    public final static int THERMOSTAT_HEATING_SETPOINT_GET = 0x05;
    /**
     * Thermostat Heating Setpoint Report Command Constant
     */
    public final static int THERMOSTAT_HEATING_SETPOINT_REPORT = 0x06;
    /**
     * Thermostat Heating Relay Status Get Command Constant
     */
    public final static int THERMOSTAT_HEATING_RELAY_STATUS_GET = 0x09;
    /**
     * Thermostat Heating Relay Status Report Command Constant
     */
    public final static int THERMOSTAT_HEATING_RELAY_STATUS_REPORT = 0x0A;
    /**
     * Thermostat Heating Status Set Command Constant
     */
    public final static int THERMOSTAT_HEATING_STATUS_SET = 0x0B;
    /**
     * Thermostat Heating Status Get Command Constant
     */
    public final static int THERMOSTAT_HEATING_STATUS_GET = 0x0C;
    /**
     * Thermostat Heating Heating Status Report Command Constant
     */
    public final static int THERMOSTAT_HEATING_STATUS_REPORT = 0x0D;
    /**
     * Thermostat Heating Timed Off Set Command Constant
     */
    public final static int THERMOSTAT_HEATING_TIMED_OFF_SET = 0x11;

    /**
     * Map holding constants for ThermostatHeatingStatusReportStatus
     */
    private static Map<Integer, String> constantThermostatHeatingStatusReportStatus = new HashMap<Integer, String>();

    /**
     * Map holding constants for ThermostatHeatingModeSetMode
     */
    private static Map<Integer, String> constantThermostatHeatingModeSetMode = new HashMap<Integer, String>();

    /**
     * Map holding constants for ThermostatHeatingRelayStatusReportRelayStatus
     */
    private static Map<Integer, String> constantThermostatHeatingRelayStatusReportRelayStatus = new HashMap<Integer, String>();

    /**
     * Map holding constants for ThermostatHeatingModeReportMode
     */
    private static Map<Integer, String> constantThermostatHeatingModeReportMode = new HashMap<Integer, String>();

    /**
     * Map holding constants for ThermostatHeatingStatusSetStatus
     */
    private static Map<Integer, String> constantThermostatHeatingStatusSetStatus = new HashMap<Integer, String>();

    static {
        // Constants for ThermostatHeatingStatusReportStatus
        constantThermostatHeatingStatusReportStatus.put(0x00, "HEATING");
        constantThermostatHeatingStatusReportStatus.put(0x01, "COOLING");

        // Constants for ThermostatHeatingModeSetMode
        constantThermostatHeatingModeSetMode.put(0x00, "OFF");
        constantThermostatHeatingModeSetMode.put(0x01, "OFF_TIMED");
        constantThermostatHeatingModeSetMode.put(0x02, "OFF_3_HOURS");
        constantThermostatHeatingModeSetMode.put(0x03, "ANTI_FREEZE");
        constantThermostatHeatingModeSetMode.put(0x04, "MANUAL");
        constantThermostatHeatingModeSetMode.put(0x05, "TEMPORARY_MANUAL");
        constantThermostatHeatingModeSetMode.put(0x06, "AUTOMATIC");
        constantThermostatHeatingModeSetMode.put(0x07, "MANUAL_TIMED");

        // Constants for ThermostatHeatingRelayStatusReportRelayStatus
        constantThermostatHeatingRelayStatusReportRelayStatus.put(0x00, "OFF");
        constantThermostatHeatingRelayStatusReportRelayStatus.put(0x01, "ON");

        // Constants for ThermostatHeatingModeReportMode
        constantThermostatHeatingModeReportMode.put(0x00, "OFF");
        constantThermostatHeatingModeReportMode.put(0x01, "OFF_TIMED");
        constantThermostatHeatingModeReportMode.put(0x02, "OFF_3_HOURS");
        constantThermostatHeatingModeReportMode.put(0x03, "ANTI_FREEZE");
        constantThermostatHeatingModeReportMode.put(0x04, "MANUAL");
        constantThermostatHeatingModeReportMode.put(0x05, "TEMPORARY_MANUAL");
        constantThermostatHeatingModeReportMode.put(0x06, "AUTOMATIC");
        constantThermostatHeatingModeReportMode.put(0x07, "MANUAL_TIMED");

        // Constants for ThermostatHeatingStatusSetStatus
        constantThermostatHeatingStatusSetStatus.put(0x00, "HEATING");
        constantThermostatHeatingStatusSetStatus.put(0x01, "COOLING");
    }

    /**
     * Creates a new message with the THERMOSTAT_HEATING_MODE_SET command.
     * <p>
     * Thermostat Heating Mode Set
     *
     * @param mode {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>OFF
     *            <li>OFF_TIMED
     *            <li>OFF_3_HOURS
     *            <li>ANTI_FREEZE
     *            <li>MANUAL
     *            <li>TEMPORARY_MANUAL
     *            <li>AUTOMATIC
     *            <li>MANUAL_TIMED
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getThermostatHeatingModeSet(String mode) {
        logger.debug("Creating command message THERMOSTAT_HEATING_MODE_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(THERMOSTAT_HEATING_MODE_SET);

        // Process 'Mode'
        boolean foundMode = false;
        for (Integer entry : constantThermostatHeatingModeSetMode.keySet()) {
            if (constantThermostatHeatingModeSetMode.get(entry).equals(mode)) {
                outputData.write(entry);
                foundMode = true;
                break;
            }
        }
        if (!foundMode) {
            throw new IllegalArgumentException("Unknown constant value '" + mode + "' for mode");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the THERMOSTAT_HEATING_MODE_SET command.
     * <p>
     * Thermostat Heating Mode Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>MODE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>OFF
     * <li>OFF_TIMED
     * <li>OFF_3_HOURS
     * <li>ANTI_FREEZE
     * <li>MANUAL
     * <li>TEMPORARY_MANUAL
     * <li>AUTOMATIC
     * <li>MANUAL_TIMED
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleThermostatHeatingModeSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Mode'
        response.put("MODE", constantThermostatHeatingModeSetMode.get(payload[2] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the THERMOSTAT_HEATING_MODE_GET command.
     * <p>
     * Thermostat Heating Mode Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getThermostatHeatingModeGet() {
        logger.debug("Creating command message THERMOSTAT_HEATING_MODE_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(THERMOSTAT_HEATING_MODE_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the THERMOSTAT_HEATING_MODE_GET command.
     * <p>
     * Thermostat Heating Mode Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleThermostatHeatingModeGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the THERMOSTAT_HEATING_MODE_REPORT command.
     * <p>
     * Thermostat Heating Mode Report
     *
     * @param mode {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>OFF
     *            <li>OFF_TIMED
     *            <li>OFF_3_HOURS
     *            <li>ANTI_FREEZE
     *            <li>MANUAL
     *            <li>TEMPORARY_MANUAL
     *            <li>AUTOMATIC
     *            <li>MANUAL_TIMED
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getThermostatHeatingModeReport(String mode) {
        logger.debug("Creating command message THERMOSTAT_HEATING_MODE_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(THERMOSTAT_HEATING_MODE_REPORT);

        // Process 'Mode'
        boolean foundMode = false;
        for (Integer entry : constantThermostatHeatingModeReportMode.keySet()) {
            if (constantThermostatHeatingModeReportMode.get(entry).equals(mode)) {
                outputData.write(entry);
                foundMode = true;
                break;
            }
        }
        if (!foundMode) {
            throw new IllegalArgumentException("Unknown constant value '" + mode + "' for mode");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the THERMOSTAT_HEATING_MODE_REPORT command.
     * <p>
     * Thermostat Heating Mode Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>MODE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>OFF
     * <li>OFF_TIMED
     * <li>OFF_3_HOURS
     * <li>ANTI_FREEZE
     * <li>MANUAL
     * <li>TEMPORARY_MANUAL
     * <li>AUTOMATIC
     * <li>MANUAL_TIMED
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleThermostatHeatingModeReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Mode'
        response.put("MODE", constantThermostatHeatingModeReportMode.get(payload[2] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the THERMOSTAT_HEATING_SETPOINT_SET command.
     * <p>
     * Thermostat Heating Setpoint Set
     *
     * @param setpointNr {@link Integer}
     * @param scale {@link Integer}
     * @param precision {@link Integer}
     * @param value {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getThermostatHeatingSetpointSet(Integer setpointNr, Integer scale, Integer precision,
            byte[] value) {
        logger.debug("Creating command message THERMOSTAT_HEATING_SETPOINT_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(THERMOSTAT_HEATING_SETPOINT_SET);

        // Process 'Setpoint Nr'
        outputData.write(setpointNr);

        // Process 'Properties1'
        // Size is used by 'Value'
        int size = value.length;
        int valProperties1 = 0;
        valProperties1 |= size & 0x07;
        valProperties1 |= ((scale << 3) & 0x18);
        valProperties1 |= ((precision << 5) & 0xE0);
        outputData.write(valProperties1);

        // Process 'Value'
        if (value != null) {
            try {
                outputData.write(value);
            } catch (IOException e) {
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the THERMOSTAT_HEATING_SETPOINT_SET command.
     * <p>
     * Thermostat Heating Setpoint Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SETPOINT_NR {@link Integer}
     * <li>SCALE {@link Integer}
     * <li>PRECISION {@link Integer}
     * <li>VALUE {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleThermostatHeatingSetpointSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Setpoint Nr'
        response.put("SETPOINT_NR", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Properties1'
        // Size is used by 'Value'
        int varSize = payload[msgOffset] & 0x07;
        response.put("SCALE", Integer.valueOf(payload[msgOffset] & 0x18 >> 3));
        response.put("PRECISION", Integer.valueOf(payload[msgOffset] & 0xE0 >> 5));
        msgOffset += 1;

        // Process 'Value'
        ByteArrayOutputStream valValue = new ByteArrayOutputStream();
        for (int cntValue = 0; cntValue < varSize; cntValue++) {
            valValue.write(payload[msgOffset + cntValue]);
        }
        response.put("VALUE", valValue.toByteArray());
        msgOffset += varSize;

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the THERMOSTAT_HEATING_SETPOINT_GET command.
     * <p>
     * Thermostat Heating Setpoint Get
     *
     * @param setpointNr {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getThermostatHeatingSetpointGet(Integer setpointNr) {
        logger.debug("Creating command message THERMOSTAT_HEATING_SETPOINT_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(THERMOSTAT_HEATING_SETPOINT_GET);

        // Process 'Setpoint Nr'
        outputData.write(setpointNr);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the THERMOSTAT_HEATING_SETPOINT_GET command.
     * <p>
     * Thermostat Heating Setpoint Get
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SETPOINT_NR {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleThermostatHeatingSetpointGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Setpoint Nr'
        response.put("SETPOINT_NR", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the THERMOSTAT_HEATING_SETPOINT_REPORT command.
     * <p>
     * Thermostat Heating Setpoint Report
     *
     * @param setpointNr {@link Integer}
     * @param scale {@link Integer}
     * @param precision {@link Integer}
     * @param value {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getThermostatHeatingSetpointReport(Integer setpointNr, Integer scale, Integer precision,
            byte[] value) {
        logger.debug("Creating command message THERMOSTAT_HEATING_SETPOINT_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(THERMOSTAT_HEATING_SETPOINT_REPORT);

        // Process 'Setpoint Nr'
        outputData.write(setpointNr);

        // Process 'Properties1'
        // Size is used by 'Value'
        int size = value.length;
        int valProperties1 = 0;
        valProperties1 |= size & 0x07;
        valProperties1 |= ((scale << 3) & 0x18);
        valProperties1 |= ((precision << 5) & 0xE0);
        outputData.write(valProperties1);

        // Process 'Value'
        if (value != null) {
            try {
                outputData.write(value);
            } catch (IOException e) {
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the THERMOSTAT_HEATING_SETPOINT_REPORT command.
     * <p>
     * Thermostat Heating Setpoint Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SETPOINT_NR {@link Integer}
     * <li>SCALE {@link Integer}
     * <li>PRECISION {@link Integer}
     * <li>VALUE {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleThermostatHeatingSetpointReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Setpoint Nr'
        response.put("SETPOINT_NR", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Properties1'
        // Size is used by 'Value'
        int varSize = payload[msgOffset] & 0x07;
        response.put("SCALE", Integer.valueOf(payload[msgOffset] & 0x18 >> 3));
        response.put("PRECISION", Integer.valueOf(payload[msgOffset] & 0xE0 >> 5));
        msgOffset += 1;

        // Process 'Value'
        ByteArrayOutputStream valValue = new ByteArrayOutputStream();
        for (int cntValue = 0; cntValue < varSize; cntValue++) {
            valValue.write(payload[msgOffset + cntValue]);
        }
        response.put("VALUE", valValue.toByteArray());
        msgOffset += varSize;

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the THERMOSTAT_HEATING_RELAY_STATUS_GET command.
     * <p>
     * Thermostat Heating Relay Status Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getThermostatHeatingRelayStatusGet() {
        logger.debug("Creating command message THERMOSTAT_HEATING_RELAY_STATUS_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(THERMOSTAT_HEATING_RELAY_STATUS_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the THERMOSTAT_HEATING_RELAY_STATUS_GET command.
     * <p>
     * Thermostat Heating Relay Status Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleThermostatHeatingRelayStatusGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the THERMOSTAT_HEATING_RELAY_STATUS_REPORT command.
     * <p>
     * Thermostat Heating Relay Status Report
     *
     * @param relayStatus {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>OFF
     *            <li>ON
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getThermostatHeatingRelayStatusReport(String relayStatus) {
        logger.debug("Creating command message THERMOSTAT_HEATING_RELAY_STATUS_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(THERMOSTAT_HEATING_RELAY_STATUS_REPORT);

        // Process 'Relay Status'
        boolean foundRelayStatus = false;
        for (Integer entry : constantThermostatHeatingRelayStatusReportRelayStatus.keySet()) {
            if (constantThermostatHeatingRelayStatusReportRelayStatus.get(entry).equals(relayStatus)) {
                outputData.write(entry);
                foundRelayStatus = true;
                break;
            }
        }
        if (!foundRelayStatus) {
            throw new IllegalArgumentException("Unknown constant value '" + relayStatus + "' for relayStatus");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the THERMOSTAT_HEATING_RELAY_STATUS_REPORT command.
     * <p>
     * Thermostat Heating Relay Status Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>RELAY_STATUS {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>OFF
     * <li>ON
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleThermostatHeatingRelayStatusReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Relay Status'
        response.put("RELAY_STATUS", constantThermostatHeatingRelayStatusReportRelayStatus.get(payload[2] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the THERMOSTAT_HEATING_STATUS_SET command.
     * <p>
     * Thermostat Heating Status Set
     *
     * @param status {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>HEATING
     *            <li>COOLING
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getThermostatHeatingStatusSet(String status) {
        logger.debug("Creating command message THERMOSTAT_HEATING_STATUS_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(THERMOSTAT_HEATING_STATUS_SET);

        // Process 'Status'
        boolean foundStatus = false;
        for (Integer entry : constantThermostatHeatingStatusSetStatus.keySet()) {
            if (constantThermostatHeatingStatusSetStatus.get(entry).equals(status)) {
                outputData.write(entry);
                foundStatus = true;
                break;
            }
        }
        if (!foundStatus) {
            throw new IllegalArgumentException("Unknown constant value '" + status + "' for status");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the THERMOSTAT_HEATING_STATUS_SET command.
     * <p>
     * Thermostat Heating Status Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>STATUS {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>HEATING
     * <li>COOLING
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleThermostatHeatingStatusSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Status'
        response.put("STATUS", constantThermostatHeatingStatusSetStatus.get(payload[2] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the THERMOSTAT_HEATING_STATUS_GET command.
     * <p>
     * Thermostat Heating Status Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getThermostatHeatingStatusGet() {
        logger.debug("Creating command message THERMOSTAT_HEATING_STATUS_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(THERMOSTAT_HEATING_STATUS_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the THERMOSTAT_HEATING_STATUS_GET command.
     * <p>
     * Thermostat Heating Status Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleThermostatHeatingStatusGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the THERMOSTAT_HEATING_STATUS_REPORT command.
     * <p>
     * Thermostat Heating Heating Status Report
     *
     * @param status {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>HEATING
     *            <li>COOLING
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getThermostatHeatingStatusReport(String status) {
        logger.debug("Creating command message THERMOSTAT_HEATING_STATUS_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(THERMOSTAT_HEATING_STATUS_REPORT);

        // Process 'Status'
        boolean foundStatus = false;
        for (Integer entry : constantThermostatHeatingStatusReportStatus.keySet()) {
            if (constantThermostatHeatingStatusReportStatus.get(entry).equals(status)) {
                outputData.write(entry);
                foundStatus = true;
                break;
            }
        }
        if (!foundStatus) {
            throw new IllegalArgumentException("Unknown constant value '" + status + "' for status");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the THERMOSTAT_HEATING_STATUS_REPORT command.
     * <p>
     * Thermostat Heating Heating Status Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>STATUS {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>HEATING
     * <li>COOLING
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleThermostatHeatingStatusReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Status'
        response.put("STATUS", constantThermostatHeatingStatusReportStatus.get(payload[2] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the THERMOSTAT_HEATING_TIMED_OFF_SET command.
     * <p>
     * Thermostat Heating Timed Off Set
     *
     * @param minutes {@link Integer}
     * @param hours {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getThermostatHeatingTimedOffSet(Integer minutes, Integer hours) {
        logger.debug("Creating command message THERMOSTAT_HEATING_TIMED_OFF_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(THERMOSTAT_HEATING_TIMED_OFF_SET);

        // Process 'Minutes'
        outputData.write(minutes);

        // Process 'Hours'
        outputData.write(hours);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the THERMOSTAT_HEATING_TIMED_OFF_SET command.
     * <p>
     * Thermostat Heating Timed Off Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>MINUTES {@link Integer}
     * <li>HOURS {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleThermostatHeatingTimedOffSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Minutes'
        response.put("MINUTES", Integer.valueOf(payload[2]));

        // Process 'Hours'
        response.put("HOURS", Integer.valueOf(payload[3]));

        // Return the map of processed response data;
        return response;
    }
}
