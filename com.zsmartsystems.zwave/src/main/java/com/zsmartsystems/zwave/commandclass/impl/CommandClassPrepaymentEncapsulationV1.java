/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_PREPAYMENT_ENCAPSULATION</b> version <b>1</b>.
 * <p>
 * Command Class Prepayment Encapsulation
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x41.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassPrepaymentEncapsulationV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassPrepaymentEncapsulationV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_PREPAYMENT_ENCAPSULATION
     */
    public final static int COMMAND_CLASS_KEY = 0x41;

    /**
     * Cmd Encapsulation Command Constant
     */
    public final static int CMD_ENCAPSULATION = 0x01;


    /**
     * Creates a new message with the CMD_ENCAPSULATION command.
     * <p>
     * Cmd Encapsulation
     *
     * @param data {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getCmdEncapsulation(byte[] data) {
        logger.debug("Creating command message CMD_ENCAPSULATION version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CMD_ENCAPSULATION);

        // Process 'Data'
        if (data != null) {
            try {
                outputData.write(data);
            } catch (IOException e) {
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CMD_ENCAPSULATION command.
     * <p>
     * Cmd Encapsulation
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>DATA {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleCmdEncapsulation(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Data'
        ByteArrayOutputStream valData = new ByteArrayOutputStream();
        while (msgOffset < payload.length) {
            valData.write(payload[msgOffset]);
            msgOffset++;
        }
        response.put("DATA", valData);

        // Return the map of processed response data;
        return response;
    }
}
