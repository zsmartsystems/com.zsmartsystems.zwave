/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_SENSOR_CONFIGURATION</b> version <b>1</b>.
 * <p>
 * Command Class Sensor Configuration
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x9E.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassSensorConfigurationV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassSensorConfigurationV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_SENSOR_CONFIGURATION
     */
    public final static int COMMAND_CLASS_KEY = 0x9E;

    /**
     * Sensor Trigger Level Set Command Constant
     */
    public final static int SENSOR_TRIGGER_LEVEL_SET = 0x01;
    /**
     * Sensor Trigger Level Get Command Constant
     */
    public final static int SENSOR_TRIGGER_LEVEL_GET = 0x02;
    /**
     * Sensor Trigger Level Report Command Constant
     */
    public final static int SENSOR_TRIGGER_LEVEL_REPORT = 0x03;

    /**
     * Map holding constants for SensorTriggerLevelSetSensorType
     */
    private static Map<Integer, String> constantSensorTriggerLevelSetSensorType = new HashMap<Integer, String>();

    /**
     * Map holding constants for SensorTriggerLevelReportSensorType
     */
    private static Map<Integer, String> constantSensorTriggerLevelReportSensorType = new HashMap<Integer, String>();

    /**
     * Map holding constants for SensorTriggerLevelSetProperties1
     */
    private static Map<Integer, String> constantSensorTriggerLevelSetProperties1 = new HashMap<Integer, String>();

    static {
        // Constants for SensorTriggerLevelSetSensorType
        constantSensorTriggerLevelSetSensorType.put(0x01, "TEMPERATURE");
        constantSensorTriggerLevelSetSensorType.put(0x02, "GENERAL_PURPOSE_VALUE");
        constantSensorTriggerLevelSetSensorType.put(0x03, "LUMINANCE");
        constantSensorTriggerLevelSetSensorType.put(0x04, "POWER");
        constantSensorTriggerLevelSetSensorType.put(0x05, "RELATIVE_HUMIDITY");
        constantSensorTriggerLevelSetSensorType.put(0x06, "VELOCITY");
        constantSensorTriggerLevelSetSensorType.put(0x07, "DIRECTION");
        constantSensorTriggerLevelSetSensorType.put(0x08, "ATMOSPHERIC_PRESSURE");
        constantSensorTriggerLevelSetSensorType.put(0x09, "BAROMETRIC_PRESSURE");
        constantSensorTriggerLevelSetSensorType.put(0x0A, "SOLAR_RADIATION");
        constantSensorTriggerLevelSetSensorType.put(0x0B, "DEW_POINT");
        constantSensorTriggerLevelSetSensorType.put(0x0C, "RAIN_RATE");
        constantSensorTriggerLevelSetSensorType.put(0x0D, "TIDE_LEVEL");

        // Constants for SensorTriggerLevelReportSensorType
        constantSensorTriggerLevelReportSensorType.put(0x01, "TEMPERATURE");
        constantSensorTriggerLevelReportSensorType.put(0x02, "GENERAL_PURPOSE_VALUE");
        constantSensorTriggerLevelReportSensorType.put(0x03, "LUMINANCE");
        constantSensorTriggerLevelReportSensorType.put(0x04, "POWER");
        constantSensorTriggerLevelReportSensorType.put(0x05, "RELATIVE_HUMIDITY");
        constantSensorTriggerLevelReportSensorType.put(0x06, "VELOCITY");
        constantSensorTriggerLevelReportSensorType.put(0x07, "DIRECTION");
        constantSensorTriggerLevelReportSensorType.put(0x08, "ATMOSPHERIC_PRESSURE");
        constantSensorTriggerLevelReportSensorType.put(0x09, "BAROMETRIC_PRESSURE");
        constantSensorTriggerLevelReportSensorType.put(0x0A, "SOLAR_RADIATION");
        constantSensorTriggerLevelReportSensorType.put(0x0B, "DEW_POINT");
        constantSensorTriggerLevelReportSensorType.put(0x0C, "RAIN_RATE");
        constantSensorTriggerLevelReportSensorType.put(0x0D, "TIDE_LEVEL");

        // Constants for SensorTriggerLevelSetProperties1
        constantSensorTriggerLevelSetProperties1.put(0x40, "CURRENT");
        constantSensorTriggerLevelSetProperties1.put(0x80, "DEFAULT");
    }

    /**
     * Creates a new message with the SENSOR_TRIGGER_LEVEL_SET command.
     * <p>
     * Sensor Trigger Level Set
     *
     * @param current {@link Boolean}
     * @param defaultValue {@link Boolean}
     * @param sensorType {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>TEMPERATURE
     *            <li>GENERAL_PURPOSE_VALUE
     *            <li>LUMINANCE
     *            <li>POWER
     *            <li>RELATIVE_HUMIDITY
     *            <li>VELOCITY
     *            <li>DIRECTION
     *            <li>ATMOSPHERIC_PRESSURE
     *            <li>BAROMETRIC_PRESSURE
     *            <li>SOLAR_RADIATION
     *            <li>DEW_POINT
     *            <li>RAIN_RATE
     *            <li>TIDE_LEVEL
     *            </ul>
     * @param scale {@link Integer}
     * @param precision {@link Integer}
     * @param triggerValue {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSensorTriggerLevelSet(Boolean current, Boolean defaultValue, String sensorType,
            Integer scale, Integer precision, byte[] triggerValue) {
        logger.debug("Creating command message SENSOR_TRIGGER_LEVEL_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SENSOR_TRIGGER_LEVEL_SET);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= current ? 0x40 : 0;
        valProperties1 |= defaultValue ? 0x80 : 0;
        outputData.write(valProperties1);

        // Process 'Sensor Type'
        boolean foundSensorType = false;
        for (Integer entry : constantSensorTriggerLevelSetSensorType.keySet()) {
            if (constantSensorTriggerLevelSetSensorType.get(entry).equals(sensorType)) {
                outputData.write(entry);
                foundSensorType = true;
                break;
            }
        }
        if (!foundSensorType) {
            throw new IllegalArgumentException("Unknown constant value '" + sensorType + "' for sensorType");
        }

        // Process 'Properties2'
        // Size is used by 'Trigger Value'
        int size = triggerValue.length;
        int valProperties2 = 0;
        valProperties2 |= size & 0x07;
        valProperties2 |= ((scale << 3) & 0x18);
        valProperties2 |= ((precision << 5) & 0xE0);
        outputData.write(valProperties2);

        // Process 'Trigger Value'
        if (triggerValue != null) {
            try {
                outputData.write(triggerValue);
            } catch (IOException e) {
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SENSOR_TRIGGER_LEVEL_SET command.
     * <p>
     * Sensor Trigger Level Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>CURRENT {@link Boolean}
     * <li>DEFAULT {@link Boolean}
     * <li>SENSOR_TYPE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>TEMPERATURE
     * <li>GENERAL_PURPOSE_VALUE
     * <li>LUMINANCE
     * <li>POWER
     * <li>RELATIVE_HUMIDITY
     * <li>VELOCITY
     * <li>DIRECTION
     * <li>ATMOSPHERIC_PRESSURE
     * <li>BAROMETRIC_PRESSURE
     * <li>SOLAR_RADIATION
     * <li>DEW_POINT
     * <li>RAIN_RATE
     * <li>TIDE_LEVEL
     * </ul>
     * <li>SCALE {@link Integer}
     * <li>PRECISION {@link Integer}
     * <li>TRIGGER_VALUE {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSensorTriggerLevelSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Properties1'
        response.put("CURRENT", Boolean.valueOf((payload[msgOffset] & 0x40) != 0));
        response.put("DEFAULT", Boolean.valueOf((payload[msgOffset] & 0x80) != 0));
        msgOffset += 1;

        // Process 'Sensor Type'
        response.put("SENSOR_TYPE", constantSensorTriggerLevelSetSensorType.get(payload[msgOffset] & 0xff));
        msgOffset += 1;

        // Process 'Properties2'
        // Size is used by 'Trigger Value'
        int varSize = payload[msgOffset] & 0x07;
        response.put("SCALE", Integer.valueOf(payload[msgOffset] & 0x18 >> 3));
        response.put("PRECISION", Integer.valueOf(payload[msgOffset] & 0xE0 >> 5));
        msgOffset += 1;

        // Process 'Trigger Value'
        ByteArrayOutputStream valTriggerValue = new ByteArrayOutputStream();
        for (int cntTriggerValue = 0; cntTriggerValue < varSize; cntTriggerValue++) {
            valTriggerValue.write(payload[msgOffset + cntTriggerValue]);
        }
        response.put("TRIGGER_VALUE", valTriggerValue.toByteArray());
        msgOffset += varSize;

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SENSOR_TRIGGER_LEVEL_GET command.
     * <p>
     * Sensor Trigger Level Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSensorTriggerLevelGet() {
        logger.debug("Creating command message SENSOR_TRIGGER_LEVEL_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SENSOR_TRIGGER_LEVEL_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SENSOR_TRIGGER_LEVEL_GET command.
     * <p>
     * Sensor Trigger Level Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSensorTriggerLevelGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SENSOR_TRIGGER_LEVEL_REPORT command.
     * <p>
     * Sensor Trigger Level Report
     *
     * @param sensorType {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>TEMPERATURE
     *            <li>GENERAL_PURPOSE_VALUE
     *            <li>LUMINANCE
     *            <li>POWER
     *            <li>RELATIVE_HUMIDITY
     *            <li>VELOCITY
     *            <li>DIRECTION
     *            <li>ATMOSPHERIC_PRESSURE
     *            <li>BAROMETRIC_PRESSURE
     *            <li>SOLAR_RADIATION
     *            <li>DEW_POINT
     *            <li>RAIN_RATE
     *            <li>TIDE_LEVEL
     *            </ul>
     * @param scale {@link Integer}
     * @param precision {@link Integer}
     * @param triggerValue {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSensorTriggerLevelReport(String sensorType, Integer scale, Integer precision,
            byte[] triggerValue) {
        logger.debug("Creating command message SENSOR_TRIGGER_LEVEL_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SENSOR_TRIGGER_LEVEL_REPORT);

        // Process 'Sensor Type'
        boolean foundSensorType = false;
        for (Integer entry : constantSensorTriggerLevelReportSensorType.keySet()) {
            if (constantSensorTriggerLevelReportSensorType.get(entry).equals(sensorType)) {
                outputData.write(entry);
                foundSensorType = true;
                break;
            }
        }
        if (!foundSensorType) {
            throw new IllegalArgumentException("Unknown constant value '" + sensorType + "' for sensorType");
        }

        // Process 'Properties1'
        // Size is used by 'Trigger Value'
        int size = triggerValue.length;
        int valProperties1 = 0;
        valProperties1 |= size & 0x07;
        valProperties1 |= ((scale << 3) & 0x18);
        valProperties1 |= ((precision << 5) & 0xE0);
        outputData.write(valProperties1);

        // Process 'Trigger Value'
        if (triggerValue != null) {
            try {
                outputData.write(triggerValue);
            } catch (IOException e) {
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SENSOR_TRIGGER_LEVEL_REPORT command.
     * <p>
     * Sensor Trigger Level Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SENSOR_TYPE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>TEMPERATURE
     * <li>GENERAL_PURPOSE_VALUE
     * <li>LUMINANCE
     * <li>POWER
     * <li>RELATIVE_HUMIDITY
     * <li>VELOCITY
     * <li>DIRECTION
     * <li>ATMOSPHERIC_PRESSURE
     * <li>BAROMETRIC_PRESSURE
     * <li>SOLAR_RADIATION
     * <li>DEW_POINT
     * <li>RAIN_RATE
     * <li>TIDE_LEVEL
     * </ul>
     * <li>SCALE {@link Integer}
     * <li>PRECISION {@link Integer}
     * <li>TRIGGER_VALUE {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSensorTriggerLevelReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Sensor Type'
        response.put("SENSOR_TYPE", constantSensorTriggerLevelReportSensorType.get(payload[msgOffset] & 0xff));
        msgOffset += 1;

        // Process 'Properties1'
        // Size is used by 'Trigger Value'
        int varSize = payload[msgOffset] & 0x07;
        response.put("SCALE", Integer.valueOf(payload[msgOffset] & 0x18 >> 3));
        response.put("PRECISION", Integer.valueOf(payload[msgOffset] & 0xE0 >> 5));
        msgOffset += 1;

        // Process 'Trigger Value'
        ByteArrayOutputStream valTriggerValue = new ByteArrayOutputStream();
        for (int cntTriggerValue = 0; cntTriggerValue < varSize; cntTriggerValue++) {
            valTriggerValue.write(payload[msgOffset + cntTriggerValue]);
        }
        response.put("TRIGGER_VALUE", valTriggerValue.toByteArray());
        msgOffset += varSize;

        // Return the map of processed response data;
        return response;
    }
}
