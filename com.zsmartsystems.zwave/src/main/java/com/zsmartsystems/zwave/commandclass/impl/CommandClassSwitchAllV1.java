/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_SWITCH_ALL</b> version <b>1</b>.
 * <p>
 * Command Class Switch All
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x27.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassSwitchAllV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassSwitchAllV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_SWITCH_ALL
     */
    public final static int COMMAND_CLASS_KEY = 0x27;

    /**
     * Switch All Set Command Constant
     */
    public final static int SWITCH_ALL_SET = 0x01;
    /**
     * Switch All Get Command Constant
     */
    public final static int SWITCH_ALL_GET = 0x02;
    /**
     * Switch All Report Command Constant
     */
    public final static int SWITCH_ALL_REPORT = 0x03;
    /**
     * Switch All On Command Constant
     */
    public final static int SWITCH_ALL_ON = 0x04;
    /**
     * Switch All Off Command Constant
     */
    public final static int SWITCH_ALL_OFF = 0x05;

    /**
     * Map holding constants for SwitchAllReportMode
     */
    private static Map<Integer, String> constantSwitchAllReportMode = new HashMap<Integer, String>();

    /**
     * Map holding constants for SwitchAllSetMode
     */
    private static Map<Integer, String> constantSwitchAllSetMode = new HashMap<Integer, String>();

    static {
        // Constants for SwitchAllReportMode
        constantSwitchAllReportMode.put(0x00, "EXCLUDED_FROM_THE_ALL_ON_ALL_OFF_FUNCTIONALITY");
        constantSwitchAllReportMode.put(0xFF, "INCLUDED_IN_THE_ALL_ON_ALL_OFF_FUNCTIONALITY");
        constantSwitchAllReportMode.put(0x01, "EXCLUDED_FROM_THE_ALL_ON_FUNCTIONALITY_BUT_NOT_ALL_OFF");
        constantSwitchAllReportMode.put(0x02, "EXCLUDED_FROM_THE_ALL_OFF_FUNCTIONALITY_BUT_NOT_ALL_ON");

        // Constants for SwitchAllSetMode
        constantSwitchAllSetMode.put(0x00, "EXCLUDED_FROM_THE_ALL_ON_ALL_OFF_FUNCTIONALITY");
        constantSwitchAllSetMode.put(0xFF, "INCLUDED_IN_THE_ALL_ON_ALL_OFF_FUNCTIONALITY");
        constantSwitchAllSetMode.put(0x01, "EXCLUDED_FROM_THE_ALL_ON_FUNCTIONALITY_BUT_NOT_ALL_OFF");
        constantSwitchAllSetMode.put(0x02, "EXCLUDED_FROM_THE_ALL_OFF_FUNCTIONALITY_BUT_NOT_ALL_ON");
    }

    /**
     * Creates a new message with the SWITCH_ALL_SET command.
     * <p>
     * Switch All Set
     *
     * @param mode {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>EXCLUDED_FROM_THE_ALL_ON_ALL_OFF_FUNCTIONALITY
     *            <li>INCLUDED_IN_THE_ALL_ON_ALL_OFF_FUNCTIONALITY
     *            <li>EXCLUDED_FROM_THE_ALL_ON_FUNCTIONALITY_BUT_NOT_ALL_OFF
     *            <li>EXCLUDED_FROM_THE_ALL_OFF_FUNCTIONALITY_BUT_NOT_ALL_ON
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSwitchAllSet(String mode) {
        logger.debug("Creating command message SWITCH_ALL_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SWITCH_ALL_SET);

        // Process 'Mode'
        boolean foundMode = false;
        for (Integer entry : constantSwitchAllSetMode.keySet()) {
            if (constantSwitchAllSetMode.get(entry).equals(mode)) {
                outputData.write(entry);
                foundMode = true;
                break;
            }
        }
        if (!foundMode) {
            throw new IllegalArgumentException("Unknown constant value '" + mode + "' for mode");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SWITCH_ALL_SET command.
     * <p>
     * Switch All Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>MODE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>EXCLUDED_FROM_THE_ALL_ON_ALL_OFF_FUNCTIONALITY
     * <li>INCLUDED_IN_THE_ALL_ON_ALL_OFF_FUNCTIONALITY
     * <li>EXCLUDED_FROM_THE_ALL_ON_FUNCTIONALITY_BUT_NOT_ALL_OFF
     * <li>EXCLUDED_FROM_THE_ALL_OFF_FUNCTIONALITY_BUT_NOT_ALL_ON
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSwitchAllSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Mode'
        response.put("MODE", constantSwitchAllSetMode.get(payload[2] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SWITCH_ALL_GET command.
     * <p>
     * Switch All Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSwitchAllGet() {
        logger.debug("Creating command message SWITCH_ALL_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SWITCH_ALL_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SWITCH_ALL_GET command.
     * <p>
     * Switch All Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSwitchAllGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SWITCH_ALL_REPORT command.
     * <p>
     * Switch All Report
     *
     * @param mode {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>EXCLUDED_FROM_THE_ALL_ON_ALL_OFF_FUNCTIONALITY
     *            <li>INCLUDED_IN_THE_ALL_ON_ALL_OFF_FUNCTIONALITY
     *            <li>EXCLUDED_FROM_THE_ALL_ON_FUNCTIONALITY_BUT_NOT_ALL_OFF
     *            <li>EXCLUDED_FROM_THE_ALL_OFF_FUNCTIONALITY_BUT_NOT_ALL_ON
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSwitchAllReport(String mode) {
        logger.debug("Creating command message SWITCH_ALL_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SWITCH_ALL_REPORT);

        // Process 'Mode'
        boolean foundMode = false;
        for (Integer entry : constantSwitchAllReportMode.keySet()) {
            if (constantSwitchAllReportMode.get(entry).equals(mode)) {
                outputData.write(entry);
                foundMode = true;
                break;
            }
        }
        if (!foundMode) {
            throw new IllegalArgumentException("Unknown constant value '" + mode + "' for mode");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SWITCH_ALL_REPORT command.
     * <p>
     * Switch All Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>MODE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>EXCLUDED_FROM_THE_ALL_ON_ALL_OFF_FUNCTIONALITY
     * <li>INCLUDED_IN_THE_ALL_ON_ALL_OFF_FUNCTIONALITY
     * <li>EXCLUDED_FROM_THE_ALL_ON_FUNCTIONALITY_BUT_NOT_ALL_OFF
     * <li>EXCLUDED_FROM_THE_ALL_OFF_FUNCTIONALITY_BUT_NOT_ALL_ON
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSwitchAllReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Mode'
        response.put("MODE", constantSwitchAllReportMode.get(payload[2] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SWITCH_ALL_ON command.
     * <p>
     * Switch All On
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSwitchAllOn() {
        logger.debug("Creating command message SWITCH_ALL_ON version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SWITCH_ALL_ON);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SWITCH_ALL_ON command.
     * <p>
     * Switch All On
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSwitchAllOn(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SWITCH_ALL_OFF command.
     * <p>
     * Switch All Off
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSwitchAllOff() {
        logger.debug("Creating command message SWITCH_ALL_OFF version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SWITCH_ALL_OFF);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SWITCH_ALL_OFF command.
     * <p>
     * Switch All Off
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSwitchAllOff(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }
}
