/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.lang.IllegalArgumentException;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_MAILBOX</b> version <b>1</b>.
 * <p>
 * Command Class Mailbox
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x69.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassMailboxV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassMailboxV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_MAILBOX
     */
    public final static int COMMAND_CLASS_KEY = 0x69;

    /**
     * Mailbox Configuration Get Command Constant
     */
    public final static int MAILBOX_CONFIGURATION_GET = 0x01;
    /**
     * Mailbox Configuration Set Command Constant
     */
    public final static int MAILBOX_CONFIGURATION_SET = 0x02;
    /**
     * Mailbox Configuration Report Command Constant
     */
    public final static int MAILBOX_CONFIGURATION_REPORT = 0x03;
    /**
     * Mailbox Queue Command Constant
     */
    public final static int MAILBOX_QUEUE = 0x04;
    /**
     * Mailbox Wakeup Notification Command Constant
     */
    public final static int MAILBOX_WAKEUP_NOTIFICATION = 0x05;
    /**
     * Mailbox Failing Node Command Constant
     */
    public final static int MAILBOX_NODE_FAILING = 0x06;

    /**
     * Map holding constants for MailboxQueueMode
     */
    private static Map<Integer, String> constantMailboxQueueMode = new HashMap<Integer, String>();

    /**
     * Map holding constants for MailboxConfigurationReportMode
     */
    private static Map<Integer, String> constantMailboxConfigurationReportMode = new HashMap<Integer, String>();

    /**
     * Map holding constants for MailboxConfigurationReportSupportedModes
     */
    private static Map<Integer, String> constantMailboxConfigurationReportSupportedModes = new HashMap<Integer, String>();

    /**
     * Map holding constants for MailboxQueueProperties1
     */
    private static Map<Integer, String> constantMailboxQueueProperties1 = new HashMap<Integer, String>();

    /**
     * Map holding constants for MailboxConfigurationSetMode
     */
    private static Map<Integer, String> constantMailboxConfigurationSetMode = new HashMap<Integer, String>();

    static {
        // Constants for MailboxQueueMode
        constantMailboxQueueMode.put(0x00, "PUSH");
        constantMailboxQueueMode.put(0x01, "POP");
        constantMailboxQueueMode.put(0x02, "WAITING");
        constantMailboxQueueMode.put(0x03, "PING");
        constantMailboxQueueMode.put(0x04, "ACK");
        constantMailboxQueueMode.put(0x05, "NACK");
        constantMailboxQueueMode.put(0x06, "QUEUE_FULL");

        // Constants for MailboxConfigurationReportMode
        constantMailboxConfigurationReportMode.put(0x00, "DISABLE");
        constantMailboxConfigurationReportMode.put(0x01, "ENABLE_MAILBOX_SERVICE");
        constantMailboxConfigurationReportMode.put(0x02, "ENABLE_MAILBOX_PROXY");

        // Constants for MailboxConfigurationReportSupportedModes
        constantMailboxConfigurationReportSupportedModes.put(0x00, "MAILBOX_SERVICE_SUPPORTED");
        constantMailboxConfigurationReportSupportedModes.put(0x01, "MAILBOX_PROXY_SUPPORTED");

        // Constants for MailboxQueueProperties1
        constantMailboxQueueProperties1.put(0x04, "LAST");

        // Constants for MailboxConfigurationSetMode
        constantMailboxConfigurationSetMode.put(0x00, "DISABLE");
        constantMailboxConfigurationSetMode.put(0x01, "ENABLE_MAILBOX_SERVICE");
        constantMailboxConfigurationSetMode.put(0x02, "ENABLE_MAILBOX_PROXY");
    }

    /**
     * Creates a new message with the MAILBOX_CONFIGURATION_GET command.
     * <p>
     * Mailbox Configuration Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getMailboxConfigurationGet() {
        logger.debug("Creating command message MAILBOX_CONFIGURATION_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(MAILBOX_CONFIGURATION_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the MAILBOX_CONFIGURATION_GET command.
     * <p>
     * Mailbox Configuration Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMailboxConfigurationGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the MAILBOX_CONFIGURATION_SET command.
     * <p>
     * Mailbox Configuration Set
     *
     * @param mode {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>DISABLE
     *            <li>ENABLE_MAILBOX_SERVICE
     *            <li>ENABLE_MAILBOX_PROXY
     *            </ul>
     * @param forwardingDestinationIpv6Address {@link byte[]}
     * @param udpPortNumber {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getMailboxConfigurationSet(String mode, byte[] forwardingDestinationIpv6Address,
            Integer udpPortNumber) {
        logger.debug("Creating command message MAILBOX_CONFIGURATION_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(MAILBOX_CONFIGURATION_SET);

        // Process 'Properties1'
        int varMode = Integer.MAX_VALUE;
        for (Integer entry : constantMailboxConfigurationSetMode.keySet()) {
            if (constantMailboxConfigurationSetMode.get(entry).equals(mode)) {
                varMode = entry;
                break;
            }
        }
        if (varMode == Integer.MAX_VALUE) {
            throw new IllegalArgumentException("Unknown constant value '" + mode + "' for mode");
        }
        outputData.write(varMode & 0x07);

        // Process 'Forwarding Destination IPv6 Address'
        if (forwardingDestinationIpv6Address != null) {
            if (forwardingDestinationIpv6Address.length > 16) {
                throw new IllegalArgumentException("Length of array forwardingDestinationIpv6Address exceeds maximum length of 16 bytes");
            }
            try {
                outputData.write(forwardingDestinationIpv6Address);
            } catch (IOException e) {
            }
        }

        // Process 'UDP Port Number'
        outputData.write((udpPortNumber >> 8) & 0xff);
        outputData.write(udpPortNumber & 0xff);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the MAILBOX_CONFIGURATION_SET command.
     * <p>
     * Mailbox Configuration Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>MODE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>DISABLE
     * <li>ENABLE_MAILBOX_SERVICE
     * <li>ENABLE_MAILBOX_PROXY
     * </ul>
     * <li>FORWARDING_DESTINATION_IPV6_ADDRESS {@link byte[]}
     * <li>UDP_PORT_NUMBER {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMailboxConfigurationSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("MODE", constantMailboxConfigurationSetMode.get(payload[2] & 0x07));

        // Process 'Forwarding Destination IPv6 Address'
        int lenForwardingDestinationIpv6Address = Math.min(16, payload.length - 3);
        byte[] valForwardingDestinationIpv6Address = new byte[lenForwardingDestinationIpv6Address];
        for (int cntForwardingDestinationIpv6Address = 0; cntForwardingDestinationIpv6Address < lenForwardingDestinationIpv6Address; cntForwardingDestinationIpv6Address++) {
            valForwardingDestinationIpv6Address[cntForwardingDestinationIpv6Address] = payload[3 + cntForwardingDestinationIpv6Address];
        }
        response.put("FORWARDING_DESTINATION_IPV6_ADDRESS", valForwardingDestinationIpv6Address);

        // Process 'UDP Port Number'
        response.put("UDP_PORT_NUMBER", Integer.valueOf(((payload[19] & 0xff) << 8) + (payload[20] & 0xff)));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the MAILBOX_CONFIGURATION_REPORT command.
     * <p>
     * Mailbox Configuration Report
     *
     * @param mode {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>DISABLE
     *            <li>ENABLE_MAILBOX_SERVICE
     *            <li>ENABLE_MAILBOX_PROXY
     *            </ul>
     * @param supportedModes {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>MAILBOX_SERVICE_SUPPORTED
     *            <li>MAILBOX_PROXY_SUPPORTED
     *            </ul>
     * @param mailboxCapacity {@link Integer}
     * @param forwardingDestinationIpv6Address {@link byte[]}
     * @param udpPortNumber {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getMailboxConfigurationReport(String mode, String supportedModes, Integer mailboxCapacity,
            byte[] forwardingDestinationIpv6Address, Integer udpPortNumber) {
        logger.debug("Creating command message MAILBOX_CONFIGURATION_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(MAILBOX_CONFIGURATION_REPORT);

        // Process 'Properties1'
        int valProperties1 = 0;
        int varMode = Integer.MAX_VALUE;
        for (Integer entry : constantMailboxConfigurationReportMode.keySet()) {
            if (constantMailboxConfigurationReportMode.get(entry).equals(mode)) {
                varMode = entry;
                break;
            }
        }
        if (varMode == Integer.MAX_VALUE) {
            throw new IllegalArgumentException("Unknown constant value '" + mode + "' for mode");
        }
        valProperties1 |= varMode & 0x07;
        int varSupportedModes = Integer.MAX_VALUE;
        for (Integer entry : constantMailboxConfigurationReportSupportedModes.keySet()) {
            if (constantMailboxConfigurationReportSupportedModes.get(entry).equals(supportedModes)) {
                varSupportedModes = entry;
                break;
            }
        }
        if (varSupportedModes == Integer.MAX_VALUE) {
            throw new IllegalArgumentException("Unknown constant value '" + supportedModes + "' for supportedModes");
        }
        valProperties1 |= varSupportedModes << 3 & 0x18;
        outputData.write(valProperties1);

        // Process 'Mailbox Capacity'
        outputData.write((mailboxCapacity >> 8) & 0xff);
        outputData.write(mailboxCapacity & 0xff);

        // Process 'Forwarding Destination IPv6 Address'
        if (forwardingDestinationIpv6Address != null) {
            if (forwardingDestinationIpv6Address.length > 16) {
                throw new IllegalArgumentException("Length of array forwardingDestinationIpv6Address exceeds maximum length of 16 bytes");
            }
            try {
                outputData.write(forwardingDestinationIpv6Address);
            } catch (IOException e) {
            }
        }

        // Process 'UDP Port Number'
        outputData.write((udpPortNumber >> 8) & 0xff);
        outputData.write(udpPortNumber & 0xff);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the MAILBOX_CONFIGURATION_REPORT command.
     * <p>
     * Mailbox Configuration Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>MODE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>DISABLE
     * <li>ENABLE_MAILBOX_SERVICE
     * <li>ENABLE_MAILBOX_PROXY
     * </ul>
     * <li>SUPPORTED_MODES {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>MAILBOX_SERVICE_SUPPORTED
     * <li>MAILBOX_PROXY_SUPPORTED
     * </ul>
     * <li>MAILBOX_CAPACITY {@link Integer}
     * <li>FORWARDING_DESTINATION_IPV6_ADDRESS {@link byte[]}
     * <li>UDP_PORT_NUMBER {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMailboxConfigurationReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("MODE", constantMailboxConfigurationReportMode.get(payload[2] & 0x07));
        response.put("SUPPORTED_MODES", constantMailboxConfigurationReportSupportedModes.get((payload[2] & 0x18) >> 3));

        // Process 'Mailbox Capacity'
        response.put("MAILBOX_CAPACITY", Integer.valueOf(((payload[3] & 0xff) << 8) + (payload[4] & 0xff)));

        // Process 'Forwarding Destination IPv6 Address'
        int lenForwardingDestinationIpv6Address = Math.min(16, payload.length - 5);
        byte[] valForwardingDestinationIpv6Address = new byte[lenForwardingDestinationIpv6Address];
        for (int cntForwardingDestinationIpv6Address = 0; cntForwardingDestinationIpv6Address < lenForwardingDestinationIpv6Address; cntForwardingDestinationIpv6Address++) {
            valForwardingDestinationIpv6Address[cntForwardingDestinationIpv6Address] = payload[5 + cntForwardingDestinationIpv6Address];
        }
        response.put("FORWARDING_DESTINATION_IPV6_ADDRESS", valForwardingDestinationIpv6Address);

        // Process 'UDP Port Number'
        response.put("UDP_PORT_NUMBER", Integer.valueOf(((payload[21] & 0xff) << 8) + (payload[22] & 0xff)));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the MAILBOX_QUEUE command.
     * <p>
     * Mailbox Queue
     *
     * @param sequenceNumber {@link Integer}
     * @param mode {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>PUSH
     *            <li>POP
     *            <li>WAITING
     *            <li>PING
     *            <li>ACK
     *            <li>NACK
     *            <li>QUEUE_FULL
     *            </ul>
     * @param last {@link Boolean}
     * @param queueHandle {@link Integer}
     * @param mailboxEntry {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getMailboxQueue(Integer sequenceNumber, String mode, Boolean last, Integer queueHandle,
            byte[] mailboxEntry) {
        logger.debug("Creating command message MAILBOX_QUEUE version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(MAILBOX_QUEUE);

        // Process 'Sequence Number'
        outputData.write(sequenceNumber);

        // Process 'Properties1'
        int valProperties1 = 0;
        int varMode = Integer.MAX_VALUE;
        for (Integer entry : constantMailboxQueueMode.keySet()) {
            if (constantMailboxQueueMode.get(entry).equals(mode)) {
                varMode = entry;
                break;
            }
        }
        if (varMode == Integer.MAX_VALUE) {
            throw new IllegalArgumentException("Unknown constant value '" + mode + "' for mode");
        }
        valProperties1 |= varMode & 0x03;
        valProperties1 |= last ? 0x04 : 0;
        outputData.write(valProperties1);

        // Process 'Queue Handle'
        outputData.write(queueHandle);

        // Process 'Mailbox Entry'
        if (mailboxEntry != null) {
            try {
                outputData.write(mailboxEntry);
            } catch (IOException e) {
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the MAILBOX_QUEUE command.
     * <p>
     * Mailbox Queue
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQUENCE_NUMBER {@link Integer}
     * <li>MODE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>PUSH
     * <li>POP
     * <li>WAITING
     * <li>PING
     * <li>ACK
     * <li>NACK
     * <li>QUEUE_FULL
     * </ul>
     * <li>LAST {@link Boolean}
     * <li>QUEUE_HANDLE {@link Integer}
     * <li>MAILBOX_ENTRY {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMailboxQueue(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Sequence Number'
        response.put("SEQUENCE_NUMBER", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Properties1'
        response.put("MODE", constantMailboxQueueMode.get(payload[msgOffset] & 0x03));
        response.put("LAST", Boolean.valueOf((payload[msgOffset] & 0x04) != 0));
        msgOffset += 1;

        // Process 'Queue Handle'
        response.put("QUEUE_HANDLE", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Mailbox Entry'
        ByteArrayOutputStream valMailboxEntry = new ByteArrayOutputStream();
        while (msgOffset < payload.length) {
            valMailboxEntry.write(payload[msgOffset]);
            msgOffset++;
        }
        response.put("MAILBOX_ENTRY", valMailboxEntry);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the MAILBOX_WAKEUP_NOTIFICATION command.
     * <p>
     * Mailbox Wakeup Notification
     *
     * @param queueHandle {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getMailboxWakeupNotification(Integer queueHandle) {
        logger.debug("Creating command message MAILBOX_WAKEUP_NOTIFICATION version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(MAILBOX_WAKEUP_NOTIFICATION);

        // Process 'Queue Handle'
        outputData.write(queueHandle);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the MAILBOX_WAKEUP_NOTIFICATION command.
     * <p>
     * Mailbox Wakeup Notification
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>QUEUE_HANDLE {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMailboxWakeupNotification(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Queue Handle'
        response.put("QUEUE_HANDLE", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the MAILBOX_NODE_FAILING command.
     * <p>
     * Mailbox Failing Node
     *
     * @param queueHandle {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getMailboxNodeFailing(Integer queueHandle) {
        logger.debug("Creating command message MAILBOX_NODE_FAILING version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(MAILBOX_NODE_FAILING);

        // Process 'Queue Handle'
        outputData.write(queueHandle);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the MAILBOX_NODE_FAILING command.
     * <p>
     * Mailbox Failing Node
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>QUEUE_HANDLE {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleMailboxNodeFailing(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Queue Handle'
        response.put("QUEUE_HANDLE", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }
}
