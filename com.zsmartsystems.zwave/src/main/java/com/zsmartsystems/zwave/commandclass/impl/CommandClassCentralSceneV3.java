/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_CENTRAL_SCENE</b> version <b>3</b>.
 * <p>
 * Command Class Central Scene
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x5B.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassCentralSceneV3 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassCentralSceneV3.class);

    /**
     * Integer command class key for COMMAND_CLASS_CENTRAL_SCENE
     */
    public final static int COMMAND_CLASS_KEY = 0x5B;

    /**
     * Central Scene Supported Get Command Constant
     */
    public final static int CENTRAL_SCENE_SUPPORTED_GET = 0x01;
    /**
     * Central Scene Supported Report Command Constant
     */
    public final static int CENTRAL_SCENE_SUPPORTED_REPORT = 0x02;
    /**
     * Central Scene Notification Command Constant
     */
    public final static int CENTRAL_SCENE_NOTIFICATION = 0x03;
    /**
     * Central Scene Configuration Set Command Constant
     */
    public final static int CENTRAL_SCENE_CONFIGURATION_SET = 0x04;
    /**
     * Central Scene Configuration Get Command Constant
     */
    public final static int CENTRAL_SCENE_CONFIGURATION_GET = 0x05;
    /**
     * Central Scene Configuration Report Command Constant
     */
    public final static int CENTRAL_SCENE_CONFIGURATION_REPORT = 0x06;

    /**
     * Map holding constants for CentralSceneConfigurationSetProperties1
     */
    private static Map<Integer, String> constantCentralSceneConfigurationSetProperties1 = new HashMap<Integer, String>();

    /**
     * Map holding constants for CentralSceneSupportedReportSupportedKeyAttributesForScene
     */
    private static Map<Integer, String> constantCentralSceneSupportedReportSupportedKeyAttributesForScene = new HashMap<Integer, String>();

    /**
     * Map holding constants for CentralSceneSupportedReportProperties1
     */
    private static Map<Integer, String> constantCentralSceneSupportedReportProperties1 = new HashMap<Integer, String>();

    /**
     * Map holding constants for CentralSceneConfigurationReportProperties1
     */
    private static Map<Integer, String> constantCentralSceneConfigurationReportProperties1 = new HashMap<Integer, String>();

    /**
     * Map holding constants for CentralSceneNotificationProperties1
     */
    private static Map<Integer, String> constantCentralSceneNotificationProperties1 = new HashMap<Integer, String>();

    /**
     * Map holding constants for CentralSceneNotificationKeyAttributes
     */
    private static Map<Integer, String> constantCentralSceneNotificationKeyAttributes = new HashMap<Integer, String>();

    static {
        // Constants for CentralSceneConfigurationSetProperties1
        constantCentralSceneConfigurationSetProperties1.put(0x80, "SLOW_REFRESH");

        // Constants for CentralSceneSupportedReportSupportedKeyAttributesForScene
        constantCentralSceneSupportedReportSupportedKeyAttributesForScene.put(0x00, "KEY_PRESSED_1_TIME");
        constantCentralSceneSupportedReportSupportedKeyAttributesForScene.put(0x01, "KEY_RELEASED");
        constantCentralSceneSupportedReportSupportedKeyAttributesForScene.put(0x02, "KEY_HELD_DOWN");
        constantCentralSceneSupportedReportSupportedKeyAttributesForScene.put(0x03, "KEY_PRESSED_2_TIMES");
        constantCentralSceneSupportedReportSupportedKeyAttributesForScene.put(0x04, "KEY_PRESSED_3_TIMES");
        constantCentralSceneSupportedReportSupportedKeyAttributesForScene.put(0x05, "KEY_PRESSED_4_TIMES");
        constantCentralSceneSupportedReportSupportedKeyAttributesForScene.put(0x06, "KEY_PRESSED_5_TIMES");

        // Constants for CentralSceneSupportedReportProperties1
        constantCentralSceneSupportedReportProperties1.put(0x01, "IDENTICAL");
        constantCentralSceneSupportedReportProperties1.put(0x80, "SLOW_REFRESH_SUPPORT");

        // Constants for CentralSceneConfigurationReportProperties1
        constantCentralSceneConfigurationReportProperties1.put(0x80, "SLOW_REFRESH");

        // Constants for CentralSceneNotificationProperties1
        constantCentralSceneNotificationProperties1.put(0x80, "SLOW_REFRESH");

        // Constants for CentralSceneNotificationKeyAttributes
        constantCentralSceneNotificationKeyAttributes.put(0x00, "KEY_PRESSED_1_TIME");
        constantCentralSceneNotificationKeyAttributes.put(0x01, "KEY_RELEASED");
        constantCentralSceneNotificationKeyAttributes.put(0x02, "KEY_HELD_DOWN");
        constantCentralSceneNotificationKeyAttributes.put(0x03, "KEY_PRESSED_2_TIMES");
        constantCentralSceneNotificationKeyAttributes.put(0x04, "KEY_PRESSED_3_TIMES");
        constantCentralSceneNotificationKeyAttributes.put(0x05, "KEY_PRESSED_4_TIMES");
        constantCentralSceneNotificationKeyAttributes.put(0x06, "KEY_PRESSED_5_TIMES");
    }

    /**
     * Creates a new message with the CENTRAL_SCENE_SUPPORTED_GET command.
     * <p>
     * Central Scene Supported Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getCentralSceneSupportedGet() {
        logger.debug("Creating command message CENTRAL_SCENE_SUPPORTED_GET version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CENTRAL_SCENE_SUPPORTED_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CENTRAL_SCENE_SUPPORTED_GET command.
     * <p>
     * Central Scene Supported Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleCentralSceneSupportedGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CENTRAL_SCENE_SUPPORTED_REPORT command.
     * <p>
     * Central Scene Supported Report
     *
     * @param supportedScenes {@link Integer}
     * @param identical {@link Boolean}
     * @param numberOfBitMaskBytes {@link Integer}
     * @param slowRefreshSupport {@link Boolean}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getCentralSceneSupportedReport(Integer supportedScenes, Boolean identical,
            Integer numberOfBitMaskBytes, Boolean slowRefreshSupport) {
        logger.debug("Creating command message CENTRAL_SCENE_SUPPORTED_REPORT version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CENTRAL_SCENE_SUPPORTED_REPORT);

        // Process 'Supported Scenes'
        outputData.write(supportedScenes);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= identical ? 0x01 : 0;
        valProperties1 |= ((numberOfBitMaskBytes << 1) & 0x06);
        valProperties1 |= slowRefreshSupport ? 0x80 : 0;
        outputData.write(valProperties1);

        // Process 'vg1'

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CENTRAL_SCENE_SUPPORTED_REPORT command.
     * <p>
     * Central Scene Supported Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SUPPORTED_SCENES {@link Integer}
     * <li>IDENTICAL {@link Boolean}
     * <li>NUMBER_OF_BIT_MASK_BYTES {@link Integer}
     * <li>SLOW_REFRESH_SUPPORT {@link Boolean}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleCentralSceneSupportedReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Supported Scenes'
        response.put("SUPPORTED_SCENES", Integer.valueOf(payload[2]));

        // Process 'Properties1'
        response.put("IDENTICAL", Boolean.valueOf((payload[3] & 0x01) != 0));
        response.put("NUMBER_OF_BIT_MASK_BYTES", Integer.valueOf(payload[3] & 0x06 >> 1));
        response.put("SLOW_REFRESH_SUPPORT", Boolean.valueOf((payload[3] & 0x80) != 0));

        // Process 'vg1'

        // Create a list to hold the group vg1
        List<Map<String, Object>> variantList = new ArrayList<Map<String, Object>>();

        int offset = 4;
        while (offset < payload.length) {
            // Create a map to hold the members of this variant
            Map<String, Object> variant = new HashMap<String, Object>();

            // Process 'Supported Key Attributes for Scene'
            List<String> responseSupportedKeyAttributesForScene = new ArrayList<String>();
            int lenSupportedKeyAttributesForScene = (payload[5] & 0x06 >> 1) * 8;
            for (int cntSupportedKeyAttributesForScene = 0; cntSupportedKeyAttributesForScene < lenSupportedKeyAttributesForScene; cntSupportedKeyAttributesForScene++) {
                if ((payload[4 + (cntSupportedKeyAttributesForScene / 8)] & (1 << cntSupportedKeyAttributesForScene % 8)) == 0) {
                    continue;
                }
                responseSupportedKeyAttributesForScene.add(constantCentralSceneSupportedReportSupportedKeyAttributesForScene.get(cntSupportedKeyAttributesForScene));
            }
            variant.put("SUPPORTED_KEY_ATTRIBUTES_FOR_SCENE", responseSupportedKeyAttributesForScene);

            // Add to the list
            variantList.add(variant);

            // Add the length of this variant
            offset += (payload[offset + 0] & 0xFF) >> 0;
        }

        // Add the variant list to the response
        response.put("VG1", variantList);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CENTRAL_SCENE_NOTIFICATION command.
     * <p>
     * Central Scene Notification
     *
     * @param sequenceNumber {@link Integer}
     * @param keyAttributes {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>KEY_PRESSED_1_TIME
     *            <li>KEY_RELEASED
     *            <li>KEY_HELD_DOWN
     *            <li>KEY_PRESSED_2_TIMES
     *            <li>KEY_PRESSED_3_TIMES
     *            <li>KEY_PRESSED_4_TIMES
     *            <li>KEY_PRESSED_5_TIMES
     *            </ul>
     * @param slowRefresh {@link Boolean}
     * @param sceneNumber {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getCentralSceneNotification(Integer sequenceNumber, String keyAttributes, Boolean slowRefresh,
            Integer sceneNumber) {
        logger.debug("Creating command message CENTRAL_SCENE_NOTIFICATION version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CENTRAL_SCENE_NOTIFICATION);

        // Process 'Sequence Number'
        outputData.write(sequenceNumber);

        // Process 'Properties1'
        int valProperties1 = 0;
        int varKeyAttributes = Integer.MAX_VALUE;
        for (Integer entry : constantCentralSceneNotificationKeyAttributes.keySet()) {
            if (constantCentralSceneNotificationKeyAttributes.get(entry).equals(keyAttributes)) {
                varKeyAttributes = entry;
                break;
            }
        }
        if (varKeyAttributes == Integer.MAX_VALUE) {
            throw new IllegalArgumentException("Unknown constant value '" + keyAttributes + "' for keyAttributes");
        }
        valProperties1 |= varKeyAttributes & 0x07;
        valProperties1 |= slowRefresh ? 0x80 : 0;
        outputData.write(valProperties1);

        // Process 'Scene Number'
        outputData.write(sceneNumber);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CENTRAL_SCENE_NOTIFICATION command.
     * <p>
     * Central Scene Notification
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQUENCE_NUMBER {@link Integer}
     * <li>KEY_ATTRIBUTES {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>KEY_PRESSED_1_TIME
     * <li>KEY_RELEASED
     * <li>KEY_HELD_DOWN
     * <li>KEY_PRESSED_2_TIMES
     * <li>KEY_PRESSED_3_TIMES
     * <li>KEY_PRESSED_4_TIMES
     * <li>KEY_PRESSED_5_TIMES
     * </ul>
     * <li>SLOW_REFRESH {@link Boolean}
     * <li>SCENE_NUMBER {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleCentralSceneNotification(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Sequence Number'
        response.put("SEQUENCE_NUMBER", Integer.valueOf(payload[2]));

        // Process 'Properties1'
        response.put("KEY_ATTRIBUTES", constantCentralSceneNotificationKeyAttributes.get(payload[3] & 0x07));
        response.put("SLOW_REFRESH", Boolean.valueOf((payload[3] & 0x80) != 0));

        // Process 'Scene Number'
        response.put("SCENE_NUMBER", Integer.valueOf(payload[4]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CENTRAL_SCENE_CONFIGURATION_SET command.
     * <p>
     * Central Scene Configuration Set
     *
     * @param slowRefresh {@link Boolean}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getCentralSceneConfigurationSet(Boolean slowRefresh) {
        logger.debug("Creating command message CENTRAL_SCENE_CONFIGURATION_SET version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CENTRAL_SCENE_CONFIGURATION_SET);

        // Process 'Properties1'
        outputData.write(slowRefresh ? 0x80 : 0);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CENTRAL_SCENE_CONFIGURATION_SET command.
     * <p>
     * Central Scene Configuration Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SLOW_REFRESH {@link Boolean}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleCentralSceneConfigurationSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("SLOW_REFRESH", Boolean.valueOf((payload[2] & 0x80) != 0));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CENTRAL_SCENE_CONFIGURATION_GET command.
     * <p>
     * Central Scene Configuration Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getCentralSceneConfigurationGet() {
        logger.debug("Creating command message CENTRAL_SCENE_CONFIGURATION_GET version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CENTRAL_SCENE_CONFIGURATION_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CENTRAL_SCENE_CONFIGURATION_GET command.
     * <p>
     * Central Scene Configuration Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleCentralSceneConfigurationGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CENTRAL_SCENE_CONFIGURATION_REPORT command.
     * <p>
     * Central Scene Configuration Report
     *
     * @param slowRefresh {@link Boolean}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getCentralSceneConfigurationReport(Boolean slowRefresh) {
        logger.debug("Creating command message CENTRAL_SCENE_CONFIGURATION_REPORT version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CENTRAL_SCENE_CONFIGURATION_REPORT);

        // Process 'Properties1'
        outputData.write(slowRefresh ? 0x80 : 0);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CENTRAL_SCENE_CONFIGURATION_REPORT command.
     * <p>
     * Central Scene Configuration Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SLOW_REFRESH {@link Boolean}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleCentralSceneConfigurationReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("SLOW_REFRESH", Boolean.valueOf((payload[2] & 0x80) != 0));

        // Return the map of processed response data;
        return response;
    }
}
