/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_SWITCH_COLOR</b> version <b>3</b>.
 * <p>
 * Command Class Switch Color
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x33.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassSwitchColorV3 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassSwitchColorV3.class);

    /**
     * Integer command class key for COMMAND_CLASS_SWITCH_COLOR
     */
    public final static int COMMAND_CLASS_KEY = 0x33;

    /**
     * Color Switch Supported Get Command Constant
     */
    public final static int SWITCH_COLOR_SUPPORTED_GET = 0x01;
    /**
     * Color Switch Supported Report Command Constant
     */
    public final static int SWITCH_COLOR_SUPPORTED_REPORT = 0x02;
    /**
     * Color Switch Get Command Constant
     */
    public final static int SWITCH_COLOR_GET = 0x03;
    /**
     * Color Switch Report Command Constant
     */
    public final static int SWITCH_COLOR_REPORT = 0x04;
    /**
     * Color Switch Set Command Constant
     */
    public final static int SWITCH_COLOR_SET = 0x05;
    /**
     * Color Switch Start Level Change Command Constant
     */
    public final static int SWITCH_COLOR_START_LEVEL_CHANGE = 0x06;
    /**
     * Color Switch Stop Level Change Command Constant
     */
    public final static int SWITCH_COLOR_STOP_LEVEL_CHANGE = 0x07;

    /**
     * Map holding constants for SwitchColorSetDuration
     */
    private static Map<Integer, String> constantSwitchColorSetDuration = new HashMap<Integer, String>();

    /**
     * Map holding constants for SwitchColorStartLevelChangeProperties1
     */
    private static Map<Integer, String> constantSwitchColorStartLevelChangeProperties1 = new HashMap<Integer, String>();

    /**
     * Map holding constants for SwitchColorStartLevelChangeDuration
     */
    private static Map<Integer, String> constantSwitchColorStartLevelChangeDuration = new HashMap<Integer, String>();

    /**
     * Map holding constants for SwitchColorReportDuration
     */
    private static Map<Integer, String> constantSwitchColorReportDuration = new HashMap<Integer, String>();

    static {
        // Constants for SwitchColorSetDuration
        constantSwitchColorSetDuration.put(0x00, "INSTANTLY");
        constantSwitchColorSetDuration.put(0xFF, "DEFAULT");

        // Constants for SwitchColorStartLevelChangeProperties1
        constantSwitchColorStartLevelChangeProperties1.put(0x20, "IGNORE_START_STATE");
        constantSwitchColorStartLevelChangeProperties1.put(0x40, "UP_DOWN");
        constantSwitchColorStartLevelChangeProperties1.put(0x80, "RES2");

        // Constants for SwitchColorStartLevelChangeDuration
        constantSwitchColorStartLevelChangeDuration.put(0x00, "INSTANTLY");
        constantSwitchColorStartLevelChangeDuration.put(0xFF, "DEFAULT");

        // Constants for SwitchColorReportDuration
        constantSwitchColorReportDuration.put(0xFE, "UNKNOWN_DURATION");
        constantSwitchColorReportDuration.put(0x00, "ALREADY_AT_THE_TARGET_VALUE");
    }

    /**
     * Creates a new message with the SWITCH_COLOR_SUPPORTED_GET command.
     * <p>
     * Color Switch Supported Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSwitchColorSupportedGet() {
        logger.debug("Creating command message SWITCH_COLOR_SUPPORTED_GET version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SWITCH_COLOR_SUPPORTED_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SWITCH_COLOR_SUPPORTED_GET command.
     * <p>
     * Color Switch Supported Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSwitchColorSupportedGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SWITCH_COLOR_SUPPORTED_REPORT command.
     * <p>
     * Color Switch Supported Report
     *
     * @param colorComponentMask {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSwitchColorSupportedReport(Integer colorComponentMask) {
        logger.debug("Creating command message SWITCH_COLOR_SUPPORTED_REPORT version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SWITCH_COLOR_SUPPORTED_REPORT);

        // Process 'Color Component mask'
        outputData.write((colorComponentMask >> 8) & 0xff);
        outputData.write(colorComponentMask & 0xff);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SWITCH_COLOR_SUPPORTED_REPORT command.
     * <p>
     * Color Switch Supported Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>COLOR_COMPONENT_MASK {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSwitchColorSupportedReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Color Component mask'
        response.put("COLOR_COMPONENT_MASK", Integer.valueOf(((payload[2] & 0xff) << 8) + (payload[3] & 0xff)));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SWITCH_COLOR_GET command.
     * <p>
     * Color Switch Get
     *
     * @param colorComponentId {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSwitchColorGet(Integer colorComponentId) {
        logger.debug("Creating command message SWITCH_COLOR_GET version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SWITCH_COLOR_GET);

        // Process 'Color Component ID'
        outputData.write(colorComponentId);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SWITCH_COLOR_GET command.
     * <p>
     * Color Switch Get
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>COLOR_COMPONENT_ID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSwitchColorGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Color Component ID'
        response.put("COLOR_COMPONENT_ID", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SWITCH_COLOR_REPORT command.
     * <p>
     * Color Switch Report
     *
     * @param colorComponentId {@link Integer}
     * @param currentValue {@link Integer}
     * @param targetValue {@link Integer}
     * @param duration {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>UNKNOWN_DURATION
     *            <li>ALREADY_AT_THE_TARGET_VALUE
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSwitchColorReport(Integer colorComponentId, Integer currentValue, Integer targetValue,
            String duration) {
        logger.debug("Creating command message SWITCH_COLOR_REPORT version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SWITCH_COLOR_REPORT);

        // Process 'Color Component ID'
        outputData.write(colorComponentId);

        // Process 'Current Value'
        outputData.write(currentValue);

        // Process 'Target Value'
        outputData.write(targetValue);

        // Process 'Duration'
        boolean foundDuration = false;
        for (Integer entry : constantSwitchColorReportDuration.keySet()) {
            if (constantSwitchColorReportDuration.get(entry).equals(duration)) {
                outputData.write(entry);
                foundDuration = true;
                break;
            }
        }
        if (!foundDuration) {
            throw new IllegalArgumentException("Unknown constant value '" + duration + "' for duration");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SWITCH_COLOR_REPORT command.
     * <p>
     * Color Switch Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>COLOR_COMPONENT_ID {@link Integer}
     * <li>CURRENT_VALUE {@link Integer}
     * <li>TARGET_VALUE {@link Integer}
     * <li>DURATION {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>UNKNOWN_DURATION
     * <li>ALREADY_AT_THE_TARGET_VALUE
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSwitchColorReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Color Component ID'
        response.put("COLOR_COMPONENT_ID", Integer.valueOf(payload[2]));

        // Process 'Current Value'
        response.put("CURRENT_VALUE", Integer.valueOf(payload[3]));

        // Process 'Target Value'
        response.put("TARGET_VALUE", Integer.valueOf(payload[4]));

        // Process 'Duration'
        response.put("DURATION", constantSwitchColorReportDuration.get(payload[5] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SWITCH_COLOR_SET command.
     * <p>
     * Color Switch Set
     *
     * @param colorComponentCount {@link Integer}
     * @param duration {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>INSTANTLY
     *            <li>DEFAULT
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSwitchColorSet(Integer colorComponentCount, String duration) {
        logger.debug("Creating command message SWITCH_COLOR_SET version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SWITCH_COLOR_SET);

        // Process 'Properties1'
        outputData.write(colorComponentCount & 0x1F);

        // Process 'vg1'

        // Process 'Duration'
        boolean foundDuration = false;
        for (Integer entry : constantSwitchColorSetDuration.keySet()) {
            if (constantSwitchColorSetDuration.get(entry).equals(duration)) {
                outputData.write(entry);
                foundDuration = true;
                break;
            }
        }
        if (!foundDuration) {
            throw new IllegalArgumentException("Unknown constant value '" + duration + "' for duration");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SWITCH_COLOR_SET command.
     * <p>
     * Color Switch Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>COLOR_COMPONENT_COUNT {@link Integer}
     * <li>DURATION {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>INSTANTLY
     * <li>DEFAULT
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSwitchColorSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("COLOR_COMPONENT_COUNT", Integer.valueOf(payload[2] & 0x1F));

        // Process 'vg1'

        // Create a list to hold the group vg1
        List<Map<String, Object>> variantList = new ArrayList<Map<String, Object>>();

        int offset = 3;
        while (offset < payload.length) {
            // Create a map to hold the members of this variant
            Map<String, Object> variant = new HashMap<String, Object>();

            // Process 'Color Component ID'
            variant.put("COLOR_COMPONENT_ID", Integer.valueOf(payload[3]));

            // Process 'Value'
            variant.put("VALUE", Integer.valueOf(payload[4]));

            // Add to the list
            variantList.add(variant);

            // Add the length of this variant
            offset += (payload[offset + 0] & 0x1F) >> 0;
        }

        // Add the variant list to the response
        response.put("VG1", variantList);

        // Process 'Duration'
        response.put("DURATION", constantSwitchColorSetDuration.get(payload[5] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SWITCH_COLOR_START_LEVEL_CHANGE command.
     * <p>
     * Color Switch Start Level Change
     *
     * @param res1 {@link Integer}
     * @param ignoreStartState {@link Boolean}
     * @param upDown {@link Boolean}
     * @param res2 {@link Boolean}
     * @param colorComponentId {@link Integer}
     * @param startLevel {@link Integer}
     * @param duration {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>INSTANTLY
     *            <li>DEFAULT
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSwitchColorStartLevelChange(Integer res1, Boolean ignoreStartState, Boolean upDown,
            Boolean res2, Integer colorComponentId, Integer startLevel, String duration) {
        logger.debug("Creating command message SWITCH_COLOR_START_LEVEL_CHANGE version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SWITCH_COLOR_START_LEVEL_CHANGE);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= res1 & 0x1F;
        valProperties1 |= ignoreStartState ? 0x20 : 0;
        valProperties1 |= upDown ? 0x40 : 0;
        valProperties1 |= res2 ? 0x80 : 0;
        outputData.write(valProperties1);

        // Process 'Color Component ID'
        outputData.write(colorComponentId);

        // Process 'Start Level'
        outputData.write(startLevel);

        // Process 'Duration'
        boolean foundDuration = false;
        for (Integer entry : constantSwitchColorStartLevelChangeDuration.keySet()) {
            if (constantSwitchColorStartLevelChangeDuration.get(entry).equals(duration)) {
                outputData.write(entry);
                foundDuration = true;
                break;
            }
        }
        if (!foundDuration) {
            throw new IllegalArgumentException("Unknown constant value '" + duration + "' for duration");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SWITCH_COLOR_START_LEVEL_CHANGE command.
     * <p>
     * Color Switch Start Level Change
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>RES1 {@link Integer}
     * <li>IGNORE_START_STATE {@link Boolean}
     * <li>UP_DOWN {@link Boolean}
     * <li>RES2 {@link Boolean}
     * <li>COLOR_COMPONENT_ID {@link Integer}
     * <li>START_LEVEL {@link Integer}
     * <li>DURATION {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>INSTANTLY
     * <li>DEFAULT
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSwitchColorStartLevelChange(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("RES1", Integer.valueOf(payload[2] & 0x1F));
        response.put("IGNORE_START_STATE", Boolean.valueOf((payload[2] & 0x20) != 0));
        response.put("UP_DOWN", Boolean.valueOf((payload[2] & 0x40) != 0));
        response.put("RES2", Boolean.valueOf((payload[2] & 0x80) != 0));

        // Process 'Color Component ID'
        response.put("COLOR_COMPONENT_ID", Integer.valueOf(payload[3]));

        // Process 'Start Level'
        response.put("START_LEVEL", Integer.valueOf(payload[4]));

        // Process 'Duration'
        response.put("DURATION", constantSwitchColorStartLevelChangeDuration.get(payload[5] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SWITCH_COLOR_STOP_LEVEL_CHANGE command.
     * <p>
     * Color Switch Stop Level Change
     *
     * @param colorComponentId {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSwitchColorStopLevelChange(Integer colorComponentId) {
        logger.debug("Creating command message SWITCH_COLOR_STOP_LEVEL_CHANGE version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SWITCH_COLOR_STOP_LEVEL_CHANGE);

        // Process 'Color Component ID'
        outputData.write(colorComponentId);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SWITCH_COLOR_STOP_LEVEL_CHANGE command.
     * <p>
     * Color Switch Stop Level Change
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>COLOR_COMPONENT_ID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSwitchColorStopLevelChange(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Color Component ID'
        response.put("COLOR_COMPONENT_ID", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }
}
