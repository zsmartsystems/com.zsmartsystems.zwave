/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_CLOCK</b> version <b>1</b>.
 * <p>
 * Command Class Clock
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x81.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassClockV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassClockV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_CLOCK
     */
    public final static int COMMAND_CLASS_KEY = 0x81;

    /**
     * Clock Set Command Constant
     */
    public final static int CLOCK_SET = 0x04;
    /**
     * Clock Get Command Constant
     */
    public final static int CLOCK_GET = 0x05;
    /**
     * Clock Report Command Constant
     */
    public final static int CLOCK_REPORT = 0x06;


    /**
     * Creates a new message with the CLOCK_SET command.
     * <p>
     * Clock Set
     *
     * @param hour {@link Integer}
     * @param weekday {@link Integer}
     * @param minute {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getClockSet(Integer hour, Integer weekday, Integer minute) {
        logger.debug("Creating command message CLOCK_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CLOCK_SET);

        // Process 'Level'
        int valLevel = 0;
        valLevel |= hour & 0x1F;
        valLevel |= ((weekday << 5) & 0xE0);
        outputData.write(valLevel);

        // Process 'Minute'
        outputData.write(minute);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CLOCK_SET command.
     * <p>
     * Clock Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>HOUR {@link Integer}
     * <li>WEEKDAY {@link Integer}
     * <li>MINUTE {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleClockSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Level'
        response.put("HOUR", Integer.valueOf(payload[2] & 0x1F));
        response.put("WEEKDAY", Integer.valueOf(payload[2] & 0xE0 >> 5));

        // Process 'Minute'
        response.put("MINUTE", Integer.valueOf(payload[3]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CLOCK_GET command.
     * <p>
     * Clock Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getClockGet() {
        logger.debug("Creating command message CLOCK_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CLOCK_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CLOCK_GET command.
     * <p>
     * Clock Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleClockGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CLOCK_REPORT command.
     * <p>
     * Clock Report
     *
     * @param hour {@link Integer}
     * @param weekday {@link Integer}
     * @param minute {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getClockReport(Integer hour, Integer weekday, Integer minute) {
        logger.debug("Creating command message CLOCK_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CLOCK_REPORT);

        // Process 'Level'
        int valLevel = 0;
        valLevel |= hour & 0x1F;
        valLevel |= ((weekday << 5) & 0xE0);
        outputData.write(valLevel);

        // Process 'Minute'
        outputData.write(minute);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CLOCK_REPORT command.
     * <p>
     * Clock Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>HOUR {@link Integer}
     * <li>WEEKDAY {@link Integer}
     * <li>MINUTE {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleClockReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Level'
        response.put("HOUR", Integer.valueOf(payload[2] & 0x1F));
        response.put("WEEKDAY", Integer.valueOf(payload[2] & 0xE0 >> 5));

        // Process 'Minute'
        response.put("MINUTE", Integer.valueOf(payload[3]));

        // Return the map of processed response data;
        return response;
    }
}
