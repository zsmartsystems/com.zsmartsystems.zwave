/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_THERMOSTAT_SETBACK</b> version <b>1</b>.
 * <p>
 * Command Class Thermostat Setback
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x47.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassThermostatSetbackV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassThermostatSetbackV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_THERMOSTAT_SETBACK
     */
    public final static int COMMAND_CLASS_KEY = 0x47;

    /**
     * Thermostat Setback Set Command Constant
     */
    public final static int THERMOSTAT_SETBACK_SET = 0x01;
    /**
     * Thermostat Setback Get Command Constant
     */
    public final static int THERMOSTAT_SETBACK_GET = 0x02;
    /**
     * Thermostat Setback Report Command Constant
     */
    public final static int THERMOSTAT_SETBACK_REPORT = 0x03;

    /**
     * Map holding constants for ThermostatSetbackReportSetbackType
     */
    private static Map<Integer, String> constantThermostatSetbackReportSetbackType = new HashMap<Integer, String>();

    /**
     * Map holding constants for ThermostatSetbackSetSetbackState
     */
    private static Map<Integer, String> constantThermostatSetbackSetSetbackState = new HashMap<Integer, String>();

    /**
     * Map holding constants for ThermostatSetbackReportSetbackState
     */
    private static Map<Integer, String> constantThermostatSetbackReportSetbackState = new HashMap<Integer, String>();

    /**
     * Map holding constants for ThermostatSetbackSetSetbackType
     */
    private static Map<Integer, String> constantThermostatSetbackSetSetbackType = new HashMap<Integer, String>();

    static {
        // Constants for ThermostatSetbackReportSetbackType
        constantThermostatSetbackReportSetbackType.put(0x00, "NO_OVERRIDE");
        constantThermostatSetbackReportSetbackType.put(0x01, "TEMPORARY_OVERRIDE");
        constantThermostatSetbackReportSetbackType.put(0x02, "PERMANENT_OVERRIDE");

        // Constants for ThermostatSetbackSetSetbackState
        constantThermostatSetbackSetSetbackState.put(0x7F, "UNUSED_STATE");
        constantThermostatSetbackSetSetbackState.put(0x7A, "ENERGY_SAVING_MODE");
        constantThermostatSetbackSetSetbackState.put(0x79, "FROST_PROTECTION");

        // Constants for ThermostatSetbackReportSetbackState
        constantThermostatSetbackReportSetbackState.put(0x7F, "UNUSED_STATE");
        constantThermostatSetbackReportSetbackState.put(0x7A, "ENERGY_SAVING_MODE");
        constantThermostatSetbackReportSetbackState.put(0x79, "FROST_PROTECTION");

        // Constants for ThermostatSetbackSetSetbackType
        constantThermostatSetbackSetSetbackType.put(0x00, "NO_OVERRIDE");
        constantThermostatSetbackSetSetbackType.put(0x01, "TEMPORARY_OVERRIDE");
        constantThermostatSetbackSetSetbackType.put(0x02, "PERMANENT_OVERRIDE");
    }

    /**
     * Creates a new message with the THERMOSTAT_SETBACK_SET command.
     * <p>
     * Thermostat Setback Set
     *
     * @param setbackType {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>NO_OVERRIDE
     *            <li>TEMPORARY_OVERRIDE
     *            <li>PERMANENT_OVERRIDE
     *            </ul>
     * @param setbackState {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>UNUSED_STATE
     *            <li>ENERGY_SAVING_MODE
     *            <li>FROST_PROTECTION
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getThermostatSetbackSet(String setbackType, String setbackState) {
        logger.debug("Creating command message THERMOSTAT_SETBACK_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(THERMOSTAT_SETBACK_SET);

        // Process 'Properties1'
        int varSetbackType = Integer.MAX_VALUE;
        for (Integer entry : constantThermostatSetbackSetSetbackType.keySet()) {
            if (constantThermostatSetbackSetSetbackType.get(entry).equals(setbackType)) {
                varSetbackType = entry;
                break;
            }
        }
        if (varSetbackType == Integer.MAX_VALUE) {
            throw new IllegalArgumentException("Unknown constant value '" + setbackType + "' for setbackType");
        }
        outputData.write(varSetbackType & 0x03);

        // Process 'Setback State'
        boolean foundSetbackState = false;
        for (Integer entry : constantThermostatSetbackSetSetbackState.keySet()) {
            if (constantThermostatSetbackSetSetbackState.get(entry).equals(setbackState)) {
                outputData.write(entry);
                foundSetbackState = true;
                break;
            }
        }
        if (!foundSetbackState) {
            throw new IllegalArgumentException("Unknown constant value '" + setbackState + "' for setbackState");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the THERMOSTAT_SETBACK_SET command.
     * <p>
     * Thermostat Setback Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SETBACK_TYPE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>NO_OVERRIDE
     * <li>TEMPORARY_OVERRIDE
     * <li>PERMANENT_OVERRIDE
     * </ul>
     * <li>SETBACK_STATE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>UNUSED_STATE
     * <li>ENERGY_SAVING_MODE
     * <li>FROST_PROTECTION
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleThermostatSetbackSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("SETBACK_TYPE", constantThermostatSetbackSetSetbackType.get(payload[2] & 0x03));

        // Process 'Setback State'
        response.put("SETBACK_STATE", constantThermostatSetbackSetSetbackState.get(payload[3] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the THERMOSTAT_SETBACK_GET command.
     * <p>
     * Thermostat Setback Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getThermostatSetbackGet() {
        logger.debug("Creating command message THERMOSTAT_SETBACK_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(THERMOSTAT_SETBACK_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the THERMOSTAT_SETBACK_GET command.
     * <p>
     * Thermostat Setback Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleThermostatSetbackGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the THERMOSTAT_SETBACK_REPORT command.
     * <p>
     * Thermostat Setback Report
     *
     * @param setbackType {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>NO_OVERRIDE
     *            <li>TEMPORARY_OVERRIDE
     *            <li>PERMANENT_OVERRIDE
     *            </ul>
     * @param setbackState {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>UNUSED_STATE
     *            <li>ENERGY_SAVING_MODE
     *            <li>FROST_PROTECTION
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getThermostatSetbackReport(String setbackType, String setbackState) {
        logger.debug("Creating command message THERMOSTAT_SETBACK_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(THERMOSTAT_SETBACK_REPORT);

        // Process 'Properties1'
        int varSetbackType = Integer.MAX_VALUE;
        for (Integer entry : constantThermostatSetbackReportSetbackType.keySet()) {
            if (constantThermostatSetbackReportSetbackType.get(entry).equals(setbackType)) {
                varSetbackType = entry;
                break;
            }
        }
        if (varSetbackType == Integer.MAX_VALUE) {
            throw new IllegalArgumentException("Unknown constant value '" + setbackType + "' for setbackType");
        }
        outputData.write(varSetbackType & 0x03);

        // Process 'Setback State'
        boolean foundSetbackState = false;
        for (Integer entry : constantThermostatSetbackReportSetbackState.keySet()) {
            if (constantThermostatSetbackReportSetbackState.get(entry).equals(setbackState)) {
                outputData.write(entry);
                foundSetbackState = true;
                break;
            }
        }
        if (!foundSetbackState) {
            throw new IllegalArgumentException("Unknown constant value '" + setbackState + "' for setbackState");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the THERMOSTAT_SETBACK_REPORT command.
     * <p>
     * Thermostat Setback Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SETBACK_TYPE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>NO_OVERRIDE
     * <li>TEMPORARY_OVERRIDE
     * <li>PERMANENT_OVERRIDE
     * </ul>
     * <li>SETBACK_STATE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>UNUSED_STATE
     * <li>ENERGY_SAVING_MODE
     * <li>FROST_PROTECTION
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleThermostatSetbackReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("SETBACK_TYPE", constantThermostatSetbackReportSetbackType.get(payload[2] & 0x03));

        // Process 'Setback State'
        response.put("SETBACK_STATE", constantThermostatSetbackReportSetbackState.get(payload[3] & 0xff));

        // Return the map of processed response data;
        return response;
    }
}
