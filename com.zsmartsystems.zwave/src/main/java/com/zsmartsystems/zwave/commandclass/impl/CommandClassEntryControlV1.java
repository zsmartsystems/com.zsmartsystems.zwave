/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_ENTRY_CONTROL</b> version <b>1</b>.
 * <p>
 * Command Class Entry Control
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x6F.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassEntryControlV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassEntryControlV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_ENTRY_CONTROL
     */
    public final static int COMMAND_CLASS_KEY = 0x6F;

    /**
     * Entry Control Notification Command Constant
     */
    public final static int ENTRY_CONTROL_NOTIFICATION = 0x01;
    /**
     * Entry Control Key Supported Get Command Constant
     */
    public final static int ENTRY_CONTROL_KEY_SUPPORTED_GET = 0x02;
    /**
     * Entry Control Key Supported Report Command Constant
     */
    public final static int ENTRY_CONTROL_KEY_SUPPORTED_REPORT = 0x03;
    /**
     * Entry Control Event Supported Get Command Constant
     */
    public final static int ENTRY_CONTROL_EVENT_SUPPORTED_GET = 0x04;
    /**
     * Entry Control Event Supported Report Command Constant
     */
    public final static int ENTRY_CONTROL_EVENT_SUPPORTED_REPORT = 0x05;
    /**
     * Entry Control Configuration Set Command Constant
     */
    public final static int ENTRY_CONTROL_CONFIGURATION_SET = 0x06;
    /**
     * Entry Control Configuration Get Command Constant
     */
    public final static int ENTRY_CONTROL_CONFIGURATION_GET = 0x07;
    /**
     * Entry Control Configuration Report Command Constant
     */
    public final static int ENTRY_CONTROL_CONFIGURATION_REPORT = 0x08;

    /**
     * Map holding constants for EntryControlNotificationEventType
     */
    private static Map<Integer, String> constantEntryControlNotificationEventType = new HashMap<Integer, String>();

    /**
     * Map holding constants for EntryControlEventSupportedReportDataTypeSupportedBitMask
     */
    private static Map<Integer, String> constantEntryControlEventSupportedReportDataTypeSupportedBitMask = new HashMap<Integer, String>();

    /**
     * Map holding constants for EntryControlEventSupportedReportEventTypeSupportedBitMask
     */
    private static Map<Integer, String> constantEntryControlEventSupportedReportEventTypeSupportedBitMask = new HashMap<Integer, String>();

    /**
     * Map holding constants for EntryControlNotificationDataType
     */
    private static Map<Integer, String> constantEntryControlNotificationDataType = new HashMap<Integer, String>();

    static {
        // Constants for EntryControlNotificationEventType
        constantEntryControlNotificationEventType.put(0x00, "CACHING");
        constantEntryControlNotificationEventType.put(0x01, "CACHED_KEYS");
        constantEntryControlNotificationEventType.put(0x02, "ENTER");
        constantEntryControlNotificationEventType.put(0x03, "DISARM_ALL");
        constantEntryControlNotificationEventType.put(0x04, "ARM_ALL");
        constantEntryControlNotificationEventType.put(0x05, "ARM_AWAY");
        constantEntryControlNotificationEventType.put(0x06, "ARM_HOME");
        constantEntryControlNotificationEventType.put(0x07, "EXIT_DELAY");
        constantEntryControlNotificationEventType.put(0x08, "ARM_1");
        constantEntryControlNotificationEventType.put(0x09, "ARM_2");
        constantEntryControlNotificationEventType.put(0x0A, "ARM_3");
        constantEntryControlNotificationEventType.put(0x0B, "ARM_4");
        constantEntryControlNotificationEventType.put(0x0C, "ARM_5");
        constantEntryControlNotificationEventType.put(0x0D, "ARM_6");
        constantEntryControlNotificationEventType.put(0x0E, "RFID");
        constantEntryControlNotificationEventType.put(0x0F, "BELL");
        constantEntryControlNotificationEventType.put(0x11, "POLICE");
        constantEntryControlNotificationEventType.put(0x10, "FIRE");
        constantEntryControlNotificationEventType.put(0x13, "ALERT_MEDICAL");
        constantEntryControlNotificationEventType.put(0x12, "ALERT_PANIC");
        constantEntryControlNotificationEventType.put(0x15, "GATE_CLOSE");
        constantEntryControlNotificationEventType.put(0x14, "GATE_OPEN");
        constantEntryControlNotificationEventType.put(0x17, "UNLOCK");
        constantEntryControlNotificationEventType.put(0x16, "LOCK");
        constantEntryControlNotificationEventType.put(0x19, "CANCEL");
        constantEntryControlNotificationEventType.put(0x18, "TEST");

        // Constants for EntryControlEventSupportedReportDataTypeSupportedBitMask
        constantEntryControlEventSupportedReportDataTypeSupportedBitMask.put(0x00, "NA");
        constantEntryControlEventSupportedReportDataTypeSupportedBitMask.put(0x01, "RAW");
        constantEntryControlEventSupportedReportDataTypeSupportedBitMask.put(0x02, "ASCII");
        constantEntryControlEventSupportedReportDataTypeSupportedBitMask.put(0x03, "MD5");

        // Constants for EntryControlEventSupportedReportEventTypeSupportedBitMask
        constantEntryControlEventSupportedReportEventTypeSupportedBitMask.put(0x00, "CACHING");
        constantEntryControlEventSupportedReportEventTypeSupportedBitMask.put(0x01, "CACHED_KEYS");
        constantEntryControlEventSupportedReportEventTypeSupportedBitMask.put(0x02, "ENTER");
        constantEntryControlEventSupportedReportEventTypeSupportedBitMask.put(0x03, "DISARM_ALL");
        constantEntryControlEventSupportedReportEventTypeSupportedBitMask.put(0x04, "ARM_ALL");
        constantEntryControlEventSupportedReportEventTypeSupportedBitMask.put(0x05, "ARM_AWAY");
        constantEntryControlEventSupportedReportEventTypeSupportedBitMask.put(0x06, "ARM_HOME");
        constantEntryControlEventSupportedReportEventTypeSupportedBitMask.put(0x07, "EXIT_DELAY");
        constantEntryControlEventSupportedReportEventTypeSupportedBitMask.put(0x08, "ARM_1");
        constantEntryControlEventSupportedReportEventTypeSupportedBitMask.put(0x09, "ARM_2");
        constantEntryControlEventSupportedReportEventTypeSupportedBitMask.put(0x0A, "ARM_3");
        constantEntryControlEventSupportedReportEventTypeSupportedBitMask.put(0x0B, "ARM_4");
        constantEntryControlEventSupportedReportEventTypeSupportedBitMask.put(0x0C, "ARM_5");
        constantEntryControlEventSupportedReportEventTypeSupportedBitMask.put(0x0D, "ARM_6");
        constantEntryControlEventSupportedReportEventTypeSupportedBitMask.put(0x0E, "RFID");
        constantEntryControlEventSupportedReportEventTypeSupportedBitMask.put(0x0F, "BELL");
        constantEntryControlEventSupportedReportEventTypeSupportedBitMask.put(0x11, "POLICE");
        constantEntryControlEventSupportedReportEventTypeSupportedBitMask.put(0x10, "FIRE");
        constantEntryControlEventSupportedReportEventTypeSupportedBitMask.put(0x13, "ALERT_MEDICAL");
        constantEntryControlEventSupportedReportEventTypeSupportedBitMask.put(0x12, "ALERT_PANIC");
        constantEntryControlEventSupportedReportEventTypeSupportedBitMask.put(0x15, "GATE_CLOSE");
        constantEntryControlEventSupportedReportEventTypeSupportedBitMask.put(0x14, "GATE_OPEN");
        constantEntryControlEventSupportedReportEventTypeSupportedBitMask.put(0x17, "UNLOCK");
        constantEntryControlEventSupportedReportEventTypeSupportedBitMask.put(0x16, "LOCK");
        constantEntryControlEventSupportedReportEventTypeSupportedBitMask.put(0x19, "CANCEL");
        constantEntryControlEventSupportedReportEventTypeSupportedBitMask.put(0x18, "TEST");

        // Constants for EntryControlNotificationDataType
        constantEntryControlNotificationDataType.put(0x00, "NA");
        constantEntryControlNotificationDataType.put(0x01, "RAW");
        constantEntryControlNotificationDataType.put(0x02, "ASCII");
        constantEntryControlNotificationDataType.put(0x03, "MD5");
    }

    /**
     * Creates a new message with the ENTRY_CONTROL_NOTIFICATION command.
     * <p>
     * Entry Control Notification
     *
     * @param sequenceNumber {@link Integer}
     * @param dataType {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>NA
     *            <li>RAW
     *            <li>ASCII
     *            <li>MD5
     *            </ul>
     * @param eventType {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>CACHING
     *            <li>CACHED_KEYS
     *            <li>ENTER
     *            <li>DISARM_ALL
     *            <li>ARM_ALL
     *            <li>ARM_AWAY
     *            <li>ARM_HOME
     *            <li>EXIT_DELAY
     *            <li>ARM_1
     *            <li>ARM_2
     *            <li>ARM_3
     *            <li>ARM_4
     *            <li>ARM_5
     *            <li>ARM_6
     *            <li>RFID
     *            <li>BELL
     *            <li>POLICE
     *            <li>FIRE
     *            <li>ALERT_MEDICAL
     *            <li>ALERT_PANIC
     *            <li>GATE_CLOSE
     *            <li>GATE_OPEN
     *            <li>UNLOCK
     *            <li>LOCK
     *            <li>CANCEL
     *            <li>TEST
     *            </ul>
     * @param eventDataLength {@link Integer}
     * @param eventData {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getEntryControlNotification(Integer sequenceNumber, String dataType, String eventType,
            Integer eventDataLength, byte[] eventData) {
        logger.debug("Creating command message ENTRY_CONTROL_NOTIFICATION version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(ENTRY_CONTROL_NOTIFICATION);

        // Process 'Sequence Number'
        outputData.write(sequenceNumber);

        // Process 'Properties1'
        int varDataType = Integer.MAX_VALUE;
        for (Integer entry : constantEntryControlNotificationDataType.keySet()) {
            if (constantEntryControlNotificationDataType.get(entry).equals(dataType)) {
                varDataType = entry;
                break;
            }
        }
        if (varDataType == Integer.MAX_VALUE) {
            throw new IllegalArgumentException("Unknown constant value '" + dataType + "' for dataType");
        }
        outputData.write(varDataType & 0x03);

        // Process 'Event Type'
        boolean foundEventType = false;
        for (Integer entry : constantEntryControlNotificationEventType.keySet()) {
            if (constantEntryControlNotificationEventType.get(entry).equals(eventType)) {
                outputData.write(entry);
                foundEventType = true;
                break;
            }
        }
        if (!foundEventType) {
            throw new IllegalArgumentException("Unknown constant value '" + eventType + "' for eventType");
        }

        // Process 'Event Data Length'
        outputData.write(eventDataLength);

        // Process 'Event Data'
        if (eventData != null) {
            try {
                outputData.write(eventData);
            } catch (IOException e) {
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the ENTRY_CONTROL_NOTIFICATION command.
     * <p>
     * Entry Control Notification
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQUENCE_NUMBER {@link Integer}
     * <li>DATA_TYPE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>NA
     * <li>RAW
     * <li>ASCII
     * <li>MD5
     * </ul>
     * <li>EVENT_TYPE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>CACHING
     * <li>CACHED_KEYS
     * <li>ENTER
     * <li>DISARM_ALL
     * <li>ARM_ALL
     * <li>ARM_AWAY
     * <li>ARM_HOME
     * <li>EXIT_DELAY
     * <li>ARM_1
     * <li>ARM_2
     * <li>ARM_3
     * <li>ARM_4
     * <li>ARM_5
     * <li>ARM_6
     * <li>RFID
     * <li>BELL
     * <li>POLICE
     * <li>FIRE
     * <li>ALERT_MEDICAL
     * <li>ALERT_PANIC
     * <li>GATE_CLOSE
     * <li>GATE_OPEN
     * <li>UNLOCK
     * <li>LOCK
     * <li>CANCEL
     * <li>TEST
     * </ul>
     * <li>EVENT_DATA_LENGTH {@link Integer}
     * <li>EVENT_DATA {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleEntryControlNotification(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Sequence Number'
        response.put("SEQUENCE_NUMBER", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Properties1'
        response.put("DATA_TYPE", constantEntryControlNotificationDataType.get(payload[msgOffset] & 0x03));
        msgOffset += 1;

        // Process 'Event Type'
        response.put("EVENT_TYPE", constantEntryControlNotificationEventType.get(payload[msgOffset] & 0xff));
        msgOffset += 1;

        // Process 'Event Data Length'
        response.put("EVENT_DATA_LENGTH", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Event Data'
        ByteArrayOutputStream valEventData = new ByteArrayOutputStream();
        int lenEventData = payload[msgOffset - 1];
        for (int cntEventData = 0; cntEventData < lenEventData; cntEventData++) {
            valEventData.write(payload[msgOffset + cntEventData]);
        }
        response.put("EVENT_DATA", valEventData.toByteArray());
        msgOffset += lenEventData;

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the ENTRY_CONTROL_KEY_SUPPORTED_GET command.
     * <p>
     * Entry Control Key Supported Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getEntryControlKeySupportedGet() {
        logger.debug("Creating command message ENTRY_CONTROL_KEY_SUPPORTED_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(ENTRY_CONTROL_KEY_SUPPORTED_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the ENTRY_CONTROL_KEY_SUPPORTED_GET command.
     * <p>
     * Entry Control Key Supported Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleEntryControlKeySupportedGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the ENTRY_CONTROL_KEY_SUPPORTED_REPORT command.
     * <p>
     * Entry Control Key Supported Report
     *
     * @param keySupportedBitMaskLength {@link Integer}
     * @param keySupportedBitMask {@link List<Integer>}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getEntryControlKeySupportedReport(Integer keySupportedBitMaskLength,
            List<Integer> keySupportedBitMask) {
        logger.debug("Creating command message ENTRY_CONTROL_KEY_SUPPORTED_REPORT version 1");

        Collections.sort(keySupportedBitMask);
        int lenKeySupportedBitMask = (keySupportedBitMask.get(keySupportedBitMask.size() - 1) / 8) + 1;

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(ENTRY_CONTROL_KEY_SUPPORTED_REPORT);

        // Process 'Key Supported Bit Mask Length'
        outputData.write(keySupportedBitMaskLength);

        // Process 'Key Supported Bit Mask'
        int valKeySupportedBitMask = 0;
        for (int cntKeySupportedBitMask = 1 ; cntKeySupportedBitMask < lenKeySupportedBitMask * 8 ; cntKeySupportedBitMask++) {
            valKeySupportedBitMask |= keySupportedBitMask.contains(valKeySupportedBitMask) ? (1 << cntKeySupportedBitMask % 8) : 0;
            if (cntKeySupportedBitMask % 8 == 0) {
                outputData.write(valKeySupportedBitMask);
                valKeySupportedBitMask = 0;
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the ENTRY_CONTROL_KEY_SUPPORTED_REPORT command.
     * <p>
     * Entry Control Key Supported Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>KEY_SUPPORTED_BIT_MASK_LENGTH {@link Integer}
     * <li>KEY_SUPPORTED_BIT_MASK {@link List}<{@link Integer}>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleEntryControlKeySupportedReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Key Supported Bit Mask Length'
        response.put("KEY_SUPPORTED_BIT_MASK_LENGTH", Integer.valueOf(payload[2]));

        // Process 'Key Supported Bit Mask'
        List<Integer> responseKeySupportedBitMask = new ArrayList<Integer>();
        int lenKeySupportedBitMask = (payload[2] & 0xFF) * 8;
        for (int cntKeySupportedBitMask = 0; cntKeySupportedBitMask < lenKeySupportedBitMask; cntKeySupportedBitMask++) {
            if ((payload[3 + (cntKeySupportedBitMask / 8)] & (1 << cntKeySupportedBitMask % 8)) == 0) {
                continue;
            }
            responseKeySupportedBitMask.add(cntKeySupportedBitMask);
        }
        response.put("KEY_SUPPORTED_BIT_MASK", responseKeySupportedBitMask);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the ENTRY_CONTROL_EVENT_SUPPORTED_GET command.
     * <p>
     * Entry Control Event Supported Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getEntryControlEventSupportedGet() {
        logger.debug("Creating command message ENTRY_CONTROL_EVENT_SUPPORTED_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(ENTRY_CONTROL_EVENT_SUPPORTED_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the ENTRY_CONTROL_EVENT_SUPPORTED_GET command.
     * <p>
     * Entry Control Event Supported Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleEntryControlEventSupportedGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the ENTRY_CONTROL_EVENT_SUPPORTED_REPORT command.
     * <p>
     * Entry Control Event Supported Report
     *
     * @param dataTypeSupportedBitMask {@link List<String>}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>NA
     *            <li>RAW
     *            <li>ASCII
     *            <li>MD5
     *            </ul>
     * @param eventTypeSupportedBitMask {@link List<String>}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>CACHING
     *            <li>CACHED_KEYS
     *            <li>ENTER
     *            <li>DISARM_ALL
     *            <li>ARM_ALL
     *            <li>ARM_AWAY
     *            <li>ARM_HOME
     *            <li>EXIT_DELAY
     *            <li>ARM_1
     *            <li>ARM_2
     *            <li>ARM_3
     *            <li>ARM_4
     *            <li>ARM_5
     *            <li>ARM_6
     *            <li>RFID
     *            <li>BELL
     *            <li>POLICE
     *            <li>FIRE
     *            <li>ALERT_MEDICAL
     *            <li>ALERT_PANIC
     *            <li>GATE_CLOSE
     *            <li>GATE_OPEN
     *            <li>UNLOCK
     *            <li>LOCK
     *            <li>CANCEL
     *            <li>TEST
     *            </ul>
     * @param keyCachedSizeSupportedMinimum {@link Integer}
     * @param keyCachedSizeSupportedMaximum {@link Integer}
     * @param keyCachedTimeoutSupportedMinimum {@link Integer}
     * @param keyCachedTimeoutSupportedMaximum {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getEntryControlEventSupportedReport(List<String> dataTypeSupportedBitMask,
            List<String> eventTypeSupportedBitMask, Integer keyCachedSizeSupportedMinimum,
            Integer keyCachedSizeSupportedMaximum, Integer keyCachedTimeoutSupportedMinimum,
            Integer keyCachedTimeoutSupportedMaximum) {
        logger.debug("Creating command message ENTRY_CONTROL_EVENT_SUPPORTED_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(ENTRY_CONTROL_EVENT_SUPPORTED_REPORT);

        // Process 'Properties1'
        outputData.write(0);

        // Process 'Data Type Supported Bit Mask'
        int valDataTypeSupportedBitMask = 0;
        for (String value : dataTypeSupportedBitMask) {
            boolean foundDataTypeSupportedBitMask = false;
            for (Integer entry : constantEntryControlEventSupportedReportDataTypeSupportedBitMask.keySet()) {
                if (constantEntryControlEventSupportedReportDataTypeSupportedBitMask.get(entry).equals(value)) {
                    foundDataTypeSupportedBitMask = true;
                    valDataTypeSupportedBitMask += entry;
                    break;
                }
            }
            if (!foundDataTypeSupportedBitMask) {
                throw new IllegalArgumentException("Unknown constant value '" + dataTypeSupportedBitMask + "' for dataTypeSupportedBitMask");
            }
        }
        outputData.write(valDataTypeSupportedBitMask);

        // Process 'Properties2'
        outputData.write(0);

        // Process 'Event Type Supported Bit Mask'
        int valEventTypeSupportedBitMask = 0;
        for (String value : eventTypeSupportedBitMask) {
            boolean foundEventTypeSupportedBitMask = false;
            for (Integer entry : constantEntryControlEventSupportedReportEventTypeSupportedBitMask.keySet()) {
                if (constantEntryControlEventSupportedReportEventTypeSupportedBitMask.get(entry).equals(value)) {
                    foundEventTypeSupportedBitMask = true;
                    valEventTypeSupportedBitMask += entry;
                    break;
                }
            }
            if (!foundEventTypeSupportedBitMask) {
                throw new IllegalArgumentException("Unknown constant value '" + eventTypeSupportedBitMask + "' for eventTypeSupportedBitMask");
            }
        }
        outputData.write(valEventTypeSupportedBitMask);

        // Process 'Key Cached Size supported Minimum'
        outputData.write(keyCachedSizeSupportedMinimum);

        // Process 'Key Cached Size supported Maximum'
        outputData.write(keyCachedSizeSupportedMaximum);

        // Process 'Key Cached Timeout supported Minimum'
        outputData.write(keyCachedTimeoutSupportedMinimum);

        // Process 'Key Cached Timeout supported Maximum'
        outputData.write(keyCachedTimeoutSupportedMaximum);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the ENTRY_CONTROL_EVENT_SUPPORTED_REPORT command.
     * <p>
     * Entry Control Event Supported Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>DATA_TYPE_SUPPORTED_BIT_MASK {@link List}<{@link String}>
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>NA
     * <li>RAW
     * <li>ASCII
     * <li>MD5
     * </ul>
     * <li>EVENT_TYPE_SUPPORTED_BIT_MASK {@link List}<{@link String}>
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>CACHING
     * <li>CACHED_KEYS
     * <li>ENTER
     * <li>DISARM_ALL
     * <li>ARM_ALL
     * <li>ARM_AWAY
     * <li>ARM_HOME
     * <li>EXIT_DELAY
     * <li>ARM_1
     * <li>ARM_2
     * <li>ARM_3
     * <li>ARM_4
     * <li>ARM_5
     * <li>ARM_6
     * <li>RFID
     * <li>BELL
     * <li>POLICE
     * <li>FIRE
     * <li>ALERT_MEDICAL
     * <li>ALERT_PANIC
     * <li>GATE_CLOSE
     * <li>GATE_OPEN
     * <li>UNLOCK
     * <li>LOCK
     * <li>CANCEL
     * <li>TEST
     * </ul>
     * <li>KEY_CACHED_SIZE_SUPPORTED_MINIMUM {@link Integer}
     * <li>KEY_CACHED_SIZE_SUPPORTED_MAXIMUM {@link Integer}
     * <li>KEY_CACHED_TIMEOUT_SUPPORTED_MINIMUM {@link Integer}
     * <li>KEY_CACHED_TIMEOUT_SUPPORTED_MAXIMUM {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleEntryControlEventSupportedReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("DATA_TYPE_SUPPORTED_BIT_MASK_LENGTH", Integer.valueOf(payload[2] & 0x03));

        // Process 'Data Type Supported Bit Mask'
        List<String> responseDataTypeSupportedBitMask = new ArrayList<String>();
        int lenDataTypeSupportedBitMask = (payload[2] & 0x03) * 8;
        for (int cntDataTypeSupportedBitMask = 0; cntDataTypeSupportedBitMask < lenDataTypeSupportedBitMask; cntDataTypeSupportedBitMask++) {
            if ((payload[3 + (cntDataTypeSupportedBitMask / 8)] & (1 << cntDataTypeSupportedBitMask % 8)) == 0) {
                continue;
            }
            responseDataTypeSupportedBitMask.add(constantEntryControlEventSupportedReportDataTypeSupportedBitMask.get(cntDataTypeSupportedBitMask));
        }
        response.put("DATA_TYPE_SUPPORTED_BIT_MASK", responseDataTypeSupportedBitMask);

        // Process 'Properties2'
        response.put("EVENT_SUPPORTED_BIT_MASK_LENGTH", Integer.valueOf(payload[4] & 0x1F));

        // Process 'Event Type Supported Bit Mask'
        List<String> responseEventTypeSupportedBitMask = new ArrayList<String>();
        int lenEventTypeSupportedBitMask = (payload[4] & 0x1F) * 8;
        for (int cntEventTypeSupportedBitMask = 0; cntEventTypeSupportedBitMask < lenEventTypeSupportedBitMask; cntEventTypeSupportedBitMask++) {
            if ((payload[5 + (cntEventTypeSupportedBitMask / 8)] & (1 << cntEventTypeSupportedBitMask % 8)) == 0) {
                continue;
            }
            responseEventTypeSupportedBitMask.add(constantEntryControlEventSupportedReportEventTypeSupportedBitMask.get(cntEventTypeSupportedBitMask));
        }
        response.put("EVENT_TYPE_SUPPORTED_BIT_MASK", responseEventTypeSupportedBitMask);

        // Process 'Key Cached Size supported Minimum'
        response.put("KEY_CACHED_SIZE_SUPPORTED_MINIMUM", Integer.valueOf(payload[6]));

        // Process 'Key Cached Size supported Maximum'
        response.put("KEY_CACHED_SIZE_SUPPORTED_MAXIMUM", Integer.valueOf(payload[7]));

        // Process 'Key Cached Timeout supported Minimum'
        response.put("KEY_CACHED_TIMEOUT_SUPPORTED_MINIMUM", Integer.valueOf(payload[8]));

        // Process 'Key Cached Timeout supported Maximum'
        response.put("KEY_CACHED_TIMEOUT_SUPPORTED_MAXIMUM", Integer.valueOf(payload[9]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the ENTRY_CONTROL_CONFIGURATION_SET command.
     * <p>
     * Entry Control Configuration Set
     *
     * @param keyCacheSize {@link Integer}
     * @param keyCacheTimeout {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getEntryControlConfigurationSet(Integer keyCacheSize, Integer keyCacheTimeout) {
        logger.debug("Creating command message ENTRY_CONTROL_CONFIGURATION_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(ENTRY_CONTROL_CONFIGURATION_SET);

        // Process 'Key Cache Size'
        outputData.write(keyCacheSize);

        // Process 'Key Cache Timeout'
        outputData.write(keyCacheTimeout);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the ENTRY_CONTROL_CONFIGURATION_SET command.
     * <p>
     * Entry Control Configuration Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>KEY_CACHE_SIZE {@link Integer}
     * <li>KEY_CACHE_TIMEOUT {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleEntryControlConfigurationSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Key Cache Size'
        response.put("KEY_CACHE_SIZE", Integer.valueOf(payload[2]));

        // Process 'Key Cache Timeout'
        response.put("KEY_CACHE_TIMEOUT", Integer.valueOf(payload[3]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the ENTRY_CONTROL_CONFIGURATION_GET command.
     * <p>
     * Entry Control Configuration Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getEntryControlConfigurationGet() {
        logger.debug("Creating command message ENTRY_CONTROL_CONFIGURATION_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(ENTRY_CONTROL_CONFIGURATION_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the ENTRY_CONTROL_CONFIGURATION_GET command.
     * <p>
     * Entry Control Configuration Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleEntryControlConfigurationGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the ENTRY_CONTROL_CONFIGURATION_REPORT command.
     * <p>
     * Entry Control Configuration Report
     *
     * @param keyCacheSize {@link Integer}
     * @param keyCacheTimeout {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getEntryControlConfigurationReport(Integer keyCacheSize, Integer keyCacheTimeout) {
        logger.debug("Creating command message ENTRY_CONTROL_CONFIGURATION_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(ENTRY_CONTROL_CONFIGURATION_REPORT);

        // Process 'Key Cache Size'
        outputData.write(keyCacheSize);

        // Process 'Key Cache Timeout'
        outputData.write(keyCacheTimeout);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the ENTRY_CONTROL_CONFIGURATION_REPORT command.
     * <p>
     * Entry Control Configuration Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>KEY_CACHE_SIZE {@link Integer}
     * <li>KEY_CACHE_TIMEOUT {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleEntryControlConfigurationReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Key Cache Size'
        response.put("KEY_CACHE_SIZE", Integer.valueOf(payload[2]));

        // Process 'Key Cache Timeout'
        response.put("KEY_CACHE_TIMEOUT", Integer.valueOf(payload[3]));

        // Return the map of processed response data;
        return response;
    }
}
