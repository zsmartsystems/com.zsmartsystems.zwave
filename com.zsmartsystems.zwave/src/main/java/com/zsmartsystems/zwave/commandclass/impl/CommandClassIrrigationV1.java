/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_IRRIGATION</b> version <b>1</b>.
 * <p>
 * Command Class Irrigation
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x6B.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassIrrigationV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassIrrigationV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_IRRIGATION
     */
    public final static int COMMAND_CLASS_KEY = 0x6B;

    /**
     * Irrigation System Info Get Command Constant
     */
    public final static int IRRIGATION_SYSTEM_INFO_GET = 0x01;
    /**
     * Irrigation System Info Report Command Constant
     */
    public final static int IRRIGATION_SYSTEM_INFO_REPORT = 0x02;
    /**
     * Irrigation System Status Get Command Constant
     */
    public final static int IRRIGATION_SYSTEM_STATUS_GET = 0x03;
    /**
     * Irrigation System Status Report Command Constant
     */
    public final static int IRRIGATION_SYSTEM_STATUS_REPORT = 0x04;
    /**
     * Irrigation System Config Set Command Constant
     */
    public final static int IRRIGATION_SYSTEM_CONFIG_SET = 0x05;
    /**
     * Irrigation System Config Get Command Constant
     */
    public final static int IRRIGATION_SYSTEM_CONFIG_GET = 0x06;
    /**
     * Irrigation System Config Report Command Constant
     */
    public final static int IRRIGATION_SYSTEM_CONFIG_REPORT = 0x07;
    /**
     * Irrigation Valve Info Get Command Constant
     */
    public final static int IRRIGATION_VALVE_INFO_GET = 0x08;
    /**
     * Irrigation Valve Info Report Command Constant
     */
    public final static int IRRIGATION_VALVE_INFO_REPORT = 0x09;
    /**
     * Irrigation Valve Config Set Command Constant
     */
    public final static int IRRIGATION_VALVE_CONFIG_SET = 0x0A;
    /**
     * Irrigation Valve Config Get Command Constant
     */
    public final static int IRRIGATION_VALVE_CONFIG_GET = 0x0B;
    /**
     * Irrigation Valve Config Report Command Constant
     */
    public final static int IRRIGATION_VALVE_CONFIG_REPORT = 0x0C;
    /**
     * Irrigation Valve Run Command Constant
     */
    public final static int IRRIGATION_VALVE_RUN = 0x0D;
    /**
     * Irrigation Valve Table Set Command Constant
     */
    public final static int IRRIGATION_VALVE_TABLE_SET = 0x0E;
    /**
     * Irrigation Valve Table Get Command Constant
     */
    public final static int IRRIGATION_VALVE_TABLE_GET = 0x0F;
    /**
     * Irrigation Valve Table Report Command Constant
     */
    public final static int IRRIGATION_VALVE_TABLE_REPORT = 0x10;
    /**
     * Irrigation Valve Table Run Command Constant
     */
    public final static int IRRIGATION_VALVE_TABLE_RUN = 0x11;
    /**
     * Irrigation System Shutoff Command Constant
     */
    public final static int IRRIGATION_SYSTEM_SHUTOFF = 0x12;

    /**
     * Map holding constants for IrrigationValveRunProperties1
     */
    private static Map<Integer, String> constantIrrigationValveRunProperties1 = new HashMap<Integer, String>();

    /**
     * Map holding constants for IrrigationValveInfoGetProperties1
     */
    private static Map<Integer, String> constantIrrigationValveInfoGetProperties1 = new HashMap<Integer, String>();

    /**
     * Map holding constants for IrrigationValveInfoReportProperties1
     */
    private static Map<Integer, String> constantIrrigationValveInfoReportProperties1 = new HashMap<Integer, String>();

    /**
     * Map holding constants for IrrigationSystemConfigSetSensorPolarity
     */
    private static Map<Integer, String> constantIrrigationSystemConfigSetSensorPolarity = new HashMap<Integer, String>();

    /**
     * Map holding constants for IrrigationValveConfigReportProperties1
     */
    private static Map<Integer, String> constantIrrigationValveConfigReportProperties1 = new HashMap<Integer, String>();

    /**
     * Map holding constants for IrrigationSystemInfoReportProperties1
     */
    private static Map<Integer, String> constantIrrigationSystemInfoReportProperties1 = new HashMap<Integer, String>();

    /**
     * Map holding constants for IrrigationValveConfigGetProperties1
     */
    private static Map<Integer, String> constantIrrigationValveConfigGetProperties1 = new HashMap<Integer, String>();

    /**
     * Map holding constants for IrrigationValveConfigSetSensorUsage
     */
    private static Map<Integer, String> constantIrrigationValveConfigSetSensorUsage = new HashMap<Integer, String>();

    /**
     * Map holding constants for IrrigationSystemStatusReportSystemErrorStatus
     */
    private static Map<Integer, String> constantIrrigationSystemStatusReportSystemErrorStatus = new HashMap<Integer, String>();

    /**
     * Map holding constants for IrrigationValveInfoReportValveErrorStatus
     */
    private static Map<Integer, String> constantIrrigationValveInfoReportValveErrorStatus = new HashMap<Integer, String>();

    /**
     * Map holding constants for IrrigationSystemStatusReportProperties3
     */
    private static Map<Integer, String> constantIrrigationSystemStatusReportProperties3 = new HashMap<Integer, String>();

    /**
     * Map holding constants for IrrigationSystemStatusReportSensorStatus
     */
    private static Map<Integer, String> constantIrrigationSystemStatusReportSensorStatus = new HashMap<Integer, String>();

    /**
     * Map holding constants for IrrigationValveConfigSetProperties1
     */
    private static Map<Integer, String> constantIrrigationValveConfigSetProperties1 = new HashMap<Integer, String>();

    /**
     * Map holding constants for IrrigationValveConfigReportSensorUsage
     */
    private static Map<Integer, String> constantIrrigationValveConfigReportSensorUsage = new HashMap<Integer, String>();

    /**
     * Map holding constants for IrrigationSystemConfigReportSensorPolarity
     */
    private static Map<Integer, String> constantIrrigationSystemConfigReportSensorPolarity = new HashMap<Integer, String>();

    static {
        // Constants for IrrigationValveRunProperties1
        constantIrrigationValveRunProperties1.put(0x01, "MASTER_VALVE");

        // Constants for IrrigationValveInfoGetProperties1
        constantIrrigationValveInfoGetProperties1.put(0x01, "MASTER_VALVE");

        // Constants for IrrigationValveInfoReportProperties1
        constantIrrigationValveInfoReportProperties1.put(0x01, "MASTER");
        constantIrrigationValveInfoReportProperties1.put(0x02, "CONNECTED");

        // Constants for IrrigationSystemConfigSetSensorPolarity
        constantIrrigationSystemConfigSetSensorPolarity.put(0x00, "RAIN_SENSOR_POLARITY");
        constantIrrigationSystemConfigSetSensorPolarity.put(0x01, "MOISTURE_SENSOR_POLARITY");
        constantIrrigationSystemConfigSetSensorPolarity.put(0x07, "VALID");

        // Constants for IrrigationValveConfigReportProperties1
        constantIrrigationValveConfigReportProperties1.put(0x01, "MASTER_VALVE");

        // Constants for IrrigationSystemInfoReportProperties1
        constantIrrigationSystemInfoReportProperties1.put(0x01, "MASTER_VALVE");

        // Constants for IrrigationValveConfigGetProperties1
        constantIrrigationValveConfigGetProperties1.put(0x01, "MASTER_VALVE");

        // Constants for IrrigationValveConfigSetSensorUsage
        constantIrrigationValveConfigSetSensorUsage.put(0x00, "USE_RAIN_SENSOR");
        constantIrrigationValveConfigSetSensorUsage.put(0x01, "USE_MOISTURE_SENSOR");

        // Constants for IrrigationSystemStatusReportSystemErrorStatus
        constantIrrigationSystemStatusReportSystemErrorStatus.put(0x00, "NOT_PROGRAMMED");
        constantIrrigationSystemStatusReportSystemErrorStatus.put(0x01, "EMERGENCY_SHUTDOWN");
        constantIrrigationSystemStatusReportSystemErrorStatus.put(0x02, "HIGH_THRESHOLD_TRIGGERED");
        constantIrrigationSystemStatusReportSystemErrorStatus.put(0x03, "LOW_THRESHOLD_TRIGGERED");
        constantIrrigationSystemStatusReportSystemErrorStatus.put(0x04, "VALVE_ERRORS");

        // Constants for IrrigationValveInfoReportValveErrorStatus
        constantIrrigationValveInfoReportValveErrorStatus.put(0x00, "SHORT_CIRCUIT");
        constantIrrigationValveInfoReportValveErrorStatus.put(0x01, "CURRENT_HIGH_THRESHOLD");
        constantIrrigationValveInfoReportValveErrorStatus.put(0x02, "CURRENT_LOW_THRESHOLD");
        constantIrrigationValveInfoReportValveErrorStatus.put(0x03, "MAXIMUM_FLOW");
        constantIrrigationValveInfoReportValveErrorStatus.put(0x04, "FLOW_HIGH_THRESHOLD");
        constantIrrigationValveInfoReportValveErrorStatus.put(0x05, "FLOW_LOW_THRESHOLD");

        // Constants for IrrigationSystemStatusReportProperties3
        constantIrrigationSystemStatusReportProperties3.put(0x01, "MASTER_VALVE");

        // Constants for IrrigationSystemStatusReportSensorStatus
        constantIrrigationSystemStatusReportSensorStatus.put(0x00, "FLOW_SENSOR_DETECTED");
        constantIrrigationSystemStatusReportSensorStatus.put(0x01, "PRESSURE_SENSOR_DETECTED");
        constantIrrigationSystemStatusReportSensorStatus.put(0x02, "RAIN_SENSOR_DETECTED");
        constantIrrigationSystemStatusReportSensorStatus.put(0x03, "MOISTURE_SENSOR_DETECTED");

        // Constants for IrrigationValveConfigSetProperties1
        constantIrrigationValveConfigSetProperties1.put(0x01, "MASTER_VALVE");

        // Constants for IrrigationValveConfigReportSensorUsage
        constantIrrigationValveConfigReportSensorUsage.put(0x00, "USE_RAIN_SENSOR");
        constantIrrigationValveConfigReportSensorUsage.put(0x01, "USE_MOISTURE_SENSOR");

        // Constants for IrrigationSystemConfigReportSensorPolarity
        constantIrrigationSystemConfigReportSensorPolarity.put(0x00, "RAIN_SENSOR_POLARITY");
        constantIrrigationSystemConfigReportSensorPolarity.put(0x01, "MOISTURE_SENSOR_POLARITY");
        constantIrrigationSystemConfigReportSensorPolarity.put(0x07, "VALID");
    }

    /**
     * Creates a new message with the IRRIGATION_SYSTEM_INFO_GET command.
     * <p>
     * Irrigation System Info Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getIrrigationSystemInfoGet() {
        logger.debug("Creating command message IRRIGATION_SYSTEM_INFO_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(IRRIGATION_SYSTEM_INFO_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the IRRIGATION_SYSTEM_INFO_GET command.
     * <p>
     * Irrigation System Info Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleIrrigationSystemInfoGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the IRRIGATION_SYSTEM_INFO_REPORT command.
     * <p>
     * Irrigation System Info Report
     *
     * @param masterValve {@link Boolean}
     * @param totalNumberOfValves {@link Integer}
     * @param totalNumberOfValveTables {@link Integer}
     * @param valveTableMaxSize {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getIrrigationSystemInfoReport(Boolean masterValve, Integer totalNumberOfValves,
            Integer totalNumberOfValveTables, Integer valveTableMaxSize) {
        logger.debug("Creating command message IRRIGATION_SYSTEM_INFO_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(IRRIGATION_SYSTEM_INFO_REPORT);

        // Process 'Properties1'
        outputData.write(masterValve ? 0x01 : 0);

        // Process 'Total Number of Valves'
        outputData.write(totalNumberOfValves);

        // Process 'Total Number of Valve Tables'
        outputData.write(totalNumberOfValveTables);

        // Process 'Properties2'
        outputData.write(valveTableMaxSize & 0x0F);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the IRRIGATION_SYSTEM_INFO_REPORT command.
     * <p>
     * Irrigation System Info Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>MASTER_VALVE {@link Boolean}
     * <li>TOTAL_NUMBER_OF_VALVES {@link Integer}
     * <li>TOTAL_NUMBER_OF_VALVE_TABLES {@link Integer}
     * <li>VALVE_TABLE_MAX_SIZE {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleIrrigationSystemInfoReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("MASTER_VALVE", Boolean.valueOf((payload[2] & 0x01) != 0));

        // Process 'Total Number of Valves'
        response.put("TOTAL_NUMBER_OF_VALVES", Integer.valueOf(payload[3]));

        // Process 'Total Number of Valve Tables'
        response.put("TOTAL_NUMBER_OF_VALVE_TABLES", Integer.valueOf(payload[4]));

        // Process 'Properties2'
        response.put("VALVE_TABLE_MAX_SIZE", Integer.valueOf(payload[5] & 0x0F));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the IRRIGATION_SYSTEM_STATUS_GET command.
     * <p>
     * Irrigation System Status Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getIrrigationSystemStatusGet() {
        logger.debug("Creating command message IRRIGATION_SYSTEM_STATUS_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(IRRIGATION_SYSTEM_STATUS_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the IRRIGATION_SYSTEM_STATUS_GET command.
     * <p>
     * Irrigation System Status Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleIrrigationSystemStatusGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the IRRIGATION_SYSTEM_STATUS_REPORT command.
     * <p>
     * Irrigation System Status Report
     *
     * @param systemVoltage {@link Integer}
     * @param sensorStatus {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>FLOW_SENSOR_DETECTED
     *            <li>PRESSURE_SENSOR_DETECTED
     *            <li>RAIN_SENSOR_DETECTED
     *            <li>MOISTURE_SENSOR_DETECTED
     *            </ul>
     * @param flowValue {@link byte[]}
     * @param pressureValue {@link byte[]}
     * @param shutoffDuration {@link Integer}
     * @param systemErrorStatus {@link List<String>}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>NOT_PROGRAMMED
     *            <li>EMERGENCY_SHUTDOWN
     *            <li>HIGH_THRESHOLD_TRIGGERED
     *            <li>LOW_THRESHOLD_TRIGGERED
     *            <li>VALVE_ERRORS
     *            </ul>
     * @param masterValve {@link Boolean}
     * @param valveId {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getIrrigationSystemStatusReport(Integer systemVoltage, String sensorStatus, byte[] flowValue,
            byte[] pressureValue, Integer shutoffDuration, List<String> systemErrorStatus, Boolean masterValve,
            Integer valveId) {
        logger.debug("Creating command message IRRIGATION_SYSTEM_STATUS_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(IRRIGATION_SYSTEM_STATUS_REPORT);

        // Process 'System Voltage'
        outputData.write(systemVoltage);

        // Process 'Sensor Status'
        boolean foundSensorStatus = false;
        for (Integer entry : constantIrrigationSystemStatusReportSensorStatus.keySet()) {
            if (constantIrrigationSystemStatusReportSensorStatus.get(entry).equals(sensorStatus)) {
                outputData.write(entry);
                foundSensorStatus = true;
                break;
            }
        }
        if (!foundSensorStatus) {
            throw new IllegalArgumentException("Unknown constant value '" + sensorStatus + "' for sensorStatus");
        }

        // Process 'Properties1'
        // Flow Size is used by 'Flow Value'
        int flowSize = flowValue.length;
        int valProperties1 = 0;
        valProperties1 |= 0;
        valProperties1 |= ((1 << 3) & 0x18);
        valProperties1 |= ((1 << 5) & 0xE0);
        outputData.write(valProperties1);

        // Process 'Flow Value'
        if (flowValue != null) {
            try {
                outputData.write(flowValue);
            } catch (IOException e) {
            }
        }

        // Process 'Properties2'
        // Pressure Size is used by 'Pressure Value'
        int pressureSize = pressureValue.length;
        int valProperties2 = 0;
        valProperties2 |= 0;
        valProperties2 |= ((1 << 3) & 0x18);
        valProperties2 |= ((1 << 5) & 0xE0);
        outputData.write(valProperties2);

        // Process 'Pressure Value'
        if (pressureValue != null) {
            try {
                outputData.write(pressureValue);
            } catch (IOException e) {
            }
        }

        // Process 'Shutoff Duration'
        outputData.write(shutoffDuration);

        // Process 'System Error Status'
        int valSystemErrorStatus = 0;
        for (String value : systemErrorStatus) {
            boolean foundSystemErrorStatus = false;
            for (Integer entry : constantIrrigationSystemStatusReportSystemErrorStatus.keySet()) {
                if (constantIrrigationSystemStatusReportSystemErrorStatus.get(entry).equals(value)) {
                    foundSystemErrorStatus = true;
                    valSystemErrorStatus += entry;
                    break;
                }
            }
            if (!foundSystemErrorStatus) {
                throw new IllegalArgumentException("Unknown constant value '" + systemErrorStatus + "' for systemErrorStatus");
            }
        }
        outputData.write(valSystemErrorStatus);

        // Process 'Properties3'
        outputData.write(masterValve ? 0x01 : 0);

        // Process 'Valve ID'
        outputData.write(valveId);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the IRRIGATION_SYSTEM_STATUS_REPORT command.
     * <p>
     * Irrigation System Status Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SYSTEM_VOLTAGE {@link Integer}
     * <li>SENSOR_STATUS {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>FLOW_SENSOR_DETECTED
     * <li>PRESSURE_SENSOR_DETECTED
     * <li>RAIN_SENSOR_DETECTED
     * <li>MOISTURE_SENSOR_DETECTED
     * </ul>
     * <li>FLOW_VALUE {@link byte[]}
     * <li>PRESSURE_VALUE {@link byte[]}
     * <li>SHUTOFF_DURATION {@link Integer}
     * <li>SYSTEM_ERROR_STATUS {@link List}<{@link String}>
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>NOT_PROGRAMMED
     * <li>EMERGENCY_SHUTDOWN
     * <li>HIGH_THRESHOLD_TRIGGERED
     * <li>LOW_THRESHOLD_TRIGGERED
     * <li>VALVE_ERRORS
     * </ul>
     * <li>MASTER_VALVE {@link Boolean}
     * <li>VALVE_ID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleIrrigationSystemStatusReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'System Voltage'
        response.put("SYSTEM_VOLTAGE", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Sensor Status'
        response.put("SENSOR_STATUS", constantIrrigationSystemStatusReportSensorStatus.get(payload[msgOffset] & 0xff));
        msgOffset += 1;

        // Process 'Properties1'
        // Flow Size is used by 'Flow Value'
        int varFlowSize = payload[msgOffset] & 0x07;
        response.put("FLOW_SCALE", Integer.valueOf(payload[msgOffset] & 0x18 >> 3));
        response.put("FLOW_PRECISION", Integer.valueOf(payload[msgOffset] & 0xE0 >> 5));
        msgOffset += 1;

        // Process 'Flow Value'
        ByteArrayOutputStream valFlowValue = new ByteArrayOutputStream();
        for (int cntFlowValue = 0; cntFlowValue < varFlowSize; cntFlowValue++) {
            valFlowValue.write(payload[msgOffset + cntFlowValue]);
        }
        response.put("FLOW_VALUE", valFlowValue.toByteArray());
        msgOffset += varFlowSize;

        // Process 'Properties2'
        // Pressure Size is used by 'Pressure Value'
        int varPressureSize = payload[msgOffset] & 0x07;
        response.put("PRESSURE_SCALE", Integer.valueOf(payload[msgOffset] & 0x18 >> 3));
        response.put("PRESSURE_PRECISION", Integer.valueOf(payload[msgOffset] & 0xE0 >> 5));
        msgOffset += 1;

        // Process 'Pressure Value'
        ByteArrayOutputStream valPressureValue = new ByteArrayOutputStream();
        for (int cntPressureValue = 0; cntPressureValue < varPressureSize; cntPressureValue++) {
            valPressureValue.write(payload[msgOffset + cntPressureValue]);
        }
        response.put("PRESSURE_VALUE", valPressureValue.toByteArray());
        msgOffset += varPressureSize;

        // Process 'Shutoff Duration'
        response.put("SHUTOFF_DURATION", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'System Error Status'
        List<String> responseSystemErrorStatus = new ArrayList<String>();
        int lenSystemErrorStatus = 1;
        for (int cntSystemErrorStatus = 0; cntSystemErrorStatus < lenSystemErrorStatus; cntSystemErrorStatus++) {
            if ((payload[msgOffset + (cntSystemErrorStatus / 8)] & (1 << cntSystemErrorStatus % 8)) == 0) {
                continue;
            }
            responseSystemErrorStatus.add(constantIrrigationSystemStatusReportSystemErrorStatus.get(cntSystemErrorStatus));
        }
        response.put("SYSTEM_ERROR_STATUS", responseSystemErrorStatus);
        msgOffset += 1;

        // Process 'Properties3'
        response.put("MASTER_VALVE", Boolean.valueOf((payload[msgOffset] & 0x01) != 0));
        msgOffset += 1;

        // Process 'Valve ID'
        response.put("VALVE_ID", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the IRRIGATION_SYSTEM_CONFIG_SET command.
     * <p>
     * Irrigation System Config Set
     *
     * @param masterValveDelay {@link Integer}
     * @param highPressureThresholdValue {@link byte[]}
     * @param lowPressureThresholdValue {@link byte[]}
     * @param sensorPolarity {@link List<String>}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>RAIN_SENSOR_POLARITY
     *            <li>MOISTURE_SENSOR_POLARITY
     *            <li>VALID
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getIrrigationSystemConfigSet(Integer masterValveDelay, byte[] highPressureThresholdValue,
            byte[] lowPressureThresholdValue, List<String> sensorPolarity) {
        logger.debug("Creating command message IRRIGATION_SYSTEM_CONFIG_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(IRRIGATION_SYSTEM_CONFIG_SET);

        // Process 'Master Valve Delay'
        outputData.write(masterValveDelay);

        // Process 'Properties1'
        // High Pressure Threshold Size is used by 'High Pressure Threshold Value'
        int highPressureThresholdSize = highPressureThresholdValue.length;
        int valProperties1 = 0;
        valProperties1 |= 0;
        valProperties1 |= ((1 << 3) & 0x18);
        valProperties1 |= ((1 << 5) & 0xE0);
        outputData.write(valProperties1);

        // Process 'High Pressure Threshold Value'
        if (highPressureThresholdValue != null) {
            try {
                outputData.write(highPressureThresholdValue);
            } catch (IOException e) {
            }
        }

        // Process 'Properties2'
        // Low Pressure Threshold Size is used by 'Low Pressure Threshold Value'
        int lowPressureThresholdSize = lowPressureThresholdValue.length;
        int valProperties2 = 0;
        valProperties2 |= 0;
        valProperties2 |= ((1 << 3) & 0x18);
        valProperties2 |= ((1 << 5) & 0xE0);
        outputData.write(valProperties2);

        // Process 'Low Pressure Threshold Value'
        if (lowPressureThresholdValue != null) {
            try {
                outputData.write(lowPressureThresholdValue);
            } catch (IOException e) {
            }
        }

        // Process 'Sensor Polarity'
        int valSensorPolarity = 0;
        for (String value : sensorPolarity) {
            boolean foundSensorPolarity = false;
            for (Integer entry : constantIrrigationSystemConfigSetSensorPolarity.keySet()) {
                if (constantIrrigationSystemConfigSetSensorPolarity.get(entry).equals(value)) {
                    foundSensorPolarity = true;
                    valSensorPolarity += entry;
                    break;
                }
            }
            if (!foundSensorPolarity) {
                throw new IllegalArgumentException("Unknown constant value '" + sensorPolarity + "' for sensorPolarity");
            }
        }
        outputData.write(valSensorPolarity);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the IRRIGATION_SYSTEM_CONFIG_SET command.
     * <p>
     * Irrigation System Config Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>MASTER_VALVE_DELAY {@link Integer}
     * <li>HIGH_PRESSURE_THRESHOLD_VALUE {@link byte[]}
     * <li>LOW_PRESSURE_THRESHOLD_VALUE {@link byte[]}
     * <li>SENSOR_POLARITY {@link List}<{@link String}>
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>RAIN_SENSOR_POLARITY
     * <li>MOISTURE_SENSOR_POLARITY
     * <li>VALID
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleIrrigationSystemConfigSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Master Valve Delay'
        response.put("MASTER_VALVE_DELAY", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Properties1'
        // High Pressure Threshold Size is used by 'High Pressure Threshold Value'
        int varHighPressureThresholdSize = payload[msgOffset] & 0x07;
        response.put("HIGH_PRESSURE_THRESHOLD_SCALE", Integer.valueOf(payload[msgOffset] & 0x18 >> 3));
        response.put("HIGH_PRESSURE_THRESHOLD_PRECISION", Integer.valueOf(payload[msgOffset] & 0xE0 >> 5));
        msgOffset += 1;

        // Process 'High Pressure Threshold Value'
        ByteArrayOutputStream valHighPressureThresholdValue = new ByteArrayOutputStream();
        for (int cntHighPressureThresholdValue = 0; cntHighPressureThresholdValue < varHighPressureThresholdSize; cntHighPressureThresholdValue++) {
            valHighPressureThresholdValue.write(payload[msgOffset + cntHighPressureThresholdValue]);
        }
        response.put("HIGH_PRESSURE_THRESHOLD_VALUE", valHighPressureThresholdValue.toByteArray());
        msgOffset += varHighPressureThresholdSize;

        // Process 'Properties2'
        // Low Pressure Threshold Size is used by 'Low Pressure Threshold Value'
        int varLowPressureThresholdSize = payload[msgOffset] & 0x07;
        response.put("LOW_PRESSURE_THRESHOLD_SCALE", Integer.valueOf(payload[msgOffset] & 0x18 >> 3));
        response.put("LOW_PRESSURE_THRESHOLD_PRECISION", Integer.valueOf(payload[msgOffset] & 0xE0 >> 5));
        msgOffset += 1;

        // Process 'Low Pressure Threshold Value'
        ByteArrayOutputStream valLowPressureThresholdValue = new ByteArrayOutputStream();
        for (int cntLowPressureThresholdValue = 0; cntLowPressureThresholdValue < varLowPressureThresholdSize; cntLowPressureThresholdValue++) {
            valLowPressureThresholdValue.write(payload[msgOffset + cntLowPressureThresholdValue]);
        }
        response.put("LOW_PRESSURE_THRESHOLD_VALUE", valLowPressureThresholdValue.toByteArray());
        msgOffset += varLowPressureThresholdSize;

        // Process 'Sensor Polarity'
        List<String> responseSensorPolarity = new ArrayList<String>();
        int lenSensorPolarity = 1;
        for (int cntSensorPolarity = 0; cntSensorPolarity < lenSensorPolarity; cntSensorPolarity++) {
            if ((payload[msgOffset + (cntSensorPolarity / 8)] & (1 << cntSensorPolarity % 8)) == 0) {
                continue;
            }
            responseSensorPolarity.add(constantIrrigationSystemConfigSetSensorPolarity.get(cntSensorPolarity));
        }
        response.put("SENSOR_POLARITY", responseSensorPolarity);
        msgOffset += 1;

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the IRRIGATION_SYSTEM_CONFIG_GET command.
     * <p>
     * Irrigation System Config Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getIrrigationSystemConfigGet() {
        logger.debug("Creating command message IRRIGATION_SYSTEM_CONFIG_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(IRRIGATION_SYSTEM_CONFIG_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the IRRIGATION_SYSTEM_CONFIG_GET command.
     * <p>
     * Irrigation System Config Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleIrrigationSystemConfigGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the IRRIGATION_SYSTEM_CONFIG_REPORT command.
     * <p>
     * Irrigation System Config Report
     *
     * @param masterValveDelay {@link Integer}
     * @param highPressureThresholdValue {@link byte[]}
     * @param lowPressureThresholdValue {@link byte[]}
     * @param sensorPolarity {@link List<String>}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>RAIN_SENSOR_POLARITY
     *            <li>MOISTURE_SENSOR_POLARITY
     *            <li>VALID
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getIrrigationSystemConfigReport(Integer masterValveDelay, byte[] highPressureThresholdValue,
            byte[] lowPressureThresholdValue, List<String> sensorPolarity) {
        logger.debug("Creating command message IRRIGATION_SYSTEM_CONFIG_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(IRRIGATION_SYSTEM_CONFIG_REPORT);

        // Process 'Master Valve Delay'
        outputData.write(masterValveDelay);

        // Process 'Properties1'
        // High Pressure Threshold Size is used by 'High Pressure Threshold Value'
        int highPressureThresholdSize = highPressureThresholdValue.length;
        int valProperties1 = 0;
        valProperties1 |= 0;
        valProperties1 |= ((1 << 3) & 0x18);
        valProperties1 |= ((1 << 5) & 0xE0);
        outputData.write(valProperties1);

        // Process 'High Pressure Threshold Value'
        if (highPressureThresholdValue != null) {
            try {
                outputData.write(highPressureThresholdValue);
            } catch (IOException e) {
            }
        }

        // Process 'Properties2'
        // Low Pressure Threshold Size is used by 'Low Pressure Threshold Value'
        int lowPressureThresholdSize = lowPressureThresholdValue.length;
        int valProperties2 = 0;
        valProperties2 |= 0;
        valProperties2 |= ((1 << 3) & 0x18);
        valProperties2 |= ((1 << 5) & 0xE0);
        outputData.write(valProperties2);

        // Process 'Low Pressure Threshold Value'
        if (lowPressureThresholdValue != null) {
            try {
                outputData.write(lowPressureThresholdValue);
            } catch (IOException e) {
            }
        }

        // Process 'Sensor Polarity'
        int valSensorPolarity = 0;
        for (String value : sensorPolarity) {
            boolean foundSensorPolarity = false;
            for (Integer entry : constantIrrigationSystemConfigReportSensorPolarity.keySet()) {
                if (constantIrrigationSystemConfigReportSensorPolarity.get(entry).equals(value)) {
                    foundSensorPolarity = true;
                    valSensorPolarity += entry;
                    break;
                }
            }
            if (!foundSensorPolarity) {
                throw new IllegalArgumentException("Unknown constant value '" + sensorPolarity + "' for sensorPolarity");
            }
        }
        outputData.write(valSensorPolarity);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the IRRIGATION_SYSTEM_CONFIG_REPORT command.
     * <p>
     * Irrigation System Config Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>MASTER_VALVE_DELAY {@link Integer}
     * <li>HIGH_PRESSURE_THRESHOLD_VALUE {@link byte[]}
     * <li>LOW_PRESSURE_THRESHOLD_VALUE {@link byte[]}
     * <li>SENSOR_POLARITY {@link List}<{@link String}>
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>RAIN_SENSOR_POLARITY
     * <li>MOISTURE_SENSOR_POLARITY
     * <li>VALID
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleIrrigationSystemConfigReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Master Valve Delay'
        response.put("MASTER_VALVE_DELAY", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Properties1'
        // High Pressure Threshold Size is used by 'High Pressure Threshold Value'
        int varHighPressureThresholdSize = payload[msgOffset] & 0x07;
        response.put("HIGH_PRESSURE_THRESHOLD_SCALE", Integer.valueOf(payload[msgOffset] & 0x18 >> 3));
        response.put("HIGH_PRESSURE_THRESHOLD_PRECISION", Integer.valueOf(payload[msgOffset] & 0xE0 >> 5));
        msgOffset += 1;

        // Process 'High Pressure Threshold Value'
        ByteArrayOutputStream valHighPressureThresholdValue = new ByteArrayOutputStream();
        for (int cntHighPressureThresholdValue = 0; cntHighPressureThresholdValue < varHighPressureThresholdSize; cntHighPressureThresholdValue++) {
            valHighPressureThresholdValue.write(payload[msgOffset + cntHighPressureThresholdValue]);
        }
        response.put("HIGH_PRESSURE_THRESHOLD_VALUE", valHighPressureThresholdValue.toByteArray());
        msgOffset += varHighPressureThresholdSize;

        // Process 'Properties2'
        // Low Pressure Threshold Size is used by 'Low Pressure Threshold Value'
        int varLowPressureThresholdSize = payload[msgOffset] & 0x07;
        response.put("LOW_PRESSURE_THRESHOLD_SCALE", Integer.valueOf(payload[msgOffset] & 0x18 >> 3));
        response.put("LOW_PRESSURE_THRESHOLD_PRECISION", Integer.valueOf(payload[msgOffset] & 0xE0 >> 5));
        msgOffset += 1;

        // Process 'Low Pressure Threshold Value'
        ByteArrayOutputStream valLowPressureThresholdValue = new ByteArrayOutputStream();
        for (int cntLowPressureThresholdValue = 0; cntLowPressureThresholdValue < varLowPressureThresholdSize; cntLowPressureThresholdValue++) {
            valLowPressureThresholdValue.write(payload[msgOffset + cntLowPressureThresholdValue]);
        }
        response.put("LOW_PRESSURE_THRESHOLD_VALUE", valLowPressureThresholdValue.toByteArray());
        msgOffset += varLowPressureThresholdSize;

        // Process 'Sensor Polarity'
        List<String> responseSensorPolarity = new ArrayList<String>();
        int lenSensorPolarity = 1;
        for (int cntSensorPolarity = 0; cntSensorPolarity < lenSensorPolarity; cntSensorPolarity++) {
            if ((payload[msgOffset + (cntSensorPolarity / 8)] & (1 << cntSensorPolarity % 8)) == 0) {
                continue;
            }
            responseSensorPolarity.add(constantIrrigationSystemConfigReportSensorPolarity.get(cntSensorPolarity));
        }
        response.put("SENSOR_POLARITY", responseSensorPolarity);
        msgOffset += 1;

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the IRRIGATION_VALVE_INFO_GET command.
     * <p>
     * Irrigation Valve Info Get
     *
     * @param masterValve {@link Boolean}
     * @param valveId {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getIrrigationValveInfoGet(Boolean masterValve, Integer valveId) {
        logger.debug("Creating command message IRRIGATION_VALVE_INFO_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(IRRIGATION_VALVE_INFO_GET);

        // Process 'Properties1'
        outputData.write(masterValve ? 0x01 : 0);

        // Process 'Valve ID'
        outputData.write(valveId);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the IRRIGATION_VALVE_INFO_GET command.
     * <p>
     * Irrigation Valve Info Get
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>MASTER_VALVE {@link Boolean}
     * <li>VALVE_ID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleIrrigationValveInfoGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("MASTER_VALVE", Boolean.valueOf((payload[2] & 0x01) != 0));

        // Process 'Valve ID'
        response.put("VALVE_ID", Integer.valueOf(payload[3]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the IRRIGATION_VALVE_INFO_REPORT command.
     * <p>
     * Irrigation Valve Info Report
     *
     * @param master {@link Boolean}
     * @param connected {@link Boolean}
     * @param valveId {@link Integer}
     * @param nominalCurrent {@link Integer}
     * @param valveErrorStatus {@link List<String>}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>SHORT_CIRCUIT
     *            <li>CURRENT_HIGH_THRESHOLD
     *            <li>CURRENT_LOW_THRESHOLD
     *            <li>MAXIMUM_FLOW
     *            <li>FLOW_HIGH_THRESHOLD
     *            <li>FLOW_LOW_THRESHOLD
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getIrrigationValveInfoReport(Boolean master, Boolean connected, Integer valveId,
            Integer nominalCurrent, List<String> valveErrorStatus) {
        logger.debug("Creating command message IRRIGATION_VALVE_INFO_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(IRRIGATION_VALVE_INFO_REPORT);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= master ? 0x01 : 0;
        valProperties1 |= connected ? 0x02 : 0;
        outputData.write(valProperties1);

        // Process 'Valve ID'
        outputData.write(valveId);

        // Process 'Nominal Current'
        outputData.write(nominalCurrent);

        // Process 'Valve Error Status'
        int valValveErrorStatus = 0;
        for (String value : valveErrorStatus) {
            boolean foundValveErrorStatus = false;
            for (Integer entry : constantIrrigationValveInfoReportValveErrorStatus.keySet()) {
                if (constantIrrigationValveInfoReportValveErrorStatus.get(entry).equals(value)) {
                    foundValveErrorStatus = true;
                    valValveErrorStatus += entry;
                    break;
                }
            }
            if (!foundValveErrorStatus) {
                throw new IllegalArgumentException("Unknown constant value '" + valveErrorStatus + "' for valveErrorStatus");
            }
        }
        outputData.write(valValveErrorStatus);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the IRRIGATION_VALVE_INFO_REPORT command.
     * <p>
     * Irrigation Valve Info Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>MASTER {@link Boolean}
     * <li>CONNECTED {@link Boolean}
     * <li>VALVE_ID {@link Integer}
     * <li>NOMINAL_CURRENT {@link Integer}
     * <li>VALVE_ERROR_STATUS {@link List}<{@link String}>
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>SHORT_CIRCUIT
     * <li>CURRENT_HIGH_THRESHOLD
     * <li>CURRENT_LOW_THRESHOLD
     * <li>MAXIMUM_FLOW
     * <li>FLOW_HIGH_THRESHOLD
     * <li>FLOW_LOW_THRESHOLD
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleIrrigationValveInfoReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("MASTER", Boolean.valueOf((payload[2] & 0x01) != 0));
        response.put("CONNECTED", Boolean.valueOf((payload[2] & 0x02) != 0));

        // Process 'Valve ID'
        response.put("VALVE_ID", Integer.valueOf(payload[3]));

        // Process 'Nominal Current'
        response.put("NOMINAL_CURRENT", Integer.valueOf(payload[4]));

        // Process 'Valve Error Status'
        List<String> responseValveErrorStatus = new ArrayList<String>();
        int lenValveErrorStatus = 1;
        for (int cntValveErrorStatus = 0; cntValveErrorStatus < lenValveErrorStatus; cntValveErrorStatus++) {
            if ((payload[5 + (cntValveErrorStatus / 8)] & (1 << cntValveErrorStatus % 8)) == 0) {
                continue;
            }
            responseValveErrorStatus.add(constantIrrigationValveInfoReportValveErrorStatus.get(cntValveErrorStatus));
        }
        response.put("VALVE_ERROR_STATUS", responseValveErrorStatus);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the IRRIGATION_VALVE_CONFIG_SET command.
     * <p>
     * Irrigation Valve Config Set
     *
     * @param masterValve {@link Boolean}
     * @param valveId {@link Integer}
     * @param nominalCurrentHighThreshold {@link Integer}
     * @param nominalCurrentLowThreshold {@link Integer}
     * @param maximumFlowValue {@link byte[]}
     * @param flowHighThresholdValue {@link byte[]}
     * @param flowLowThresholdValue {@link byte[]}
     * @param sensorUsage {@link List<String>}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>USE_RAIN_SENSOR
     *            <li>USE_MOISTURE_SENSOR
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getIrrigationValveConfigSet(Boolean masterValve, Integer valveId,
            Integer nominalCurrentHighThreshold, Integer nominalCurrentLowThreshold, byte[] maximumFlowValue,
            byte[] flowHighThresholdValue, byte[] flowLowThresholdValue, List<String> sensorUsage) {
        logger.debug("Creating command message IRRIGATION_VALVE_CONFIG_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(IRRIGATION_VALVE_CONFIG_SET);

        // Process 'Properties1'
        outputData.write(masterValve ? 0x01 : 0);

        // Process 'Valve ID'
        outputData.write(valveId);

        // Process 'Nominal Current High Threshold'
        outputData.write(nominalCurrentHighThreshold);

        // Process 'Nominal Current Low Threshold'
        outputData.write(nominalCurrentLowThreshold);

        // Process 'Properties2'
        // Maximum Flow Size is used by 'Maximum Flow Value'
        int maximumFlowSize = maximumFlowValue.length;
        int valProperties2 = 0;
        valProperties2 |= 0;
        valProperties2 |= ((1 << 3) & 0x18);
        valProperties2 |= ((1 << 5) & 0xE0);
        outputData.write(valProperties2);

        // Process 'Maximum Flow Value'
        if (maximumFlowValue != null) {
            try {
                outputData.write(maximumFlowValue);
            } catch (IOException e) {
            }
        }

        // Process 'Properties3'
        // Flow High Threshold Size is used by 'Flow High Threshold Value'
        int flowHighThresholdSize = flowHighThresholdValue.length;
        int valProperties3 = 0;
        valProperties3 |= 0;
        valProperties3 |= ((1 << 3) & 0x18);
        valProperties3 |= ((1 << 5) & 0xE0);
        outputData.write(valProperties3);

        // Process 'Flow High Threshold Value'
        if (flowHighThresholdValue != null) {
            try {
                outputData.write(flowHighThresholdValue);
            } catch (IOException e) {
            }
        }

        // Process 'Properties4'
        // Flow Low Threshold Size is used by 'Flow Low Threshold Value'
        int flowLowThresholdSize = flowLowThresholdValue.length;
        int valProperties4 = 0;
        valProperties4 |= 0;
        valProperties4 |= ((1 << 3) & 0x18);
        valProperties4 |= ((1 << 5) & 0xE0);
        outputData.write(valProperties4);

        // Process 'Flow Low Threshold Value'
        if (flowLowThresholdValue != null) {
            try {
                outputData.write(flowLowThresholdValue);
            } catch (IOException e) {
            }
        }

        // Process 'Sensor Usage'
        int valSensorUsage = 0;
        for (String value : sensorUsage) {
            boolean foundSensorUsage = false;
            for (Integer entry : constantIrrigationValveConfigSetSensorUsage.keySet()) {
                if (constantIrrigationValveConfigSetSensorUsage.get(entry).equals(value)) {
                    foundSensorUsage = true;
                    valSensorUsage += entry;
                    break;
                }
            }
            if (!foundSensorUsage) {
                throw new IllegalArgumentException("Unknown constant value '" + sensorUsage + "' for sensorUsage");
            }
        }
        outputData.write(valSensorUsage);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the IRRIGATION_VALVE_CONFIG_SET command.
     * <p>
     * Irrigation Valve Config Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>MASTER_VALVE {@link Boolean}
     * <li>VALVE_ID {@link Integer}
     * <li>NOMINAL_CURRENT_HIGH_THRESHOLD {@link Integer}
     * <li>NOMINAL_CURRENT_LOW_THRESHOLD {@link Integer}
     * <li>MAXIMUM_FLOW_VALUE {@link byte[]}
     * <li>FLOW_HIGH_THRESHOLD_VALUE {@link byte[]}
     * <li>FLOW_LOW_THRESHOLD_VALUE {@link byte[]}
     * <li>SENSOR_USAGE {@link List}<{@link String}>
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>USE_RAIN_SENSOR
     * <li>USE_MOISTURE_SENSOR
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleIrrigationValveConfigSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Properties1'
        response.put("MASTER_VALVE", Boolean.valueOf((payload[msgOffset] & 0x01) != 0));
        msgOffset += 1;

        // Process 'Valve ID'
        response.put("VALVE_ID", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Nominal Current High Threshold'
        response.put("NOMINAL_CURRENT_HIGH_THRESHOLD", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Nominal Current Low Threshold'
        response.put("NOMINAL_CURRENT_LOW_THRESHOLD", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Properties2'
        // Maximum Flow Size is used by 'Maximum Flow Value'
        int varMaximumFlowSize = payload[msgOffset] & 0x07;
        response.put("MAXIMUM_FLOW_SCALE", Integer.valueOf(payload[msgOffset] & 0x18 >> 3));
        response.put("MAXIMUM_FLOW_PRECISION", Integer.valueOf(payload[msgOffset] & 0xE0 >> 5));
        msgOffset += 1;

        // Process 'Maximum Flow Value'
        ByteArrayOutputStream valMaximumFlowValue = new ByteArrayOutputStream();
        for (int cntMaximumFlowValue = 0; cntMaximumFlowValue < varMaximumFlowSize; cntMaximumFlowValue++) {
            valMaximumFlowValue.write(payload[msgOffset + cntMaximumFlowValue]);
        }
        response.put("MAXIMUM_FLOW_VALUE", valMaximumFlowValue.toByteArray());
        msgOffset += varMaximumFlowSize;

        // Process 'Properties3'
        // Flow High Threshold Size is used by 'Flow High Threshold Value'
        int varFlowHighThresholdSize = payload[msgOffset] & 0x07;
        response.put("FLOW_HIGH_THRESHOLD_SCALE", Integer.valueOf(payload[msgOffset] & 0x18 >> 3));
        response.put("FLOW_HIGH_THRESHOLD_PRECISION", Integer.valueOf(payload[msgOffset] & 0xE0 >> 5));
        msgOffset += 1;

        // Process 'Flow High Threshold Value'
        ByteArrayOutputStream valFlowHighThresholdValue = new ByteArrayOutputStream();
        for (int cntFlowHighThresholdValue = 0; cntFlowHighThresholdValue < varFlowHighThresholdSize; cntFlowHighThresholdValue++) {
            valFlowHighThresholdValue.write(payload[msgOffset + cntFlowHighThresholdValue]);
        }
        response.put("FLOW_HIGH_THRESHOLD_VALUE", valFlowHighThresholdValue.toByteArray());
        msgOffset += varFlowHighThresholdSize;

        // Process 'Properties4'
        // Flow Low Threshold Size is used by 'Flow Low Threshold Value'
        int varFlowLowThresholdSize = payload[msgOffset] & 0x07;
        response.put("FLOW_LOW_THRESHOLD_SCALE", Integer.valueOf(payload[msgOffset] & 0x18 >> 3));
        response.put("FLOW_LOW_THRESHOLD_PRECISION", Integer.valueOf(payload[msgOffset] & 0xE0 >> 5));
        msgOffset += 1;

        // Process 'Flow Low Threshold Value'
        ByteArrayOutputStream valFlowLowThresholdValue = new ByteArrayOutputStream();
        for (int cntFlowLowThresholdValue = 0; cntFlowLowThresholdValue < varFlowLowThresholdSize; cntFlowLowThresholdValue++) {
            valFlowLowThresholdValue.write(payload[msgOffset + cntFlowLowThresholdValue]);
        }
        response.put("FLOW_LOW_THRESHOLD_VALUE", valFlowLowThresholdValue.toByteArray());
        msgOffset += varFlowLowThresholdSize;

        // Process 'Sensor Usage'
        List<String> responseSensorUsage = new ArrayList<String>();
        int lenSensorUsage = 1;
        for (int cntSensorUsage = 0; cntSensorUsage < lenSensorUsage; cntSensorUsage++) {
            if ((payload[msgOffset + (cntSensorUsage / 8)] & (1 << cntSensorUsage % 8)) == 0) {
                continue;
            }
            responseSensorUsage.add(constantIrrigationValveConfigSetSensorUsage.get(cntSensorUsage));
        }
        response.put("SENSOR_USAGE", responseSensorUsage);
        msgOffset += 1;

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the IRRIGATION_VALVE_CONFIG_GET command.
     * <p>
     * Irrigation Valve Config Get
     *
     * @param masterValve {@link Boolean}
     * @param valveId {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getIrrigationValveConfigGet(Boolean masterValve, Integer valveId) {
        logger.debug("Creating command message IRRIGATION_VALVE_CONFIG_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(IRRIGATION_VALVE_CONFIG_GET);

        // Process 'Properties1'
        outputData.write(masterValve ? 0x01 : 0);

        // Process 'Valve ID'
        outputData.write(valveId);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the IRRIGATION_VALVE_CONFIG_GET command.
     * <p>
     * Irrigation Valve Config Get
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>MASTER_VALVE {@link Boolean}
     * <li>VALVE_ID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleIrrigationValveConfigGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("MASTER_VALVE", Boolean.valueOf((payload[2] & 0x01) != 0));

        // Process 'Valve ID'
        response.put("VALVE_ID", Integer.valueOf(payload[3]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the IRRIGATION_VALVE_CONFIG_REPORT command.
     * <p>
     * Irrigation Valve Config Report
     *
     * @param masterValve {@link Boolean}
     * @param valveId {@link Integer}
     * @param nominalCurrentHighThreshold {@link Integer}
     * @param nominalCurrentLowThreshold {@link Integer}
     * @param maximumFlowValue {@link byte[]}
     * @param flowHighThresholdValue {@link byte[]}
     * @param flowLowThresholdValue {@link byte[]}
     * @param sensorUsage {@link List<String>}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>USE_RAIN_SENSOR
     *            <li>USE_MOISTURE_SENSOR
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getIrrigationValveConfigReport(Boolean masterValve, Integer valveId,
            Integer nominalCurrentHighThreshold, Integer nominalCurrentLowThreshold, byte[] maximumFlowValue,
            byte[] flowHighThresholdValue, byte[] flowLowThresholdValue, List<String> sensorUsage) {
        logger.debug("Creating command message IRRIGATION_VALVE_CONFIG_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(IRRIGATION_VALVE_CONFIG_REPORT);

        // Process 'Properties1'
        outputData.write(masterValve ? 0x01 : 0);

        // Process 'Valve ID'
        outputData.write(valveId);

        // Process 'Nominal Current High Threshold'
        outputData.write(nominalCurrentHighThreshold);

        // Process 'Nominal Current Low Threshold'
        outputData.write(nominalCurrentLowThreshold);

        // Process 'Properties2'
        // Maximum Flow Size is used by 'Maximum Flow Value'
        int maximumFlowSize = maximumFlowValue.length;
        int valProperties2 = 0;
        valProperties2 |= 0;
        valProperties2 |= ((1 << 3) & 0x18);
        valProperties2 |= ((1 << 5) & 0xE0);
        outputData.write(valProperties2);

        // Process 'Maximum Flow Value'
        if (maximumFlowValue != null) {
            try {
                outputData.write(maximumFlowValue);
            } catch (IOException e) {
            }
        }

        // Process 'Properties3'
        // Flow High Threshold Size is used by 'Flow High Threshold Value'
        int flowHighThresholdSize = flowHighThresholdValue.length;
        int valProperties3 = 0;
        valProperties3 |= 0;
        valProperties3 |= ((1 << 3) & 0x18);
        valProperties3 |= ((1 << 5) & 0xE0);
        outputData.write(valProperties3);

        // Process 'Flow High Threshold Value'
        if (flowHighThresholdValue != null) {
            try {
                outputData.write(flowHighThresholdValue);
            } catch (IOException e) {
            }
        }

        // Process 'Properties4'
        // Flow Low Threshold Size is used by 'Flow Low Threshold Value'
        int flowLowThresholdSize = flowLowThresholdValue.length;
        int valProperties4 = 0;
        valProperties4 |= 0;
        valProperties4 |= ((1 << 3) & 0x18);
        valProperties4 |= ((1 << 5) & 0xE0);
        outputData.write(valProperties4);

        // Process 'Flow Low Threshold Value'
        if (flowLowThresholdValue != null) {
            try {
                outputData.write(flowLowThresholdValue);
            } catch (IOException e) {
            }
        }

        // Process 'Sensor Usage'
        int valSensorUsage = 0;
        for (String value : sensorUsage) {
            boolean foundSensorUsage = false;
            for (Integer entry : constantIrrigationValveConfigReportSensorUsage.keySet()) {
                if (constantIrrigationValveConfigReportSensorUsage.get(entry).equals(value)) {
                    foundSensorUsage = true;
                    valSensorUsage += entry;
                    break;
                }
            }
            if (!foundSensorUsage) {
                throw new IllegalArgumentException("Unknown constant value '" + sensorUsage + "' for sensorUsage");
            }
        }
        outputData.write(valSensorUsage);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the IRRIGATION_VALVE_CONFIG_REPORT command.
     * <p>
     * Irrigation Valve Config Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>MASTER_VALVE {@link Boolean}
     * <li>VALVE_ID {@link Integer}
     * <li>NOMINAL_CURRENT_HIGH_THRESHOLD {@link Integer}
     * <li>NOMINAL_CURRENT_LOW_THRESHOLD {@link Integer}
     * <li>MAXIMUM_FLOW_VALUE {@link byte[]}
     * <li>FLOW_HIGH_THRESHOLD_VALUE {@link byte[]}
     * <li>FLOW_LOW_THRESHOLD_VALUE {@link byte[]}
     * <li>SENSOR_USAGE {@link List}<{@link String}>
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>USE_RAIN_SENSOR
     * <li>USE_MOISTURE_SENSOR
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleIrrigationValveConfigReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Properties1'
        response.put("MASTER_VALVE", Boolean.valueOf((payload[msgOffset] & 0x01) != 0));
        msgOffset += 1;

        // Process 'Valve ID'
        response.put("VALVE_ID", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Nominal Current High Threshold'
        response.put("NOMINAL_CURRENT_HIGH_THRESHOLD", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Nominal Current Low Threshold'
        response.put("NOMINAL_CURRENT_LOW_THRESHOLD", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Properties2'
        // Maximum Flow Size is used by 'Maximum Flow Value'
        int varMaximumFlowSize = payload[msgOffset] & 0x07;
        response.put("MAXIMUM_FLOW_SCALE", Integer.valueOf(payload[msgOffset] & 0x18 >> 3));
        response.put("MAXIMUM_FLOW_PRECISION", Integer.valueOf(payload[msgOffset] & 0xE0 >> 5));
        msgOffset += 1;

        // Process 'Maximum Flow Value'
        ByteArrayOutputStream valMaximumFlowValue = new ByteArrayOutputStream();
        for (int cntMaximumFlowValue = 0; cntMaximumFlowValue < varMaximumFlowSize; cntMaximumFlowValue++) {
            valMaximumFlowValue.write(payload[msgOffset + cntMaximumFlowValue]);
        }
        response.put("MAXIMUM_FLOW_VALUE", valMaximumFlowValue.toByteArray());
        msgOffset += varMaximumFlowSize;

        // Process 'Properties3'
        // Flow High Threshold Size is used by 'Flow High Threshold Value'
        int varFlowHighThresholdSize = payload[msgOffset] & 0x07;
        response.put("FLOW_HIGH_THRESHOLD_SCALE", Integer.valueOf(payload[msgOffset] & 0x18 >> 3));
        response.put("FLOW_HIGH_THRESHOLD_PRECISION", Integer.valueOf(payload[msgOffset] & 0xE0 >> 5));
        msgOffset += 1;

        // Process 'Flow High Threshold Value'
        ByteArrayOutputStream valFlowHighThresholdValue = new ByteArrayOutputStream();
        for (int cntFlowHighThresholdValue = 0; cntFlowHighThresholdValue < varFlowHighThresholdSize; cntFlowHighThresholdValue++) {
            valFlowHighThresholdValue.write(payload[msgOffset + cntFlowHighThresholdValue]);
        }
        response.put("FLOW_HIGH_THRESHOLD_VALUE", valFlowHighThresholdValue.toByteArray());
        msgOffset += varFlowHighThresholdSize;

        // Process 'Properties4'
        // Flow Low Threshold Size is used by 'Flow Low Threshold Value'
        int varFlowLowThresholdSize = payload[msgOffset] & 0x07;
        response.put("FLOW_LOW_THRESHOLD_SCALE", Integer.valueOf(payload[msgOffset] & 0x18 >> 3));
        response.put("FLOW_LOW_THRESHOLD_PRECISION", Integer.valueOf(payload[msgOffset] & 0xE0 >> 5));
        msgOffset += 1;

        // Process 'Flow Low Threshold Value'
        ByteArrayOutputStream valFlowLowThresholdValue = new ByteArrayOutputStream();
        for (int cntFlowLowThresholdValue = 0; cntFlowLowThresholdValue < varFlowLowThresholdSize; cntFlowLowThresholdValue++) {
            valFlowLowThresholdValue.write(payload[msgOffset + cntFlowLowThresholdValue]);
        }
        response.put("FLOW_LOW_THRESHOLD_VALUE", valFlowLowThresholdValue.toByteArray());
        msgOffset += varFlowLowThresholdSize;

        // Process 'Sensor Usage'
        List<String> responseSensorUsage = new ArrayList<String>();
        int lenSensorUsage = 1;
        for (int cntSensorUsage = 0; cntSensorUsage < lenSensorUsage; cntSensorUsage++) {
            if ((payload[msgOffset + (cntSensorUsage / 8)] & (1 << cntSensorUsage % 8)) == 0) {
                continue;
            }
            responseSensorUsage.add(constantIrrigationValveConfigReportSensorUsage.get(cntSensorUsage));
        }
        response.put("SENSOR_USAGE", responseSensorUsage);
        msgOffset += 1;

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the IRRIGATION_VALVE_RUN command.
     * <p>
     * Irrigation Valve Run
     *
     * @param masterValve {@link Boolean}
     * @param valveId {@link Integer}
     * @param duration {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getIrrigationValveRun(Boolean masterValve, Integer valveId, Integer duration) {
        logger.debug("Creating command message IRRIGATION_VALVE_RUN version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(IRRIGATION_VALVE_RUN);

        // Process 'Properties1'
        outputData.write(masterValve ? 0x01 : 0);

        // Process 'Valve ID'
        outputData.write(valveId);

        // Process 'Duration'
        outputData.write((duration >> 8) & 0xff);
        outputData.write(duration & 0xff);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the IRRIGATION_VALVE_RUN command.
     * <p>
     * Irrigation Valve Run
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>MASTER_VALVE {@link Boolean}
     * <li>VALVE_ID {@link Integer}
     * <li>DURATION {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleIrrigationValveRun(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("MASTER_VALVE", Boolean.valueOf((payload[2] & 0x01) != 0));

        // Process 'Valve ID'
        response.put("VALVE_ID", Integer.valueOf(payload[3]));

        // Process 'Duration'
        response.put("DURATION", Integer.valueOf(((payload[4] & 0xff) << 8) + (payload[5] & 0xff)));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the IRRIGATION_VALVE_TABLE_SET command.
     * <p>
     * Irrigation Valve Table Set
     *
     * @param valveTableId {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getIrrigationValveTableSet(Integer valveTableId) {
        logger.debug("Creating command message IRRIGATION_VALVE_TABLE_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(IRRIGATION_VALVE_TABLE_SET);

        // Process 'Valve Table ID'
        outputData.write(valveTableId);

        // Process 'vg1'

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the IRRIGATION_VALVE_TABLE_SET command.
     * <p>
     * Irrigation Valve Table Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>VALVE_TABLE_ID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleIrrigationValveTableSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Valve Table ID'
        response.put("VALVE_TABLE_ID", Integer.valueOf(payload[2]));

        // Process 'vg1'

        // Create a list to hold the group vg1
        List<Map<String, Object>> variantList = new ArrayList<Map<String, Object>>();

        int offset = 3;
        while (offset < payload.length) {
            // Create a map to hold the members of this variant
            Map<String, Object> variant = new HashMap<String, Object>();

            // Process 'Valve ID'
            variant.put("VALVE_ID", Integer.valueOf(payload[3]));

            // Process 'Duration'
            variant.put("DURATION", Integer.valueOf(((payload[4] & 0xff) << 8) + (payload[5] & 0xff)));

        }

        // Add the variant list to the response
        response.put("VG1", variantList);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the IRRIGATION_VALVE_TABLE_GET command.
     * <p>
     * Irrigation Valve Table Get
     *
     * @param valveTableId {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getIrrigationValveTableGet(Integer valveTableId) {
        logger.debug("Creating command message IRRIGATION_VALVE_TABLE_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(IRRIGATION_VALVE_TABLE_GET);

        // Process 'Valve Table ID'
        outputData.write(valveTableId);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the IRRIGATION_VALVE_TABLE_GET command.
     * <p>
     * Irrigation Valve Table Get
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>VALVE_TABLE_ID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleIrrigationValveTableGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Valve Table ID'
        response.put("VALVE_TABLE_ID", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the IRRIGATION_VALVE_TABLE_REPORT command.
     * <p>
     * Irrigation Valve Table Report
     *
     * @param valveTableId {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getIrrigationValveTableReport(Integer valveTableId) {
        logger.debug("Creating command message IRRIGATION_VALVE_TABLE_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(IRRIGATION_VALVE_TABLE_REPORT);

        // Process 'Valve Table ID'
        outputData.write(valveTableId);

        // Process 'vg1'

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the IRRIGATION_VALVE_TABLE_REPORT command.
     * <p>
     * Irrigation Valve Table Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>VALVE_TABLE_ID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleIrrigationValveTableReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Valve Table ID'
        response.put("VALVE_TABLE_ID", Integer.valueOf(payload[2]));

        // Process 'vg1'

        // Create a list to hold the group vg1
        List<Map<String, Object>> variantList = new ArrayList<Map<String, Object>>();

        int offset = 3;
        while (offset < payload.length) {
            // Create a map to hold the members of this variant
            Map<String, Object> variant = new HashMap<String, Object>();

            // Process 'Valve ID'
            variant.put("VALVE_ID", Integer.valueOf(payload[3]));

            // Process 'Duration'
            variant.put("DURATION", Integer.valueOf(((payload[4] & 0xff) << 8) + (payload[5] & 0xff)));

        }

        // Add the variant list to the response
        response.put("VG1", variantList);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the IRRIGATION_VALVE_TABLE_RUN command.
     * <p>
     * Irrigation Valve Table Run
     *
     * @param valveTableId {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getIrrigationValveTableRun(byte[] valveTableId) {
        logger.debug("Creating command message IRRIGATION_VALVE_TABLE_RUN version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(IRRIGATION_VALVE_TABLE_RUN);

        // Process 'Valve Table ID'
        if (valveTableId != null) {
            try {
                outputData.write(valveTableId);
            } catch (IOException e) {
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the IRRIGATION_VALVE_TABLE_RUN command.
     * <p>
     * Irrigation Valve Table Run
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>VALVE_TABLE_ID {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleIrrigationValveTableRun(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Valve Table ID'
        ByteArrayOutputStream valValveTableId = new ByteArrayOutputStream();
        while (msgOffset < payload.length) {
            valValveTableId.write(payload[msgOffset]);
            msgOffset++;
        }
        response.put("VALVE_TABLE_ID", valValveTableId);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the IRRIGATION_SYSTEM_SHUTOFF command.
     * <p>
     * Irrigation System Shutoff
     *
     * @param duration {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getIrrigationSystemShutoff(Integer duration) {
        logger.debug("Creating command message IRRIGATION_SYSTEM_SHUTOFF version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(IRRIGATION_SYSTEM_SHUTOFF);

        // Process 'Duration'
        outputData.write(duration);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the IRRIGATION_SYSTEM_SHUTOFF command.
     * <p>
     * Irrigation System Shutoff
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>DURATION {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleIrrigationSystemShutoff(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Duration'
        response.put("DURATION", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }
}
