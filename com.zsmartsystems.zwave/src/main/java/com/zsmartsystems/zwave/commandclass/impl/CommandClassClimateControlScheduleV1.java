/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_CLIMATE_CONTROL_SCHEDULE</b> version <b>1</b>.
 * <p>
 * Command Class Climate Control Schedule
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x46.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassClimateControlScheduleV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassClimateControlScheduleV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_CLIMATE_CONTROL_SCHEDULE
     */
    public final static int COMMAND_CLASS_KEY = 0x46;

    /**
     * Schedule Set Command Constant
     */
    public final static int SCHEDULE_SET = 0x01;
    /**
     * Schedule Get Command Constant
     */
    public final static int SCHEDULE_GET = 0x02;
    /**
     * Schedule Report Command Constant
     */
    public final static int SCHEDULE_REPORT = 0x03;
    /**
     * Schedule Changed Get Command Constant
     */
    public final static int SCHEDULE_CHANGED_GET = 0x04;
    /**
     * Schedule Changed Report Command Constant
     */
    public final static int SCHEDULE_CHANGED_REPORT = 0x05;
    /**
     * Schedule Override Set Command Constant
     */
    public final static int SCHEDULE_OVERRIDE_SET = 0x06;
    /**
     * Schedule Override Get Command Constant
     */
    public final static int SCHEDULE_OVERRIDE_GET = 0x07;
    /**
     * Schedule Override Report Command Constant
     */
    public final static int SCHEDULE_OVERRIDE_REPORT = 0x08;

    /**
     * Map holding constants for ScheduleOverrideReportOverrideState
     */
    private static Map<Integer, String> constantScheduleOverrideReportOverrideState = new HashMap<Integer, String>();

    /**
     * Map holding constants for ScheduleOverrideSetOverrideState
     */
    private static Map<Integer, String> constantScheduleOverrideSetOverrideState = new HashMap<Integer, String>();

    static {
        // Constants for ScheduleOverrideReportOverrideState
        constantScheduleOverrideReportOverrideState.put(0x00, "NO_OVERRIDE");
        constantScheduleOverrideReportOverrideState.put(0x01, "TEMPORARY_OVERRIDE");
        constantScheduleOverrideReportOverrideState.put(0x02, "PERMANENT_OVERRIDE");

        // Constants for ScheduleOverrideSetOverrideState
        constantScheduleOverrideSetOverrideState.put(0x00, "NO_OVERRIDE");
        constantScheduleOverrideSetOverrideState.put(0x01, "TEMPORARY_OVERRIDE");
        constantScheduleOverrideSetOverrideState.put(0x02, "PERMANENT_OVERRIDE");
    }

    /**
     * Creates a new message with the SCHEDULE_SET command.
     * <p>
     * Schedule Set
     *
     * @param weekday {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getScheduleSet(Integer weekday) {
        logger.debug("Creating command message SCHEDULE_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SCHEDULE_SET);

        // Process 'Properties1'
        outputData.write(weekday & 0x07);

        // Process 'Switchpoint 0'

        // Process 'Switchpoint 1'

        // Process 'Switchpoint 2'

        // Process 'Switchpoint 3'

        // Process 'Switchpoint 4'

        // Process 'Switchpoint 5'

        // Process 'Switchpoint 6'

        // Process 'Switchpoint 7'

        // Process 'Switchpoint 8'

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SCHEDULE_SET command.
     * <p>
     * Schedule Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>WEEKDAY {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleScheduleSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("WEEKDAY", Integer.valueOf(payload[2] & 0x07));

        // Process 'Switchpoint 0'

        // Process 'Switchpoint 1'

        // Process 'Switchpoint 2'

        // Process 'Switchpoint 3'

        // Process 'Switchpoint 4'

        // Process 'Switchpoint 5'

        // Process 'Switchpoint 6'

        // Process 'Switchpoint 7'

        // Process 'Switchpoint 8'

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SCHEDULE_GET command.
     * <p>
     * Schedule Get
     *
     * @param weekday {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getScheduleGet(Integer weekday) {
        logger.debug("Creating command message SCHEDULE_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SCHEDULE_GET);

        // Process 'Properties1'
        outputData.write(weekday & 0x07);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SCHEDULE_GET command.
     * <p>
     * Schedule Get
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>WEEKDAY {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleScheduleGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("WEEKDAY", Integer.valueOf(payload[2] & 0x07));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SCHEDULE_REPORT command.
     * <p>
     * Schedule Report
     *
     * @param weekday {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getScheduleReport(Integer weekday) {
        logger.debug("Creating command message SCHEDULE_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SCHEDULE_REPORT);

        // Process 'Properties1'
        outputData.write(weekday & 0x07);

        // Process 'Switchpoint 0'

        // Process 'Switchpoint 1'

        // Process 'Switchpoint 2'

        // Process 'Switchpoint 3'

        // Process 'Switchpoint 4'

        // Process 'Switchpoint 5'

        // Process 'Switchpoint 6'

        // Process 'Switchpoint 7'

        // Process 'Switchpoint 8'

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SCHEDULE_REPORT command.
     * <p>
     * Schedule Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>WEEKDAY {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleScheduleReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("WEEKDAY", Integer.valueOf(payload[2] & 0x07));

        // Process 'Switchpoint 0'

        // Process 'Switchpoint 1'

        // Process 'Switchpoint 2'

        // Process 'Switchpoint 3'

        // Process 'Switchpoint 4'

        // Process 'Switchpoint 5'

        // Process 'Switchpoint 6'

        // Process 'Switchpoint 7'

        // Process 'Switchpoint 8'

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SCHEDULE_CHANGED_GET command.
     * <p>
     * Schedule Changed Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getScheduleChangedGet() {
        logger.debug("Creating command message SCHEDULE_CHANGED_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SCHEDULE_CHANGED_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SCHEDULE_CHANGED_GET command.
     * <p>
     * Schedule Changed Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleScheduleChangedGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SCHEDULE_CHANGED_REPORT command.
     * <p>
     * Schedule Changed Report
     *
     * @param changecounter {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getScheduleChangedReport(Integer changecounter) {
        logger.debug("Creating command message SCHEDULE_CHANGED_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SCHEDULE_CHANGED_REPORT);

        // Process 'ChangeCounter'
        outputData.write(changecounter);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SCHEDULE_CHANGED_REPORT command.
     * <p>
     * Schedule Changed Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>CHANGECOUNTER {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleScheduleChangedReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'ChangeCounter'
        response.put("CHANGECOUNTER", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SCHEDULE_OVERRIDE_SET command.
     * <p>
     * Schedule Override Set
     *
     * @param overrideType {@link Integer}
     * @param overrideState {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>NO_OVERRIDE
     *            <li>TEMPORARY_OVERRIDE
     *            <li>PERMANENT_OVERRIDE
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getScheduleOverrideSet(Integer overrideType, String overrideState) {
        logger.debug("Creating command message SCHEDULE_OVERRIDE_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SCHEDULE_OVERRIDE_SET);

        // Process 'Properties1'
        outputData.write(overrideType & 0x03);

        // Process 'Override State'
        boolean foundOverrideState = false;
        for (Integer entry : constantScheduleOverrideSetOverrideState.keySet()) {
            if (constantScheduleOverrideSetOverrideState.get(entry).equals(overrideState)) {
                outputData.write(entry);
                foundOverrideState = true;
                break;
            }
        }
        if (!foundOverrideState) {
            throw new IllegalArgumentException("Unknown constant value '" + overrideState + "' for overrideState");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SCHEDULE_OVERRIDE_SET command.
     * <p>
     * Schedule Override Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>OVERRIDE_TYPE {@link Integer}
     * <li>OVERRIDE_STATE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>NO_OVERRIDE
     * <li>TEMPORARY_OVERRIDE
     * <li>PERMANENT_OVERRIDE
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleScheduleOverrideSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("OVERRIDE_TYPE", Integer.valueOf(payload[2] & 0x03));

        // Process 'Override State'
        response.put("OVERRIDE_STATE", constantScheduleOverrideSetOverrideState.get(payload[3] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SCHEDULE_OVERRIDE_GET command.
     * <p>
     * Schedule Override Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getScheduleOverrideGet() {
        logger.debug("Creating command message SCHEDULE_OVERRIDE_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SCHEDULE_OVERRIDE_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SCHEDULE_OVERRIDE_GET command.
     * <p>
     * Schedule Override Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleScheduleOverrideGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SCHEDULE_OVERRIDE_REPORT command.
     * <p>
     * Schedule Override Report
     *
     * @param overrideType {@link Integer}
     * @param overrideState {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>NO_OVERRIDE
     *            <li>TEMPORARY_OVERRIDE
     *            <li>PERMANENT_OVERRIDE
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getScheduleOverrideReport(Integer overrideType, String overrideState) {
        logger.debug("Creating command message SCHEDULE_OVERRIDE_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SCHEDULE_OVERRIDE_REPORT);

        // Process 'Properties1'
        outputData.write(overrideType & 0x03);

        // Process 'Override State'
        boolean foundOverrideState = false;
        for (Integer entry : constantScheduleOverrideReportOverrideState.keySet()) {
            if (constantScheduleOverrideReportOverrideState.get(entry).equals(overrideState)) {
                outputData.write(entry);
                foundOverrideState = true;
                break;
            }
        }
        if (!foundOverrideState) {
            throw new IllegalArgumentException("Unknown constant value '" + overrideState + "' for overrideState");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SCHEDULE_OVERRIDE_REPORT command.
     * <p>
     * Schedule Override Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>OVERRIDE_TYPE {@link Integer}
     * <li>OVERRIDE_STATE {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>NO_OVERRIDE
     * <li>TEMPORARY_OVERRIDE
     * <li>PERMANENT_OVERRIDE
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleScheduleOverrideReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("OVERRIDE_TYPE", Integer.valueOf(payload[2] & 0x03));

        // Process 'Override State'
        response.put("OVERRIDE_STATE", constantScheduleOverrideReportOverrideState.get(payload[3] & 0xff));

        // Return the map of processed response data;
        return response;
    }
}
