/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_WINDOW_COVERING</b> version <b>1</b>.
 * <p>
 * Command Class Window Covering
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Command class key is 0x6A.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassWindowCoveringV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassWindowCoveringV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_WINDOW_COVERING
     */
    public final static int COMMAND_CLASS_KEY = 0x6A;

    /**
     * Window Covering Supported Get Command Constant
     */
    public final static int WINDOW_COVERING_SUPPORTED_GET = 0x01;
    /**
     * Window Covering Supported Report Command Constant
     */
    public final static int WINDOW_COVERING_SUPPORTED_REPORT = 0x02;
    /**
     * Window Covering Get Command Constant
     */
    public final static int WINDOW_COVERING_GET = 0x03;
    /**
     * Window Covering Report Command Constant
     */
    public final static int WINDOW_COVERING_REPORT = 0x04;
    /**
     * Window Covering Set Command Constant
     */
    public final static int WINDOW_COVERING_SET = 0x05;
    /**
     * Window Covering Start Level Change Command Constant
     */
    public final static int WINDOW_COVERING_START_LEVEL_CHANGE = 0x06;
    /**
     * Window Covering Stop Level Change Command Constant
     */
    public final static int WINDOW_COVERING_STOP_LEVEL_CHANGE = 0x07;

    /**
     * Map holding constants for WindowCoveringStopLevelChangeParameterId
     */
    private static Map<Integer, String> constantWindowCoveringStopLevelChangeParameterId = new HashMap<Integer, String>();

    /**
     * Map holding constants for WindowCoveringSetParameterId
     */
    private static Map<Integer, String> constantWindowCoveringSetParameterId = new HashMap<Integer, String>();

    /**
     * Map holding constants for WindowCoveringStartLevelChangeProperties1
     */
    private static Map<Integer, String> constantWindowCoveringStartLevelChangeProperties1 = new HashMap<Integer, String>();

    /**
     * Map holding constants for WindowCoveringStartLevelChangeParameterId
     */
    private static Map<Integer, String> constantWindowCoveringStartLevelChangeParameterId = new HashMap<Integer, String>();

    /**
     * Map holding constants for WindowCoveringReportParameterId
     */
    private static Map<Integer, String> constantWindowCoveringReportParameterId = new HashMap<Integer, String>();

    /**
     * Map holding constants for WindowCoveringGetParameterId
     */
    private static Map<Integer, String> constantWindowCoveringGetParameterId = new HashMap<Integer, String>();

    static {
        // Constants for WindowCoveringStopLevelChangeParameterId
        constantWindowCoveringStopLevelChangeParameterId.put(0x00, "OUT_LEFT_1");
        constantWindowCoveringStopLevelChangeParameterId.put(0x01, "OUT_LEFT_2");
        constantWindowCoveringStopLevelChangeParameterId.put(0x02, "OUT_RIGHT_1");
        constantWindowCoveringStopLevelChangeParameterId.put(0x03, "OUT_RIGHT_2");
        constantWindowCoveringStopLevelChangeParameterId.put(0x04, "IN_LEFT_1");
        constantWindowCoveringStopLevelChangeParameterId.put(0x05, "IN_LEFT_2");
        constantWindowCoveringStopLevelChangeParameterId.put(0x06, "IN_RIGHT_1");
        constantWindowCoveringStopLevelChangeParameterId.put(0x07, "IN_RIGHT_2");
        constantWindowCoveringStopLevelChangeParameterId.put(0x08, "IN_RIGHT_LEFT_1");
        constantWindowCoveringStopLevelChangeParameterId.put(0x09, "IN_RIGHT_LEFT_2");
        constantWindowCoveringStopLevelChangeParameterId.put(0x0A, "VERTICAL_SLATS_ANGLE_1");
        constantWindowCoveringStopLevelChangeParameterId.put(0x0B, "IN_TOP_1");
        constantWindowCoveringStopLevelChangeParameterId.put(0x0C, "OUT_BOTTOM_1");
        constantWindowCoveringStopLevelChangeParameterId.put(0x0D, "OUT_BOTTOM_2");
        constantWindowCoveringStopLevelChangeParameterId.put(0x0E, "OUT_TOP_1");
        constantWindowCoveringStopLevelChangeParameterId.put(0x0F, "OUT_TOP_2");
        constantWindowCoveringStopLevelChangeParameterId.put(0x11, "IN_BOTTOM_2");
        constantWindowCoveringStopLevelChangeParameterId.put(0x10, "IN_BOTTOM_1");
        constantWindowCoveringStopLevelChangeParameterId.put(0x13, "IN_TOP_BOTTOM_1");
        constantWindowCoveringStopLevelChangeParameterId.put(0x12, "IN_TOP_2");
        constantWindowCoveringStopLevelChangeParameterId.put(0x15, "HORIZONTAL_SLATS_ANGLE_1");
        constantWindowCoveringStopLevelChangeParameterId.put(0x14, "IN_TOP_BOTTOM_2");
        constantWindowCoveringStopLevelChangeParameterId.put(0x16, "HORIZONTAL_SLATS_ANGLE_2");

        // Constants for WindowCoveringSetParameterId
        constantWindowCoveringSetParameterId.put(0x00, "OUT_LEFT_1");
        constantWindowCoveringSetParameterId.put(0x01, "OUT_LEFT_2");
        constantWindowCoveringSetParameterId.put(0x02, "OUT_RIGHT_1");
        constantWindowCoveringSetParameterId.put(0x03, "OUT_RIGHT_2");
        constantWindowCoveringSetParameterId.put(0x04, "IN_LEFT_1");
        constantWindowCoveringSetParameterId.put(0x05, "IN_LEFT_2");
        constantWindowCoveringSetParameterId.put(0x06, "IN_RIGHT_1");
        constantWindowCoveringSetParameterId.put(0x07, "IN_RIGHT_2");
        constantWindowCoveringSetParameterId.put(0x08, "IN_RIGHT_LEFT_1");
        constantWindowCoveringSetParameterId.put(0x09, "IN_RIGHT_LEFT_2");
        constantWindowCoveringSetParameterId.put(0x0A, "VERTICAL_SLATS_ANGLE_1");
        constantWindowCoveringSetParameterId.put(0x0B, "IN_TOP_1");
        constantWindowCoveringSetParameterId.put(0x0C, "OUT_BOTTOM_1");
        constantWindowCoveringSetParameterId.put(0x0D, "OUT_BOTTOM_2");
        constantWindowCoveringSetParameterId.put(0x0E, "OUT_TOP_1");
        constantWindowCoveringSetParameterId.put(0x0F, "OUT_TOP_2");
        constantWindowCoveringSetParameterId.put(0x11, "IN_BOTTOM_2");
        constantWindowCoveringSetParameterId.put(0x10, "IN_BOTTOM_1");
        constantWindowCoveringSetParameterId.put(0x13, "IN_TOP_BOTTOM_1");
        constantWindowCoveringSetParameterId.put(0x12, "IN_TOP_2");
        constantWindowCoveringSetParameterId.put(0x15, "HORIZONTAL_SLATS_ANGLE_1");
        constantWindowCoveringSetParameterId.put(0x14, "IN_TOP_BOTTOM_2");
        constantWindowCoveringSetParameterId.put(0x16, "HORIZONTAL_SLATS_ANGLE_2");

        // Constants for WindowCoveringStartLevelChangeProperties1
        constantWindowCoveringStartLevelChangeProperties1.put(0x40, "UP_DOWN");
        constantWindowCoveringStartLevelChangeProperties1.put(0x80, "RES2");

        // Constants for WindowCoveringStartLevelChangeParameterId
        constantWindowCoveringStartLevelChangeParameterId.put(0x00, "OUT_LEFT_1");
        constantWindowCoveringStartLevelChangeParameterId.put(0x01, "OUT_LEFT_2");
        constantWindowCoveringStartLevelChangeParameterId.put(0x02, "OUT_RIGHT_1");
        constantWindowCoveringStartLevelChangeParameterId.put(0x03, "OUT_RIGHT_2");
        constantWindowCoveringStartLevelChangeParameterId.put(0x04, "IN_LEFT_1");
        constantWindowCoveringStartLevelChangeParameterId.put(0x05, "IN_LEFT_2");
        constantWindowCoveringStartLevelChangeParameterId.put(0x06, "IN_RIGHT_1");
        constantWindowCoveringStartLevelChangeParameterId.put(0x07, "IN_RIGHT_2");
        constantWindowCoveringStartLevelChangeParameterId.put(0x08, "IN_RIGHT_LEFT_1");
        constantWindowCoveringStartLevelChangeParameterId.put(0x09, "IN_RIGHT_LEFT_2");
        constantWindowCoveringStartLevelChangeParameterId.put(0x0A, "VERTICAL_SLATS_ANGLE_1");
        constantWindowCoveringStartLevelChangeParameterId.put(0x0B, "IN_TOP_1");
        constantWindowCoveringStartLevelChangeParameterId.put(0x0C, "OUT_BOTTOM_1");
        constantWindowCoveringStartLevelChangeParameterId.put(0x0D, "OUT_BOTTOM_2");
        constantWindowCoveringStartLevelChangeParameterId.put(0x0E, "OUT_TOP_1");
        constantWindowCoveringStartLevelChangeParameterId.put(0x0F, "OUT_TOP_2");
        constantWindowCoveringStartLevelChangeParameterId.put(0x11, "IN_BOTTOM_2");
        constantWindowCoveringStartLevelChangeParameterId.put(0x10, "IN_BOTTOM_1");
        constantWindowCoveringStartLevelChangeParameterId.put(0x13, "IN_TOP_BOTTOM_1");
        constantWindowCoveringStartLevelChangeParameterId.put(0x12, "IN_TOP_2");
        constantWindowCoveringStartLevelChangeParameterId.put(0x15, "HORIZONTAL_SLATS_ANGLE_1");
        constantWindowCoveringStartLevelChangeParameterId.put(0x14, "IN_TOP_BOTTOM_2");
        constantWindowCoveringStartLevelChangeParameterId.put(0x16, "HORIZONTAL_SLATS_ANGLE_2");

        // Constants for WindowCoveringReportParameterId
        constantWindowCoveringReportParameterId.put(0x00, "OUT_LEFT_1");
        constantWindowCoveringReportParameterId.put(0x01, "OUT_LEFT_2");
        constantWindowCoveringReportParameterId.put(0x02, "OUT_RIGHT_1");
        constantWindowCoveringReportParameterId.put(0x03, "OUT_RIGHT_2");
        constantWindowCoveringReportParameterId.put(0x04, "IN_LEFT_1");
        constantWindowCoveringReportParameterId.put(0x05, "IN_LEFT_2");
        constantWindowCoveringReportParameterId.put(0x06, "IN_RIGHT_1");
        constantWindowCoveringReportParameterId.put(0x07, "IN_RIGHT_2");
        constantWindowCoveringReportParameterId.put(0x08, "IN_RIGHT_LEFT_1");
        constantWindowCoveringReportParameterId.put(0x09, "IN_RIGHT_LEFT_2");
        constantWindowCoveringReportParameterId.put(0x0A, "VERTICAL_SLATS_ANGLE_1");
        constantWindowCoveringReportParameterId.put(0x0B, "IN_TOP_1");
        constantWindowCoveringReportParameterId.put(0x0C, "OUT_BOTTOM_1");
        constantWindowCoveringReportParameterId.put(0x0D, "OUT_BOTTOM_2");
        constantWindowCoveringReportParameterId.put(0x0E, "OUT_TOP_1");
        constantWindowCoveringReportParameterId.put(0x0F, "OUT_TOP_2");
        constantWindowCoveringReportParameterId.put(0x11, "IN_BOTTOM_2");
        constantWindowCoveringReportParameterId.put(0x10, "IN_BOTTOM_1");
        constantWindowCoveringReportParameterId.put(0x13, "IN_TOP_BOTTOM_1");
        constantWindowCoveringReportParameterId.put(0x12, "IN_TOP_2");
        constantWindowCoveringReportParameterId.put(0x15, "HORIZONTAL_SLATS_ANGLE_1");
        constantWindowCoveringReportParameterId.put(0x14, "IN_TOP_BOTTOM_2");
        constantWindowCoveringReportParameterId.put(0x16, "HORIZONTAL_SLATS_ANGLE_2");

        // Constants for WindowCoveringGetParameterId
        constantWindowCoveringGetParameterId.put(0x00, "OUT_LEFT_1");
        constantWindowCoveringGetParameterId.put(0x01, "OUT_LEFT_2");
        constantWindowCoveringGetParameterId.put(0x02, "OUT_RIGHT_1");
        constantWindowCoveringGetParameterId.put(0x03, "OUT_RIGHT_2");
        constantWindowCoveringGetParameterId.put(0x04, "IN_LEFT_1");
        constantWindowCoveringGetParameterId.put(0x05, "IN_LEFT_2");
        constantWindowCoveringGetParameterId.put(0x06, "IN_RIGHT_1");
        constantWindowCoveringGetParameterId.put(0x07, "IN_RIGHT_2");
        constantWindowCoveringGetParameterId.put(0x08, "IN_RIGHT_LEFT_1");
        constantWindowCoveringGetParameterId.put(0x09, "IN_RIGHT_LEFT_2");
        constantWindowCoveringGetParameterId.put(0x0A, "VERTICAL_SLATS_ANGLE_1");
        constantWindowCoveringGetParameterId.put(0x0B, "IN_TOP_1");
        constantWindowCoveringGetParameterId.put(0x0C, "OUT_BOTTOM_1");
        constantWindowCoveringGetParameterId.put(0x0D, "OUT_BOTTOM_2");
        constantWindowCoveringGetParameterId.put(0x0E, "OUT_TOP_1");
        constantWindowCoveringGetParameterId.put(0x0F, "OUT_TOP_2");
        constantWindowCoveringGetParameterId.put(0x11, "IN_BOTTOM_2");
        constantWindowCoveringGetParameterId.put(0x10, "IN_BOTTOM_1");
        constantWindowCoveringGetParameterId.put(0x13, "IN_TOP_BOTTOM_1");
        constantWindowCoveringGetParameterId.put(0x12, "IN_TOP_2");
        constantWindowCoveringGetParameterId.put(0x15, "HORIZONTAL_SLATS_ANGLE_1");
        constantWindowCoveringGetParameterId.put(0x14, "IN_TOP_BOTTOM_2");
        constantWindowCoveringGetParameterId.put(0x16, "HORIZONTAL_SLATS_ANGLE_2");
    }

    /**
     * Creates a new message with the WINDOW_COVERING_SUPPORTED_GET command.
     * <p>
     * Window Covering Supported Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getWindowCoveringSupportedGet() {
        logger.debug("Creating command message WINDOW_COVERING_SUPPORTED_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(WINDOW_COVERING_SUPPORTED_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the WINDOW_COVERING_SUPPORTED_GET command.
     * <p>
     * Window Covering Supported Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleWindowCoveringSupportedGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the WINDOW_COVERING_SUPPORTED_REPORT command.
     * <p>
     * Window Covering Supported Report
     *
     * @param parameterMask {@link List<Integer>}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getWindowCoveringSupportedReport(List<Integer> parameterMask) {
        logger.debug("Creating command message WINDOW_COVERING_SUPPORTED_REPORT version 1");

        Collections.sort(parameterMask);
        int lenParameterMask = (parameterMask.get(parameterMask.size() - 1) / 8) + 1;

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(WINDOW_COVERING_SUPPORTED_REPORT);

        // Process 'Properties1'
        outputData.write(lenParameterMask);

        // Process 'Parameter Mask'
        int valParameterMask = 0;
        for (int cntParameterMask = 1 ; cntParameterMask < lenParameterMask * 8 ; cntParameterMask++) {
            valParameterMask |= parameterMask.contains(valParameterMask) ? (1 << cntParameterMask % 8) : 0;
            if (cntParameterMask % 8 == 0) {
                outputData.write(valParameterMask);
                valParameterMask = 0;
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the WINDOW_COVERING_SUPPORTED_REPORT command.
     * <p>
     * Window Covering Supported Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>PARAMETER_MASK {@link List}<{@link Integer}>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleWindowCoveringSupportedReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("NUMBER_OF_PARAMETER_MASK_BYTES", Integer.valueOf(payload[2] & 0x0F));

        // Process 'Parameter Mask'
        List<Integer> responseParameterMask = new ArrayList<Integer>();
        int lenParameterMask = (payload[2] & 0x0F) * 8;
        for (int cntParameterMask = 0; cntParameterMask < lenParameterMask; cntParameterMask++) {
            if ((payload[3 + (cntParameterMask / 8)] & (1 << cntParameterMask % 8)) == 0) {
                continue;
            }
            responseParameterMask.add(cntParameterMask);
        }
        response.put("PARAMETER_MASK", responseParameterMask);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the WINDOW_COVERING_GET command.
     * <p>
     * Window Covering Get
     *
     * @param parameterId {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>OUT_LEFT_1
     *            <li>OUT_LEFT_2
     *            <li>OUT_RIGHT_1
     *            <li>OUT_RIGHT_2
     *            <li>IN_LEFT_1
     *            <li>IN_LEFT_2
     *            <li>IN_RIGHT_1
     *            <li>IN_RIGHT_2
     *            <li>IN_RIGHT_LEFT_1
     *            <li>IN_RIGHT_LEFT_2
     *            <li>VERTICAL_SLATS_ANGLE_1
     *            <li>IN_TOP_1
     *            <li>OUT_BOTTOM_1
     *            <li>OUT_BOTTOM_2
     *            <li>OUT_TOP_1
     *            <li>OUT_TOP_2
     *            <li>IN_BOTTOM_2
     *            <li>IN_BOTTOM_1
     *            <li>IN_TOP_BOTTOM_1
     *            <li>IN_TOP_2
     *            <li>HORIZONTAL_SLATS_ANGLE_1
     *            <li>IN_TOP_BOTTOM_2
     *            <li>HORIZONTAL_SLATS_ANGLE_2
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getWindowCoveringGet(String parameterId) {
        logger.debug("Creating command message WINDOW_COVERING_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(WINDOW_COVERING_GET);

        // Process 'Parameter ID'
        boolean foundParameterId = false;
        for (Integer entry : constantWindowCoveringGetParameterId.keySet()) {
            if (constantWindowCoveringGetParameterId.get(entry).equals(parameterId)) {
                outputData.write(entry);
                foundParameterId = true;
                break;
            }
        }
        if (!foundParameterId) {
            throw new IllegalArgumentException("Unknown constant value '" + parameterId + "' for parameterId");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the WINDOW_COVERING_GET command.
     * <p>
     * Window Covering Get
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>PARAMETER_ID {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>OUT_LEFT_1
     * <li>OUT_LEFT_2
     * <li>OUT_RIGHT_1
     * <li>OUT_RIGHT_2
     * <li>IN_LEFT_1
     * <li>IN_LEFT_2
     * <li>IN_RIGHT_1
     * <li>IN_RIGHT_2
     * <li>IN_RIGHT_LEFT_1
     * <li>IN_RIGHT_LEFT_2
     * <li>VERTICAL_SLATS_ANGLE_1
     * <li>IN_TOP_1
     * <li>OUT_BOTTOM_1
     * <li>OUT_BOTTOM_2
     * <li>OUT_TOP_1
     * <li>OUT_TOP_2
     * <li>IN_BOTTOM_2
     * <li>IN_BOTTOM_1
     * <li>IN_TOP_BOTTOM_1
     * <li>IN_TOP_2
     * <li>HORIZONTAL_SLATS_ANGLE_1
     * <li>IN_TOP_BOTTOM_2
     * <li>HORIZONTAL_SLATS_ANGLE_2
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleWindowCoveringGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Parameter ID'
        response.put("PARAMETER_ID", constantWindowCoveringGetParameterId.get(payload[2] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the WINDOW_COVERING_REPORT command.
     * <p>
     * Window Covering Report
     *
     * @param parameterId {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>OUT_LEFT_1
     *            <li>OUT_LEFT_2
     *            <li>OUT_RIGHT_1
     *            <li>OUT_RIGHT_2
     *            <li>IN_LEFT_1
     *            <li>IN_LEFT_2
     *            <li>IN_RIGHT_1
     *            <li>IN_RIGHT_2
     *            <li>IN_RIGHT_LEFT_1
     *            <li>IN_RIGHT_LEFT_2
     *            <li>VERTICAL_SLATS_ANGLE_1
     *            <li>IN_TOP_1
     *            <li>OUT_BOTTOM_1
     *            <li>OUT_BOTTOM_2
     *            <li>OUT_TOP_1
     *            <li>OUT_TOP_2
     *            <li>IN_BOTTOM_2
     *            <li>IN_BOTTOM_1
     *            <li>IN_TOP_BOTTOM_1
     *            <li>IN_TOP_2
     *            <li>HORIZONTAL_SLATS_ANGLE_1
     *            <li>IN_TOP_BOTTOM_2
     *            <li>HORIZONTAL_SLATS_ANGLE_2
     *            </ul>
     * @param currentValue {@link Integer}
     * @param targetValue {@link Integer}
     * @param duration {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getWindowCoveringReport(String parameterId, Integer currentValue, Integer targetValue,
            Integer duration) {
        logger.debug("Creating command message WINDOW_COVERING_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(WINDOW_COVERING_REPORT);

        // Process 'Parameter ID'
        boolean foundParameterId = false;
        for (Integer entry : constantWindowCoveringReportParameterId.keySet()) {
            if (constantWindowCoveringReportParameterId.get(entry).equals(parameterId)) {
                outputData.write(entry);
                foundParameterId = true;
                break;
            }
        }
        if (!foundParameterId) {
            throw new IllegalArgumentException("Unknown constant value '" + parameterId + "' for parameterId");
        }

        // Process 'Current Value'
        outputData.write(currentValue);

        // Process 'Target Value'
        outputData.write(targetValue);

        // Process 'Duration'
        outputData.write(duration);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the WINDOW_COVERING_REPORT command.
     * <p>
     * Window Covering Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>PARAMETER_ID {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>OUT_LEFT_1
     * <li>OUT_LEFT_2
     * <li>OUT_RIGHT_1
     * <li>OUT_RIGHT_2
     * <li>IN_LEFT_1
     * <li>IN_LEFT_2
     * <li>IN_RIGHT_1
     * <li>IN_RIGHT_2
     * <li>IN_RIGHT_LEFT_1
     * <li>IN_RIGHT_LEFT_2
     * <li>VERTICAL_SLATS_ANGLE_1
     * <li>IN_TOP_1
     * <li>OUT_BOTTOM_1
     * <li>OUT_BOTTOM_2
     * <li>OUT_TOP_1
     * <li>OUT_TOP_2
     * <li>IN_BOTTOM_2
     * <li>IN_BOTTOM_1
     * <li>IN_TOP_BOTTOM_1
     * <li>IN_TOP_2
     * <li>HORIZONTAL_SLATS_ANGLE_1
     * <li>IN_TOP_BOTTOM_2
     * <li>HORIZONTAL_SLATS_ANGLE_2
     * </ul>
     * <li>CURRENT_VALUE {@link Integer}
     * <li>TARGET_VALUE {@link Integer}
     * <li>DURATION {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleWindowCoveringReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Parameter ID'
        response.put("PARAMETER_ID", constantWindowCoveringReportParameterId.get(payload[2] & 0xff));

        // Process 'Current Value'
        response.put("CURRENT_VALUE", Integer.valueOf(payload[3]));

        // Process 'Target Value'
        response.put("TARGET_VALUE", Integer.valueOf(payload[4]));

        // Process 'Duration'
        response.put("DURATION", Integer.valueOf(payload[5]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the WINDOW_COVERING_SET command.
     * <p>
     * Window Covering Set
     *
     * @param parameterCount {@link Integer}
     * @param duration {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getWindowCoveringSet(Integer parameterCount, Integer duration) {
        logger.debug("Creating command message WINDOW_COVERING_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(WINDOW_COVERING_SET);

        // Process 'Properties1'
        outputData.write(parameterCount & 0x1F);

        // Process 'vg1'

        // Process 'Duration'
        outputData.write(duration);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the WINDOW_COVERING_SET command.
     * <p>
     * Window Covering Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>PARAMETER_COUNT {@link Integer}
     * <li>DURATION {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleWindowCoveringSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("PARAMETER_COUNT", Integer.valueOf(payload[2] & 0x1F));

        // Process 'vg1'

        // Create a list to hold the group vg1
        List<Map<String, Object>> variantList = new ArrayList<Map<String, Object>>();

        int offset = 3;
        while (offset < payload.length) {
            // Create a map to hold the members of this variant
            Map<String, Object> variant = new HashMap<String, Object>();

            // Process 'Parameter ID'
            variant.put("PARAMETER_ID", constantWindowCoveringSetParameterId.get(payload[3] & 0xff));

            // Process 'Value'
            variant.put("VALUE", Integer.valueOf(payload[4]));

            // Add to the list
            variantList.add(variant);

            // Add the length of this variant
            offset += (payload[offset + 0] & 0x1F) >> 0;
        }

        // Add the variant list to the response
        response.put("VG1", variantList);

        // Process 'Duration'
        response.put("DURATION", Integer.valueOf(payload[5]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the WINDOW_COVERING_START_LEVEL_CHANGE command.
     * <p>
     * Window Covering Start Level Change
     *
     * @param res1 {@link Integer}
     * @param upDown {@link Boolean}
     * @param res2 {@link Boolean}
     * @param parameterId {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>OUT_LEFT_1
     *            <li>OUT_LEFT_2
     *            <li>OUT_RIGHT_1
     *            <li>OUT_RIGHT_2
     *            <li>IN_LEFT_1
     *            <li>IN_LEFT_2
     *            <li>IN_RIGHT_1
     *            <li>IN_RIGHT_2
     *            <li>IN_RIGHT_LEFT_1
     *            <li>IN_RIGHT_LEFT_2
     *            <li>VERTICAL_SLATS_ANGLE_1
     *            <li>IN_TOP_1
     *            <li>OUT_BOTTOM_1
     *            <li>OUT_BOTTOM_2
     *            <li>OUT_TOP_1
     *            <li>OUT_TOP_2
     *            <li>IN_BOTTOM_2
     *            <li>IN_BOTTOM_1
     *            <li>IN_TOP_BOTTOM_1
     *            <li>IN_TOP_2
     *            <li>HORIZONTAL_SLATS_ANGLE_1
     *            <li>IN_TOP_BOTTOM_2
     *            <li>HORIZONTAL_SLATS_ANGLE_2
     *            </ul>
     * @param duration {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getWindowCoveringStartLevelChange(Integer res1, Boolean upDown, Boolean res2,
            String parameterId, Integer duration) {
        logger.debug("Creating command message WINDOW_COVERING_START_LEVEL_CHANGE version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(WINDOW_COVERING_START_LEVEL_CHANGE);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= res1 & 0x3F;
        valProperties1 |= upDown ? 0x40 : 0;
        valProperties1 |= res2 ? 0x80 : 0;
        outputData.write(valProperties1);

        // Process 'Parameter ID'
        boolean foundParameterId = false;
        for (Integer entry : constantWindowCoveringStartLevelChangeParameterId.keySet()) {
            if (constantWindowCoveringStartLevelChangeParameterId.get(entry).equals(parameterId)) {
                outputData.write(entry);
                foundParameterId = true;
                break;
            }
        }
        if (!foundParameterId) {
            throw new IllegalArgumentException("Unknown constant value '" + parameterId + "' for parameterId");
        }

        // Process 'Duration'
        outputData.write(duration);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the WINDOW_COVERING_START_LEVEL_CHANGE command.
     * <p>
     * Window Covering Start Level Change
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>RES1 {@link Integer}
     * <li>UP_DOWN {@link Boolean}
     * <li>RES2 {@link Boolean}
     * <li>PARAMETER_ID {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>OUT_LEFT_1
     * <li>OUT_LEFT_2
     * <li>OUT_RIGHT_1
     * <li>OUT_RIGHT_2
     * <li>IN_LEFT_1
     * <li>IN_LEFT_2
     * <li>IN_RIGHT_1
     * <li>IN_RIGHT_2
     * <li>IN_RIGHT_LEFT_1
     * <li>IN_RIGHT_LEFT_2
     * <li>VERTICAL_SLATS_ANGLE_1
     * <li>IN_TOP_1
     * <li>OUT_BOTTOM_1
     * <li>OUT_BOTTOM_2
     * <li>OUT_TOP_1
     * <li>OUT_TOP_2
     * <li>IN_BOTTOM_2
     * <li>IN_BOTTOM_1
     * <li>IN_TOP_BOTTOM_1
     * <li>IN_TOP_2
     * <li>HORIZONTAL_SLATS_ANGLE_1
     * <li>IN_TOP_BOTTOM_2
     * <li>HORIZONTAL_SLATS_ANGLE_2
     * </ul>
     * <li>DURATION {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleWindowCoveringStartLevelChange(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("RES1", Integer.valueOf(payload[2] & 0x3F));
        response.put("UP_DOWN", Boolean.valueOf((payload[2] & 0x40) != 0));
        response.put("RES2", Boolean.valueOf((payload[2] & 0x80) != 0));

        // Process 'Parameter ID'
        response.put("PARAMETER_ID", constantWindowCoveringStartLevelChangeParameterId.get(payload[3] & 0xff));

        // Process 'Duration'
        response.put("DURATION", Integer.valueOf(payload[4]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the WINDOW_COVERING_STOP_LEVEL_CHANGE command.
     * <p>
     * Window Covering Stop Level Change
     *
     * @param parameterId {@link String}
     *            Can be one of the following -:
     *            <p>
     *            <ul>
     *            <li>OUT_LEFT_1
     *            <li>OUT_LEFT_2
     *            <li>OUT_RIGHT_1
     *            <li>OUT_RIGHT_2
     *            <li>IN_LEFT_1
     *            <li>IN_LEFT_2
     *            <li>IN_RIGHT_1
     *            <li>IN_RIGHT_2
     *            <li>IN_RIGHT_LEFT_1
     *            <li>IN_RIGHT_LEFT_2
     *            <li>VERTICAL_SLATS_ANGLE_1
     *            <li>IN_TOP_1
     *            <li>OUT_BOTTOM_1
     *            <li>OUT_BOTTOM_2
     *            <li>OUT_TOP_1
     *            <li>OUT_TOP_2
     *            <li>IN_BOTTOM_2
     *            <li>IN_BOTTOM_1
     *            <li>IN_TOP_BOTTOM_1
     *            <li>IN_TOP_2
     *            <li>HORIZONTAL_SLATS_ANGLE_1
     *            <li>IN_TOP_BOTTOM_2
     *            <li>HORIZONTAL_SLATS_ANGLE_2
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getWindowCoveringStopLevelChange(String parameterId) {
        logger.debug("Creating command message WINDOW_COVERING_STOP_LEVEL_CHANGE version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(WINDOW_COVERING_STOP_LEVEL_CHANGE);

        // Process 'Parameter ID'
        boolean foundParameterId = false;
        for (Integer entry : constantWindowCoveringStopLevelChangeParameterId.keySet()) {
            if (constantWindowCoveringStopLevelChangeParameterId.get(entry).equals(parameterId)) {
                outputData.write(entry);
                foundParameterId = true;
                break;
            }
        }
        if (!foundParameterId) {
            throw new IllegalArgumentException("Unknown constant value '" + parameterId + "' for parameterId");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the WINDOW_COVERING_STOP_LEVEL_CHANGE command.
     * <p>
     * Window Covering Stop Level Change
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>PARAMETER_ID {@link String}
     * Can be one of the following -:
     * <p>
     * <ul>
     * <li>OUT_LEFT_1
     * <li>OUT_LEFT_2
     * <li>OUT_RIGHT_1
     * <li>OUT_RIGHT_2
     * <li>IN_LEFT_1
     * <li>IN_LEFT_2
     * <li>IN_RIGHT_1
     * <li>IN_RIGHT_2
     * <li>IN_RIGHT_LEFT_1
     * <li>IN_RIGHT_LEFT_2
     * <li>VERTICAL_SLATS_ANGLE_1
     * <li>IN_TOP_1
     * <li>OUT_BOTTOM_1
     * <li>OUT_BOTTOM_2
     * <li>OUT_TOP_1
     * <li>OUT_TOP_2
     * <li>IN_BOTTOM_2
     * <li>IN_BOTTOM_1
     * <li>IN_TOP_BOTTOM_1
     * <li>IN_TOP_2
     * <li>HORIZONTAL_SLATS_ANGLE_1
     * <li>IN_TOP_BOTTOM_2
     * <li>HORIZONTAL_SLATS_ANGLE_2
     * </ul>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleWindowCoveringStopLevelChange(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Parameter ID'
        response.put("PARAMETER_ID", constantWindowCoveringStopLevelChangeParameterId.get(payload[2] & 0xff));

        // Return the map of processed response data;
        return response;
    }
}
